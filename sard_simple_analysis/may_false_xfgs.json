[
  {
    "nodes-lineNo": [
      "180",
      "182",
      "190",
      "191",
      "195",
      "202",
      "203",
      "211",
      "217",
      "218",
      "225",
      "227",
      "239",
      "241",
      "244",
      "246",
      "248",
      "252"
    ],
    "keyLine": "248",
    "edges-No": [
      [
        0,
        12
      ],
      [
        1,
        12
      ],
      [
        2,
        6
      ],
      [
        3,
        8
      ],
      [
        3,
        10
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        5,
        7
      ],
      [
        5,
        8
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ],
      [
        7,
        8
      ],
      [
        7,
        9
      ],
      [
        8,
        9
      ],
      [
        9,
        10
      ],
      [
        9,
        11
      ],
      [
        10,
        12
      ],
      [
        11,
        4
      ],
      [
        12,
        13
      ],
      [
        13,
        16
      ],
      [
        13,
        15
      ],
      [
        14,
        16
      ],
      [
        14,
        17
      ],
      [
        15,
        16
      ],
      [
        16,
        17
      ]
    ],
    "target": 0,
    "filePath": "119-12500-c/testcases/000/062/539/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_34.c",
    "nodes-line": [
      "    CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_34_unionType myUnion;\n",
      "    data = -1;\n",
      "        SOCKET connectSocket = INVALID_SOCKET;\n",
      "        char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "            if (connectSocket == INVALID_SOCKET)\n",
      "            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data = atoi(inputBuffer);\n",
      "        while (0);\n",
      "    myUnion.unionFirst = data;\n",
      "        int data = myUnion.unionSecond;\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_34_unionType VAR1 ;",
      "VAR2 = - 1 ;",
      "SOCKET VAR3 = VAR4 ;",
      "char VAR5 [ VAR6 ] ;",
      "if ( FUN1 ( FUN2 ( 2 , 2 ) , & VAR7 ) != VAR8 )",
      "VAR3 = socket ( VAR9 , VAR10 , VAR11 ) ;",
      "if ( VAR3 == VAR4 )",
      "if ( connect ( VAR3 , ( struct VAR12 * ) & VAR13 , sizeof ( VAR13 ) ) == VAR14 )",
      "VAR15 = recv ( VAR3 , VAR5 , VAR6 - 1 , 0 ) ;",
      "if ( VAR15 == VAR14 || VAR15 == 0 )",
      "VAR2 = atoi ( VAR5 ) ;",
      "while ( 0 ) ;",
      "VAR1 . VAR16 = VAR2 ;",
      "int VAR2 = VAR1 . VAR17 ;",
      "int VAR18 [ 10 ] = { 0 } ;",
      "if ( VAR2 >= 0 && VAR2 < ( 10 ) )",
      "VAR18 [ VAR2 ] = 1 ;",
      "FUN3 ( VAR18 [ VAR19 ] ) ;"
    ],
    "pair_id": 12247,
    "xfg_id": 6147,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "99",
      "103",
      "105",
      "107",
      "111"
    ],
    "keyLine": "107",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ]
    ],
    "target": 0,
    "filePath": "119-12400-c/testcases/000/062/639/CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_44.c",
    "nodes-line": [
      "static void goodB2GSink(int data)\n",
      "        int buffer[10] = { 0 };\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "static void FUN1 ( int VAR1 )",
      "int VAR2 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR2 [ VAR1 ] = 1 ;",
      "FUN2 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 3488,
    "xfg_id": 4100,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "62",
      "64",
      "66",
      "67",
      "68"
    ],
    "keyLine": "68",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        4
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-4200-c/testcases/000/149/125/heap_overflow_cplx-bad.c",
    "nodes-line": [
      "buf = malloc(25*sizeof(char));\n",
      "if (buf != (char *)NULL)\n",
      "char *t = rand_text();\n",
      "if (t) {\n",
      "strcpy(buf,t);/* FLAW */\n"
    ],
    "nodes-line-sym": [
      "VAR1 = malloc ( 25 * sizeof ( char ) ) ;",
      "if ( VAR1 != ( char * ) NULL )",
      "char * VAR2 = FUN1 ( ) ;",
      "if ( VAR2 ) {",
      "strcpy ( VAR1 , VAR2 ) ;"
    ],
    "pair_id": 1552,
    "xfg_id": 8208,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "62",
      "63",
      "64",
      "66",
      "68",
      "70",
      "71",
      "72"
    ],
    "keyLine": "62",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        0,
        7
      ],
      [
        0,
        1
      ],
      [
        1,
        1
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ]
    ],
    "target": 0,
    "filePath": "119-1000-c/testcases/000/234/254/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_18.c",
    "nodes-line": [
      "        charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));\n",
      "        if (structCharVoid == NULL) {exit(-1);}\n",
      "        structCharVoid->voidSecond = (void *)SRC_STR;\n",
      "        printWLine((wchar_t *)structCharVoid->voidSecond);\n",
      "        memcpy(structCharVoid->charFirst, SRC_STR, sizeof(structCharVoid->charFirst));\n",
      "        printWLine((wchar_t *)structCharVoid->charFirst);\n",
      "        printWLine((wchar_t *)structCharVoid->voidSecond);\n",
      "        free(structCharVoid);\n"
    ],
    "nodes-line-sym": [
      "VAR1 * VAR2 = ( VAR1 * ) malloc ( sizeof ( VAR1 ) ) ;",
      "if ( VAR2 == NULL ) { FUN1 ( - 1 ) ; }",
      "VAR2 -> VAR3 = ( void * ) VAR4 ;",
      "FUN2 ( ( wchar_t * ) VAR2 -> VAR3 ) ;",
      "memcpy ( VAR2 -> VAR5 , VAR4 , sizeof ( VAR2 -> VAR5 ) ) ;",
      "FUN2 ( ( wchar_t * ) VAR2 -> VAR5 ) ;",
      "FUN2 ( ( wchar_t * ) VAR2 -> VAR3 ) ;",
      "free ( VAR2 ) ;"
    ],
    "pair_id": 10827,
    "xfg_id": 10257,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "28",
      "32",
      "41"
    ],
    "keyLine": "32",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        3
      ]
    ],
    "target": 1,
    "filePath": "119-1600-c/testcases/000/233/455/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_03.c",
    "nodes-line": [
      "    data = (char *)malloc(100*sizeof(char));\n",
      "    if(5==5)\n",
      "        data[100-1] = '\\0'; /* null terminate */\n",
      "            dest[i] = data[i];\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( 5 == 5 )",
      "VAR1 [ 100 - 1 ] = '' ;",
      "VAR2 [ VAR3 ] = VAR1 [ VAR3 ] ;"
    ],
    "pair_id": 2528,
    "xfg_id": 8212,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "104",
      "105",
      "108",
      "110",
      "114",
      "116",
      "118",
      "122"
    ],
    "keyLine": "118",
    "edges-No": [
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        1,
        2
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        7
      ],
      [
        4,
        6
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-7000-c/testcases/000/074/143/CWE124_Buffer_Underwrite__CWE839_negative_02.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(1)\n",
      "        data = -5;\n",
      "    if(1)\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( 1 )",
      "VAR1 = - 5 ;",
      "if ( 1 )",
      "int VAR2 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR2 [ VAR1 ] = 1 ;",
      "FUN1 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 13704,
    "xfg_id": 6173,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "36",
      "38",
      "42"
    ],
    "keyLine": "42",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-2900-c/testcases/000/231/920/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c",
    "nodes-line": [
      "        charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));\n",
      "        structCharVoid->voidSecond = (void *)SRC_STR;\n",
      "        memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));\n"
    ],
    "nodes-line-sym": [
      "VAR1 * VAR2 = ( VAR1 * ) malloc ( sizeof ( VAR1 ) ) ;",
      "VAR2 -> VAR3 = ( void * ) VAR4 ;",
      "memmove ( VAR2 -> VAR5 , VAR4 , sizeof ( * VAR2 ) ) ;"
    ],
    "pair_id": 4360,
    "xfg_id": 4130,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "32",
      "36",
      "39",
      "41",
      "43",
      "45"
    ],
    "keyLine": "45",
    "edges-No": [
      [
        0,
        4
      ],
      [
        0,
        3
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        4
      ],
      [
        2,
        6
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        6
      ],
      [
        5,
        5
      ],
      [
        5,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-7500-c/testcases/000/073/647/CWE124_Buffer_Underwrite__CWE839_fscanf_02.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(1)\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data < 10)\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( 1 )",
      "int VAR2 [ 10 ] = { 0 } ;",
      "if ( VAR1 < 10 )",
      "VAR2 [ VAR1 ] = 1 ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "FUN1 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 7076,
    "xfg_id": 12324,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "27",
      "28",
      "33",
      "47"
    ],
    "keyLine": "33",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-10200-c/testcases/000/065/526/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_15.c",
    "nodes-line": [
      "    char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    data = dataBuffer;\n",
      "    switch(6)\n",
      "        data[100-1] = '\\0'; /* null terminate */\n",
      "            dest[i] = data[i];\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "VAR2 = VAR1 ;",
      "switch ( 6 )",
      "VAR2 [ 100 - 1 ] = '' ;",
      "VAR3 [ VAR4 ] = VAR2 [ VAR4 ] ;"
    ],
    "pair_id": 1648,
    "xfg_id": 10284,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "89",
      "93",
      "100",
      "102",
      "106"
    ],
    "keyLine": "102",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/067/696/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_large_54e.cpp",
    "nodes-line": [
      "void goodB2GSink_e(int data)\n",
      "        int * buffer = new int[10];\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( int VAR1 )",
      "int * VAR2 = new int [ 10 ] ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR2 [ VAR1 ] = 1 ;",
      "FUN2 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 1403,
    "xfg_id": 10287,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "33",
      "36",
      "37",
      "43",
      "44",
      "45"
    ],
    "keyLine": "36",
    "edges-No": [
      [
        0,
        0
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        5
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        2
      ],
      [
        2,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-2400-c/testcases/000/232/532/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_17.c",
    "nodes-line": [
      "    for(i = 0; i < 1; i++)\n",
      "        data = (char *)malloc(10*sizeof(char));\n",
      "        if (data == NULL) {exit(-1);}\n",
      "        memmove(data, source, (strlen(source) + 1) * sizeof(char));\n",
      "        printLine(data);\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "for ( VAR1 = 0 ; VAR1 < 1 ; VAR1 ++ )",
      "VAR2 = ( char * ) malloc ( 10 * sizeof ( char ) ) ;",
      "if ( VAR2 == NULL ) { FUN1 ( - 1 ) ; }",
      "memmove ( VAR2 , VAR3 , ( strlen ( VAR3 ) + 1 ) * sizeof ( char ) ) ;",
      "FUN2 ( VAR2 ) ;",
      "free ( VAR2 ) ;"
    ],
    "pair_id": 8879,
    "xfg_id": 12337,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "35",
      "38",
      "40",
      "42",
      "44",
      "46",
      "47"
    ],
    "keyLine": "40",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        6
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-1000-c/testcases/000/234/238/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_02.c",
    "nodes-line": [
      "    if(1)\n",
      "            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));\n",
      "            structCharVoid->voidSecond = (void *)SRC_STR;\n",
      "            printWLine((wchar_t *)structCharVoid->voidSecond);\n",
      "            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));\n",
      "            printWLine((wchar_t *)structCharVoid->charFirst);\n",
      "            printWLine((wchar_t *)structCharVoid->voidSecond);\n"
    ],
    "nodes-line-sym": [
      "if ( 1 )",
      "VAR1 * VAR2 = ( VAR1 * ) malloc ( sizeof ( VAR1 ) ) ;",
      "VAR2 -> VAR3 = ( void * ) VAR4 ;",
      "FUN1 ( ( wchar_t * ) VAR2 -> VAR3 ) ;",
      "memcpy ( VAR2 -> VAR5 , VAR4 , sizeof ( * VAR2 ) ) ;",
      "FUN1 ( ( wchar_t * ) VAR2 -> VAR5 ) ;",
      "FUN1 ( ( wchar_t * ) VAR2 -> VAR3 ) ;"
    ],
    "pair_id": 4298,
    "xfg_id": 6195,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "32",
      "33",
      "34",
      "35",
      "40"
    ],
    "keyLine": "32",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        1,
        1
      ],
      [
        2,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-1100-c/testcases/000/234/159/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c",
    "nodes-line": [
      "        data = (double *)malloc(sizeof(data));\n",
      "        if (data == NULL) {exit(-1);}\n",
      "        *data = 1.7E300;\n",
      "        *dataPtr1 = data;\n",
      "        printDoubleLine(*data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( double * ) malloc ( sizeof ( VAR1 ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "* VAR1 = 1 . 7E300 ;",
      "* VAR2 = VAR1 ;",
      "FUN2 ( * VAR1 ) ;"
    ],
    "pair_id": 3855,
    "xfg_id": 8248,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "28",
      "29",
      "32",
      "33",
      "35",
      "36"
    ],
    "keyLine": "28",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        1
      ],
      [
        1,
        1
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ]
    ],
    "target": 1,
    "filePath": "119-1000-c/testcases/000/234/191/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c",
    "nodes-line": [
      "    data = (int64_t *)malloc(sizeof(data));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "        int64_t * dataCopy = data;\n",
      "        int64_t * data = dataCopy;\n",
      "        printLongLongLine(*data);\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( VAR2 * ) malloc ( sizeof ( VAR1 ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "VAR2 * VAR3 = VAR1 ;",
      "VAR2 * VAR1 = VAR3 ;",
      "FUN2 ( * VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 6129,
    "xfg_id": 10308,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "40",
      "41",
      "42",
      "46",
      "55"
    ],
    "keyLine": "46",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        4
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-9900-c/testcases/000/065/807/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c",
    "nodes-line": [
      "    char dataBuffer[100];\n",
      "    data = dataBuffer;\n",
      "    if(staticReturnsTrue())\n",
      "        data[100-1] = '\\0'; /* null terminate */\n",
      "            dest[i] = data[i];\n"
    ],
    "nodes-line-sym": [
      "char VAR1 [ 100 ] ;",
      "VAR2 = VAR1 ;",
      "if ( FUN1 ( ) )",
      "VAR2 [ 100 - 1 ] = '' ;",
      "VAR3 [ VAR4 ] = VAR2 [ VAR4 ] ;"
    ],
    "pair_id": 3598,
    "xfg_id": 4170,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "25",
      "28",
      "29",
      "34",
      "35",
      "36"
    ],
    "keyLine": "28",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        2
      ],
      [
        2,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-2800-c/testcases/000/232/014/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_03.c",
    "nodes-line": [
      "    if(5==5)\n",
      "        data = (int *)malloc(10);\n",
      "        if (data == NULL) {exit(-1);}\n",
      "        memcpy(data, source, 10*sizeof(int));\n",
      "        printIntLine(data[0]);\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "if ( 5 == 5 )",
      "VAR1 = ( int * ) malloc ( 10 ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memcpy ( VAR1 , VAR2 , 10 * sizeof ( int ) ) ;",
      "FUN2 ( VAR1 [ 0 ] ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 4273,
    "xfg_id": 6226,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "32",
      "36",
      "39",
      "41",
      "45",
      "47",
      "49",
      "51"
    ],
    "keyLine": "51",
    "edges-No": [
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        5
      ],
      [
        2,
        8
      ],
      [
        2,
        4
      ],
      [
        2,
        6
      ],
      [
        3,
        4
      ],
      [
        3,
        3
      ],
      [
        4,
        8
      ],
      [
        5,
        7
      ],
      [
        5,
        6
      ],
      [
        6,
        8
      ],
      [
        7,
        7
      ],
      [
        7,
        8
      ]
    ],
    "target": 1,
    "filePath": "119-2600-c/testcases/000/232/251/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_03.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(5==5)\n",
      "            int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "            for (i = 0; i < 10; i++)\n",
      "                buffer[i] = 0;\n",
      "            if (data >= 0)\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( 5 == 5 )",
      "int * VAR2 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "VAR2 [ VAR3 ] = 0 ;",
      "if ( VAR1 >= 0 )",
      "VAR2 [ VAR1 ] = 1 ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "FUN1 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 11076,
    "xfg_id": 10323,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "34",
      "35",
      "38",
      "41",
      "44"
    ],
    "keyLine": "44",
    "edges-No": [
      [
        0,
        4
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/067/961/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memmove_10.cpp",
    "nodes-line": [
      "    data = NULL;\n",
      "    if(globalTrue)\n",
      "        data = new char[10];\n",
      "        char source[10+1] = SRC_STRING;\n",
      "        memmove(data, source, (strlen(source) + 1) * sizeof(char));\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "if ( VAR2 )",
      "VAR1 = new char [ 10 ] ;",
      "char VAR3 [ 10 + 1 ] = VAR4 ;",
      "memmove ( VAR1 , VAR3 , ( strlen ( VAR3 ) + 1 ) * sizeof ( char ) ) ;"
    ],
    "pair_id": 101,
    "xfg_id": 12387,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "117",
      "118",
      "122",
      "125",
      "129",
      "138",
      "140",
      "144"
    ],
    "keyLine": "140",
    "edges-No": [
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        1,
        2
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        7
      ],
      [
        4,
        6
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-2500-c/testcases/000/232/390/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_16.c",
    "nodes-line": [
      "    data = -1;\n",
      "    while(1)\n",
      "        data = 7;\n",
      "    while(1)\n",
      "            int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "            if (data >= 0)\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "while ( 1 )",
      "VAR1 = 7 ;",
      "while ( 1 )",
      "int * VAR2 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "if ( VAR1 >= 0 )",
      "VAR2 [ VAR1 ] = 1 ;",
      "FUN1 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 7702,
    "xfg_id": 12390,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "92",
      "94",
      "97",
      "99",
      "101",
      "103",
      "105"
    ],
    "keyLine": "105",
    "edges-No": [
      [
        0,
        2
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        4,
        6
      ],
      [
        5,
        6
      ]
    ],
    "target": 0,
    "filePath": "119-6300-c/testcases/000/075/717/CWE126_Buffer_Overread__CWE129_fscanf_34.c",
    "nodes-line": [
      "    CWE126_Buffer_Overread__CWE129_fscanf_34_unionType myUnion;\n",
      "    data = -1;\n",
      "    myUnion.unionFirst = data;\n",
      "        int data = myUnion.unionSecond;\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                printIntLine(buffer[data]);\n"
    ],
    "nodes-line-sym": [
      "CWE126_Buffer_Overread__CWE129_fscanf_34_unionType VAR1 ;",
      "VAR2 = - 1 ;",
      "VAR1 . VAR3 = VAR2 ;",
      "int VAR2 = VAR1 . VAR4 ;",
      "int VAR5 [ 10 ] = { 0 } ;",
      "if ( VAR2 >= 0 && VAR2 < ( 10 ) )",
      "FUN1 ( VAR5 [ VAR2 ] ) ;"
    ],
    "pair_id": 6780,
    "xfg_id": 10344,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "36",
      "39",
      "40",
      "41",
      "43",
      "45",
      "46",
      "47",
      "48",
      "49"
    ],
    "keyLine": "39",
    "edges-No": [
      [
        0,
        0
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        0,
        7
      ],
      [
        0,
        8
      ],
      [
        0,
        9
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        6
      ],
      [
        1,
        7
      ],
      [
        1,
        8
      ],
      [
        1,
        9
      ],
      [
        2,
        2
      ],
      [
        3,
        8
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ]
    ],
    "target": 1,
    "filePath": "119-2900-c/testcases/000/231/918/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_17.c",
    "nodes-line": [
      "    for(j = 0; j < 1; j++)\n",
      "            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));\n",
      "            if (structCharVoid == NULL) {exit(-1);}\n",
      "            structCharVoid->voidSecond = (void *)SRC_STR;\n",
      "            printLine((char *)structCharVoid->voidSecond);\n",
      "            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));\n",
      "            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\\0'; /* null terminate the string */\n",
      "            printLine((char *)structCharVoid->charFirst);\n",
      "            printLine((char *)structCharVoid->voidSecond);\n",
      "            free(structCharVoid);\n"
    ],
    "nodes-line-sym": [
      "for ( VAR1 = 0 ; VAR1 < 1 ; VAR1 ++ )",
      "VAR2 * VAR3 = ( VAR2 * ) malloc ( sizeof ( VAR2 ) ) ;",
      "if ( VAR3 == NULL ) { FUN1 ( - 1 ) ; }",
      "VAR3 -> VAR4 = ( void * ) VAR5 ;",
      "FUN2 ( ( char * ) VAR3 -> VAR4 ) ;",
      "memcpy ( VAR3 -> VAR6 , VAR5 , sizeof ( * VAR3 ) ) ;",
      "VAR3 -> VAR6 [ ( sizeof ( VAR3 -> VAR6 ) / sizeof ( char ) ) - 1 ] = '' ;",
      "FUN2 ( ( char * ) VAR3 -> VAR6 ) ;",
      "FUN2 ( ( char * ) VAR3 -> VAR4 ) ;",
      "free ( VAR3 ) ;"
    ],
    "pair_id": 4693,
    "xfg_id": 8298,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "66",
      "69",
      "70",
      "72",
      "74",
      "77"
    ],
    "keyLine": "77",
    "edges-No": [
      [
        0,
        2
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        5
      ],
      [
        4,
        5
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/067/975/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memmove_34.cpp",
    "nodes-line": [
      "    unionType myUnion;\n",
      "    data = new char[10+1];\n",
      "    myUnion.unionFirst = data;\n",
      "        char * data = myUnion.unionSecond;\n",
      "            char source[10+1] = SRC_STRING;\n",
      "            memmove(data, source, (strlen(source) + 1) * sizeof(char));\n"
    ],
    "nodes-line-sym": [
      "unionType VAR1 ;",
      "VAR2 = new char [ 10 + 1 ] ;",
      "VAR1 . VAR3 = VAR2 ;",
      "char * VAR2 = VAR1 . VAR4 ;",
      "char VAR5 [ 10 + 1 ] = VAR6 ;",
      "memmove ( VAR2 , VAR5 , ( strlen ( VAR5 ) + 1 ) * sizeof ( char ) ) ;"
    ],
    "pair_id": 8835,
    "xfg_id": 8299,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "27",
      "30",
      "32",
      "36",
      "39",
      "41",
      "43",
      "45"
    ],
    "keyLine": "45",
    "edges-No": [
      [
        0,
        6
      ],
      [
        0,
        5
      ],
      [
        1,
        2
      ],
      [
        2,
        6
      ],
      [
        2,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        6
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        8
      ],
      [
        7,
        7
      ],
      [
        7,
        8
      ]
    ],
    "target": 1,
    "filePath": "119-12400-c/testcases/000/062/668/CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(GLOBAL_CONST_TRUE)\n",
      "        data = 10;\n",
      "    if(GLOBAL_CONST_TRUE)\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0)\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( VAR2 )",
      "VAR1 = 10 ;",
      "if ( VAR2 )",
      "int VAR3 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 )",
      "VAR3 [ VAR1 ] = 1 ;",
      "for ( VAR4 = 0 ; VAR4 < 10 ; VAR4 ++ )",
      "FUN1 ( VAR3 [ VAR4 ] ) ;"
    ],
    "pair_id": 604,
    "xfg_id": 4208,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "25",
      "28",
      "34",
      "38",
      "42",
      "44",
      "45",
      "51",
      "53"
    ],
    "keyLine": "53",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        1
      ],
      [
        1,
        8
      ],
      [
        2,
        8
      ],
      [
        3,
        8
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        4,
        4
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        5,
        6
      ],
      [
        6,
        5
      ],
      [
        6,
        8
      ],
      [
        7,
        7
      ],
      [
        7,
        8
      ],
      [
        8,
        8
      ]
    ],
    "target": 1,
    "filePath": "119-1900-c/testcases/000/233/154/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_12.c",
    "nodes-line": [
      "    if(globalReturnsTrueOrFalse())\n",
      "        data = (twoIntsStruct *)malloc(50*sizeof(twoIntsStruct));\n",
      "        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));\n",
      "        twoIntsStruct source[100];\n",
      "            for (i = 0; i < 100; i++)\n",
      "                source[i].intOne = 0;\n",
      "                source[i].intTwo = 0;\n",
      "            for (i = 0; i < 100; i++)\n",
      "                data[i] = source[i];\n"
    ],
    "nodes-line-sym": [
      "if ( FUN1 ( ) )",
      "VAR1 = ( VAR2 * ) malloc ( 50 * sizeof ( VAR2 ) ) ;",
      "VAR1 = ( VAR2 * ) malloc ( 100 * sizeof ( VAR2 ) ) ;",
      "twoIntsStruct VAR3 [ 100 ] ;",
      "for ( VAR4 = 0 ; VAR4 < 100 ; VAR4 ++ )",
      "VAR3 [ VAR4 ] . VAR5 = 0 ;",
      "VAR3 [ VAR4 ] . VAR6 = 0 ;",
      "for ( VAR4 = 0 ; VAR4 < 100 ; VAR4 ++ )",
      "VAR1 [ VAR4 ] = VAR3 [ VAR4 ] ;"
    ],
    "pair_id": 8524,
    "xfg_id": 12403,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "86",
      "87",
      "90",
      "92",
      "95",
      "103",
      "112",
      "119",
      "121",
      "125"
    ],
    "keyLine": "121",
    "edges-No": [
      [
        0,
        8
      ],
      [
        0,
        7
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ],
      [
        4,
        8
      ],
      [
        4,
        7
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        8
      ],
      [
        6,
        9
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/067/578/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_fgets_11.cpp",
    "nodes-line": [
      "    data = -1;\n",
      "    if(globalReturnsTrue())\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n",
      "            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n",
      "                data = atoi(inputBuffer);\n",
      "    if(globalReturnsFalse())\n",
      "            int * buffer = new int[10];\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( FUN1 ( ) )",
      "char VAR2 [ VAR3 ] = \"\" ;",
      "if ( fgets ( VAR2 , VAR3 , stdin ) != NULL )",
      "VAR1 = atoi ( VAR2 ) ;",
      "if ( FUN2 ( ) )",
      "int * VAR4 = new int [ 10 ] ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR4 [ VAR1 ] = 1 ;",
      "FUN3 ( VAR4 [ VAR5 ] ) ;"
    ],
    "pair_id": 5439,
    "xfg_id": 8310,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "66",
      "69",
      "74",
      "76",
      "78",
      "81",
      "82",
      "86"
    ],
    "keyLine": "86",
    "edges-No": [
      [
        0,
        3
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-2700-c/testcases/000/232/142/CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c",
    "nodes-line": [
      "    CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType myUnion;\n",
      "        char * dataGoodBuffer = (char *)malloc(50*sizeof(char));\n",
      "        data = (void *)dataGoodBuffer;\n",
      "    myUnion.unionFirst = data;\n",
      "        void * data = myUnion.unionSecond;\n",
      "            size_t dataLen = strlen((char *)data);\n",
      "            void * dest = (void *)calloc(dataLen+1, 1);\n",
      "            free(dest);\n"
    ],
    "nodes-line-sym": [
      "CWE122_Heap_Based_Buffer_Overflow__CWE135_34_unionType VAR1 ;",
      "char * VAR2 = ( char * ) malloc ( 50 * sizeof ( char ) ) ;",
      "VAR3 = ( void * ) VAR2 ;",
      "VAR1 . VAR4 = VAR3 ;",
      "void * VAR3 = VAR1 . VAR5 ;",
      "size_t VAR6 = strlen ( ( char * ) VAR3 ) ;",
      "void * VAR7 = ( void * ) calloc ( VAR6 + 1 , 1 ) ;",
      "free ( VAR7 ) ;"
    ],
    "pair_id": 1342,
    "xfg_id": 10358,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "83",
      "85",
      "88",
      "90",
      "92",
      "96"
    ],
    "keyLine": "92",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        5
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/073/641/CWE124_Buffer_Underwrite__CWE839_fgets_74b.cpp",
    "nodes-line": [
      "void goodB2GSink(map<int, int> dataMap)\n",
      "    int data = dataMap[2];\n",
      "        int buffer[10] = { 0 };\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( VAR1 < int , int > VAR2 )",
      "int VAR3 = VAR2 [ 2 ] ;",
      "int VAR4 [ 10 ] = { 0 } ;",
      "if ( VAR3 >= 0 && VAR3 < ( 10 ) )",
      "VAR4 [ VAR3 ] = 1 ;",
      "FUN2 ( VAR4 [ VAR5 ] ) ;"
    ],
    "pair_id": 1017,
    "xfg_id": 10374,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "32",
      "35",
      "41",
      "45",
      "47"
    ],
    "keyLine": "47",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        1
      ],
      [
        1,
        4
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-2500-c/testcases/000/232/428/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_12.c",
    "nodes-line": [
      "    if(globalReturnsTrueOrFalse())\n",
      "        data = (char *)malloc(10*sizeof(char));\n",
      "        data = (char *)malloc((10+1)*sizeof(char));\n",
      "        char source[10+1] = SRC_STRING;\n",
      "        strcpy(data, source);\n"
    ],
    "nodes-line-sym": [
      "if ( FUN1 ( ) )",
      "VAR1 = ( char * ) malloc ( 10 * sizeof ( char ) ) ;",
      "VAR1 = ( char * ) malloc ( ( 10 + 1 ) * sizeof ( char ) ) ;",
      "char VAR2 [ 10 + 1 ] = VAR3 ;",
      "strcpy ( VAR1 , VAR2 ) ;"
    ],
    "pair_id": 11509,
    "xfg_id": 10387,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "28",
      "31",
      "36",
      "42",
      "47",
      "50",
      "66",
      "67",
      "68",
      "69",
      "70",
      "71"
    ],
    "keyLine": "66",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        6
      ],
      [
        2,
        9
      ],
      [
        3,
        4
      ],
      [
        4,
        6
      ],
      [
        4,
        9
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        5,
        8
      ],
      [
        5,
        9
      ],
      [
        5,
        10
      ],
      [
        5,
        11
      ],
      [
        6,
        7
      ],
      [
        7,
        8
      ],
      [
        7,
        9
      ],
      [
        7,
        10
      ],
      [
        7,
        11
      ],
      [
        8,
        8
      ]
    ],
    "target": 0,
    "filePath": "119-2800-c/testcases/000/232/130/CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c",
    "nodes-line": [
      "    if(globalReturnsTrueOrFalse())\n",
      "            wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));\n",
      "            data = (void *)dataBadBuffer;\n",
      "            char * dataGoodBuffer = (char *)malloc(50*sizeof(char));\n",
      "            data = (void *)dataGoodBuffer;\n",
      "    if(globalReturnsTrueOrFalse())\n",
      "            size_t dataLen = wcslen((wchar_t *)data);\n",
      "            void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));\n",
      "            if (dest == NULL) {exit(-1);}\n",
      "            (void)wcscpy(dest, data);\n",
      "            printWLine((wchar_t *)dest);\n",
      "            free(dest);\n"
    ],
    "nodes-line-sym": [
      "if ( FUN1 ( ) )",
      "wchar_t * VAR1 = ( wchar_t * ) malloc ( 50 * sizeof ( wchar_t ) ) ;",
      "VAR2 = ( void * ) VAR1 ;",
      "char * VAR3 = ( char * ) malloc ( 50 * sizeof ( char ) ) ;",
      "VAR2 = ( void * ) VAR3 ;",
      "if ( FUN1 ( ) )",
      "size_t VAR4 = wcslen ( ( wchar_t * ) VAR2 ) ;",
      "void * VAR5 = ( void * ) calloc ( VAR4 + 1 , sizeof ( wchar_t ) ) ;",
      "if ( VAR5 == NULL ) { FUN2 ( - 1 ) ; }",
      "( void ) wcscpy ( VAR5 , VAR2 ) ;",
      "FUN3 ( ( wchar_t * ) VAR5 ) ;",
      "free ( VAR5 ) ;"
    ],
    "pair_id": 10106,
    "xfg_id": 8344,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "73",
      "79",
      "88",
      "90",
      "92",
      "95",
      "97",
      "99",
      "101"
    ],
    "keyLine": "101",
    "edges-No": [
      [
        0,
        6
      ],
      [
        0,
        5
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        5
      ],
      [
        2,
        6
      ],
      [
        2,
        4
      ],
      [
        2,
        8
      ],
      [
        3,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        8
      ],
      [
        7,
        7
      ],
      [
        7,
        8
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/067/626/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_fscanf_11.cpp",
    "nodes-line": [
      "    data = -1;\n",
      "    if(globalReturnsFalse())\n",
      "            int * buffer = new int[10];\n",
      "            for (i = 0; i < 10; i++)\n",
      "                buffer[i] = 0;\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( FUN1 ( ) )",
      "int * VAR2 = new int [ 10 ] ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "VAR2 [ VAR3 ] = 0 ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR2 [ VAR1 ] = 1 ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "FUN2 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 3978,
    "xfg_id": 10400,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "60",
      "68",
      "69",
      "70",
      "72",
      "74",
      "76",
      "77",
      "78"
    ],
    "keyLine": "68",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        0,
        7
      ],
      [
        0,
        8
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        6
      ],
      [
        1,
        7
      ],
      [
        1,
        8
      ],
      [
        2,
        2
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-1000-c/testcases/000/234/245/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_09.c",
    "nodes-line": [
      "    if(GLOBAL_CONST_FALSE)\n",
      "            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));\n",
      "            if (structCharVoid == NULL) {exit(-1);}\n",
      "            structCharVoid->voidSecond = (void *)SRC_STR;\n",
      "            printWLine((wchar_t *)structCharVoid->voidSecond);\n",
      "            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(structCharVoid->charFirst));\n",
      "            printWLine((wchar_t *)structCharVoid->charFirst);\n",
      "            printWLine((wchar_t *)structCharVoid->voidSecond);\n",
      "            free(structCharVoid);\n"
    ],
    "nodes-line-sym": [
      "if ( VAR1 )",
      "VAR2 * VAR3 = ( VAR2 * ) malloc ( sizeof ( VAR2 ) ) ;",
      "if ( VAR3 == NULL ) { FUN1 ( - 1 ) ; }",
      "VAR3 -> VAR4 = ( void * ) VAR5 ;",
      "FUN2 ( ( wchar_t * ) VAR3 -> VAR4 ) ;",
      "memcpy ( VAR3 -> VAR6 , VAR5 , sizeof ( VAR3 -> VAR6 ) ) ;",
      "FUN2 ( ( wchar_t * ) VAR3 -> VAR6 ) ;",
      "FUN2 ( ( wchar_t * ) VAR3 -> VAR4 ) ;",
      "free ( VAR3 ) ;"
    ],
    "pair_id": 2655,
    "xfg_id": 12449,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "53",
      "56"
    ],
    "keyLine": "56",
    "edges-No": [
      [
        0,
        1
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/065/970/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_43.cpp",
    "nodes-line": [
      "static void goodG2BSource(char * &data)\n",
      "    memset(data, 'A', 50-1); /* fill with 'A's */\n"
    ],
    "nodes-line-sym": [
      "static void FUN1 ( char * & VAR1 )",
      "memset ( VAR1 , '' , 50 - 1 ) ;"
    ],
    "pair_id": 257,
    "xfg_id": 8354,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "181",
      "183",
      "191",
      "192",
      "193",
      "197",
      "204",
      "205",
      "213",
      "217",
      "221",
      "222",
      "227",
      "228",
      "235",
      "237",
      "253",
      "255",
      "257",
      "259",
      "261"
    ],
    "keyLine": "261",
    "edges-No": [
      [
        0,
        16
      ],
      [
        1,
        16
      ],
      [
        2,
        3
      ],
      [
        3,
        7
      ],
      [
        4,
        12
      ],
      [
        4,
        14
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        8
      ],
      [
        6,
        10
      ],
      [
        6,
        9
      ],
      [
        6,
        7
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ],
      [
        9,
        10
      ],
      [
        9,
        11
      ],
      [
        10,
        12
      ],
      [
        10,
        11
      ],
      [
        11,
        12
      ],
      [
        11,
        13
      ],
      [
        12,
        13
      ],
      [
        13,
        14
      ],
      [
        13,
        15
      ],
      [
        14,
        16
      ],
      [
        15,
        5
      ],
      [
        16,
        17
      ],
      [
        17,
        19
      ],
      [
        17,
        20
      ],
      [
        18,
        20
      ],
      [
        19,
        20
      ]
    ],
    "target": 0,
    "filePath": "119-6200-c/testcases/000/075/813/CWE126_Buffer_Overread__CWE129_listen_socket_34.c",
    "nodes-line": [
      "    CWE126_Buffer_Overread__CWE129_listen_socket_34_unionType myUnion;\n",
      "    data = -1;\n",
      "        SOCKET listenSocket = INVALID_SOCKET;\n",
      "        SOCKET acceptSocket = INVALID_SOCKET;\n",
      "        char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "            if (listenSocket == INVALID_SOCKET)\n",
      "            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "            acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "            if (acceptSocket == SOCKET_ERROR)\n",
      "            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data = atoi(inputBuffer);\n",
      "        while (0);\n",
      "    myUnion.unionFirst = data;\n",
      "        int data = myUnion.unionSecond;\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                printIntLine(buffer[data]);\n"
    ],
    "nodes-line-sym": [
      "CWE126_Buffer_Overread__CWE129_listen_socket_34_unionType VAR1 ;",
      "VAR2 = - 1 ;",
      "SOCKET VAR3 = VAR4 ;",
      "SOCKET VAR5 = VAR4 ;",
      "char VAR6 [ VAR7 ] ;",
      "if ( FUN1 ( FUN2 ( 2 , 2 ) , & VAR8 ) != VAR9 )",
      "VAR3 = socket ( VAR10 , VAR11 , VAR12 ) ;",
      "if ( VAR3 == VAR4 )",
      "if ( bind ( VAR3 , ( struct VAR13 * ) & VAR14 , sizeof ( VAR14 ) ) == VAR15 )",
      "if ( FUN3 ( VAR3 , VAR16 ) == VAR15 )",
      "VAR5 = accept ( VAR3 , NULL , NULL ) ;",
      "if ( VAR5 == VAR15 )",
      "VAR17 = recv ( VAR5 , VAR6 , VAR7 - 1 , 0 ) ;",
      "if ( VAR17 == VAR15 || VAR17 == 0 )",
      "VAR2 = atoi ( VAR6 ) ;",
      "while ( 0 ) ;",
      "VAR1 . VAR18 = VAR2 ;",
      "int VAR2 = VAR1 . VAR19 ;",
      "int VAR20 [ 10 ] = { 0 } ;",
      "if ( VAR2 >= 0 && VAR2 < ( 10 ) )",
      "FUN4 ( VAR20 [ VAR2 ] ) ;"
    ],
    "pair_id": 1718,
    "xfg_id": 4263,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "85",
      "86",
      "90",
      "97",
      "106",
      "108",
      "110",
      "113",
      "115",
      "117",
      "119"
    ],
    "keyLine": "119",
    "edges-No": [
      [
        0,
        7
      ],
      [
        0,
        8
      ],
      [
        1,
        2
      ],
      [
        2,
        7
      ],
      [
        2,
        8
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        7
      ],
      [
        4,
        8
      ],
      [
        4,
        6
      ],
      [
        4,
        10
      ],
      [
        5,
        5
      ],
      [
        5,
        6
      ],
      [
        6,
        10
      ],
      [
        7,
        8
      ],
      [
        7,
        9
      ],
      [
        8,
        10
      ],
      [
        9,
        9
      ],
      [
        9,
        10
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/067/774/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_15.cpp",
    "nodes-line": [
      "    data = -1;\n",
      "    switch(6)\n",
      "        data = RAND32();\n",
      "    switch(8)\n",
      "        int * buffer = new int[10];\n",
      "        for (i = 0; i < 10; i++)\n",
      "            buffer[i] = 0;\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "            for(i = 0; i < 10; i++)\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "switch ( 6 )",
      "VAR1 = FUN1 ( ) ;",
      "switch ( 8 )",
      "int * VAR2 = new int [ 10 ] ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "VAR2 [ VAR3 ] = 0 ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR2 [ VAR1 ] = 1 ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "FUN2 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 13852,
    "xfg_id": 4269,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "53",
      "59",
      "62"
    ],
    "keyLine": "59",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-13500-c/testcases/000/000/321/basic-00052-min.c",
    "nodes-line": [
      "  int index_array[5];\n",
      "  index_array[0] = 11;\n",
      "  strncpy(buf, src, index_array[0]);\n"
    ],
    "nodes-line-sym": [
      "int VAR1 [ 5 ] ;",
      "VAR1 [ 0 ] = 11 ;",
      "strncpy ( VAR2 , VAR3 , VAR1 [ 0 ] ) ;"
    ],
    "pair_id": 3755,
    "xfg_id": 12465,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "35",
      "38",
      "40",
      "44"
    ],
    "keyLine": "44",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ]
    ],
    "target": 1,
    "filePath": "119-1000-c/testcases/000/234/252/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_16.c",
    "nodes-line": [
      "    while(1)\n",
      "            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));\n",
      "            structCharVoid->voidSecond = (void *)SRC_STR;\n",
      "            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));\n"
    ],
    "nodes-line-sym": [
      "while ( 1 )",
      "VAR1 * VAR2 = ( VAR1 * ) malloc ( sizeof ( VAR1 ) ) ;",
      "VAR2 -> VAR3 = ( void * ) VAR4 ;",
      "memcpy ( VAR2 -> VAR5 , VAR4 , sizeof ( * VAR2 ) ) ;"
    ],
    "pair_id": 2520,
    "xfg_id": 4274,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "27",
      "30",
      "32",
      "36",
      "45",
      "47",
      "51"
    ],
    "keyLine": "47",
    "edges-No": [
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        1,
        2
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        7
      ],
      [
        4,
        6
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ]
    ],
    "target": 1,
    "filePath": "119-2600-c/testcases/000/232/304/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_14.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(globalFive==5)\n",
      "        data = 10;\n",
      "    if(globalFive==5)\n",
      "            int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "            if (data >= 0)\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( VAR2 == 5 )",
      "VAR1 = 10 ;",
      "if ( VAR2 == 5 )",
      "int * VAR3 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "if ( VAR1 >= 0 )",
      "VAR3 [ VAR1 ] = 1 ;",
      "FUN1 ( VAR3 [ VAR4 ] ) ;"
    ],
    "pair_id": 755,
    "xfg_id": 8370,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "90",
      "94",
      "95",
      "99"
    ],
    "keyLine": "99",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ]
    ],
    "target": 0,
    "filePath": "119-2900-c/testcases/000/231/880/CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_15.c",
    "nodes-line": [
      "    switch(6)\n",
      "        charVoid structCharVoid;\n",
      "        structCharVoid.voidSecond = (void *)SRC_STR;\n",
      "        memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid.charFirst));\n"
    ],
    "nodes-line-sym": [
      "switch ( 6 )",
      "charVoid VAR1 ;",
      "VAR1 . VAR2 = ( void * ) VAR3 ;",
      "memcpy ( VAR1 . VAR4 , VAR3 , sizeof ( VAR1 . VAR4 ) ) ;"
    ],
    "pair_id": 1605,
    "xfg_id": 6324,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "25",
      "29",
      "30",
      "40",
      "41",
      "42"
    ],
    "keyLine": "29",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        2
      ],
      [
        2,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-2800-c/testcases/000/232/026/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c",
    "nodes-line": [
      "    switch(6)\n",
      "        data = (int *)malloc(10);\n",
      "        if (data == NULL) {exit(-1);}\n",
      "        memcpy(data, source, 10*sizeof(int));\n",
      "        printIntLine(data[0]);\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "switch ( 6 )",
      "VAR1 = ( int * ) malloc ( 10 ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memcpy ( VAR1 , VAR2 , 10 * sizeof ( int ) ) ;",
      "FUN2 ( VAR1 [ 0 ] ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 7763,
    "xfg_id": 6337,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "28",
      "30",
      "31",
      "34",
      "43",
      "45",
      "49"
    ],
    "keyLine": "45",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        2,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-2500-c/testcases/000/232/395/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_31.c",
    "nodes-line": [
      "    data = RAND32();\n",
      "        int dataCopy = data;\n",
      "        int data = dataCopy;\n",
      "            int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "            if (data >= 0)\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = FUN1 ( ) ;",
      "int VAR2 = VAR1 ;",
      "int VAR1 = VAR2 ;",
      "int * VAR3 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "if ( VAR1 >= 0 )",
      "VAR3 [ VAR1 ] = 1 ;",
      "FUN2 ( VAR3 [ VAR4 ] ) ;"
    ],
    "pair_id": 1172,
    "xfg_id": 8385,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "60",
      "62",
      "63",
      "65",
      "66",
      "75",
      "77",
      "78"
    ],
    "keyLine": "60",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        3
      ],
      [
        1,
        2
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        4,
        7
      ],
      [
        5,
        5
      ]
    ],
    "target": 0,
    "filePath": "119-11400-c/testcases/000/063/850/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_31.c",
    "nodes-line": [
      "    char * dataGoodBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    data = dataGoodBuffer;\n",
      "    data[0] = '\\0'; /* null terminate */\n",
      "        char * dataCopy = data;\n",
      "        char * data = dataCopy;\n",
      "                data[i] = source[i];\n",
      "            data[100-1] = '\\0'; /* Ensure the destination buffer is null terminated */\n",
      "            printLine(data);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "VAR2 = VAR1 ;",
      "VAR2 [ 0 ] = '' ;",
      "char * VAR3 = VAR2 ;",
      "char * VAR2 = VAR3 ;",
      "VAR2 [ VAR4 ] = VAR5 [ VAR4 ] ;",
      "VAR2 [ 100 - 1 ] = '' ;",
      "FUN2 ( VAR2 ) ;"
    ],
    "pair_id": 12433,
    "xfg_id": 10435,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "61",
      "66",
      "69",
      "70",
      "73",
      "74",
      "78"
    ],
    "keyLine": "78",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ]
    ],
    "target": 0,
    "filePath": "119-2700-c/testcases/000/232/139/CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c",
    "nodes-line": [
      "        char * dataGoodBuffer = (char *)malloc(50*sizeof(char));\n",
      "        data = (void *)dataGoodBuffer;\n",
      "        void * dataCopy = data;\n",
      "        void * data = dataCopy;\n",
      "            size_t dataLen = strlen((char *)data);\n",
      "            void * dest = (void *)calloc(dataLen+1, 1);\n",
      "            free(dest);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) malloc ( 50 * sizeof ( char ) ) ;",
      "VAR2 = ( void * ) VAR1 ;",
      "void * VAR3 = VAR2 ;",
      "void * VAR2 = VAR3 ;",
      "size_t VAR4 = strlen ( ( char * ) VAR2 ) ;",
      "void * VAR5 = ( void * ) calloc ( VAR4 + 1 , 1 ) ;",
      "free ( VAR5 ) ;"
    ],
    "pair_id": 13907,
    "xfg_id": 8392,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "86",
      "87",
      "90",
      "94",
      "97"
    ],
    "keyLine": "97",
    "edges-No": [
      [
        0,
        4
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ]
    ],
    "target": 0,
    "filePath": "119-2300-c/testcases/000/232/653/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_06.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    if(STATIC_CONST_FIVE==5)\n",
      "        data = (wchar_t *)malloc((10+1)*sizeof(wchar_t));\n",
      "        wchar_t source[10+1] = SRC_STRING;\n",
      "        memcpy(data, source, (wcslen(source) + 1) * sizeof(wchar_t));\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "if ( VAR2 == 5 )",
      "VAR1 = ( wchar_t * ) malloc ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ;",
      "wchar_t VAR3 [ 10 + 1 ] = VAR4 ;",
      "memcpy ( VAR1 , VAR3 , ( wcslen ( VAR3 ) + 1 ) * sizeof ( wchar_t ) ) ;"
    ],
    "pair_id": 10210,
    "xfg_id": 4298,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "28",
      "31",
      "34",
      "36",
      "40",
      "42",
      "44",
      "46"
    ],
    "keyLine": "46",
    "edges-No": [
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        1,
        3
      ],
      [
        1,
        5
      ],
      [
        1,
        7
      ],
      [
        2,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        7
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        6
      ],
      [
        6,
        7
      ]
    ],
    "target": 1,
    "filePath": "119-2500-c/testcases/000/232/375/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_01.c",
    "nodes-line": [
      "    data = RAND32();\n",
      "        int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "        for (i = 0; i < 10; i++)\n",
      "            buffer[i] = 0;\n",
      "        if (data >= 0)\n",
      "            buffer[data] = 1;\n",
      "            for(i = 0; i < 10; i++)\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = FUN1 ( ) ;",
      "int * VAR2 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "VAR2 [ VAR3 ] = 0 ;",
      "if ( VAR1 >= 0 )",
      "VAR2 [ VAR1 ] = 1 ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "FUN2 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 5248,
    "xfg_id": 4301,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "134",
      "136",
      "140",
      "119",
      "122",
      "124",
      "127"
    ],
    "keyLine": "136",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ],
      [
        5,
        1
      ],
      [
        5,
        0
      ],
      [
        6,
        1
      ],
      [
        6,
        2
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/067/556/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_64b.cpp",
    "nodes-line": [
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "                printIntLine(buffer[i]);\n",
      "void goodB2GSink(void * dataVoidPtr)\n",
      "    int * dataPtr = (int *)dataVoidPtr;\n",
      "    int data = (*dataPtr);\n",
      "        int * buffer = new int[10];\n"
    ],
    "nodes-line-sym": [
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR2 [ VAR1 ] = 1 ;",
      "FUN1 ( VAR2 [ VAR3 ] ) ;",
      "void FUN2 ( void * VAR4 )",
      "int * VAR5 = ( int * ) VAR4 ;",
      "int VAR1 = ( * VAR5 ) ;",
      "int * VAR2 = new int [ 10 ] ;"
    ],
    "pair_id": 1282,
    "xfg_id": 8398,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "66",
      "67",
      "69",
      "70",
      "71",
      "73",
      "77",
      "78",
      "79"
    ],
    "keyLine": "66",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        1,
        1
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        5,
        8
      ]
    ],
    "target": 0,
    "filePath": "119-1500-c/testcases/000/233/635/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_34.c",
    "nodes-line": [
      "    data = (char *)malloc(100*sizeof(char));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "    memset(data, 'A', 50-1); /* fill with 'A's */\n",
      "    data[50-1] = '\\0'; /* null terminate */\n",
      "    myUnion.unionFirst = data;\n",
      "        char * data = myUnion.unionSecond;\n",
      "            SNPRINTF(dest, strlen(data), \"%s\", data);\n",
      "            printLine(data);\n",
      "            free(data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR1 , '' , 50 - 1 ) ;",
      "VAR1 [ 50 - 1 ] = '' ;",
      "VAR2 . VAR3 = VAR1 ;",
      "char * VAR1 = VAR2 . VAR4 ;",
      "FUN2 ( VAR5 , strlen ( VAR1 ) , \"\" , VAR1 ) ;",
      "FUN3 ( VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 2417,
    "xfg_id": 12498,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "58",
      "62"
    ],
    "keyLine": "62",
    "edges-No": [
      [
        0,
        1
      ]
    ],
    "target": 1,
    "filePath": "119-13600-c/testcases/000/000/243/basic-00033-large.c",
    "nodes-line": [
      "  my_union array_buf[5];\n",
      "  array_buf[4].buf[4105] = 'A';\n"
    ],
    "nodes-line-sym": [
      "my_union VAR1 [ 5 ] ;",
      "VAR1 [ 4 ] . VAR2 [ 4105 ] = '' ;"
    ],
    "pair_id": 2930,
    "xfg_id": 6360,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "97",
      "101",
      "102",
      "105",
      "107",
      "109",
      "113"
    ],
    "keyLine": "109",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        2,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        5
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ]
    ],
    "target": 0,
    "filePath": "119-12400-c/testcases/000/062/632/CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_31.c",
    "nodes-line": [
      "    data = -1;\n",
      "        int dataCopy = data;\n",
      "        int data = dataCopy;\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "int VAR2 = VAR1 ;",
      "int VAR1 = VAR2 ;",
      "int VAR3 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR3 [ VAR1 ] = 1 ;",
      "FUN1 ( VAR3 [ VAR4 ] ) ;"
    ],
    "pair_id": 6685,
    "xfg_id": 4318,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "30",
      "31",
      "35",
      "36"
    ],
    "keyLine": "30",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        2
      ],
      [
        2,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-1000-c/testcases/000/234/179/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_09.c",
    "nodes-line": [
      "    if(GLOBAL_CONST_TRUE)\n",
      "        data = (int64_t *)malloc(sizeof(data));\n",
      "        if (data == NULL) {exit(-1);}\n",
      "    printLongLongLine(*data);\n",
      "    free(data);\n"
    ],
    "nodes-line-sym": [
      "if ( VAR1 )",
      "VAR2 = ( VAR3 * ) malloc ( sizeof ( VAR2 ) ) ;",
      "if ( VAR2 == NULL ) { FUN1 ( - 1 ) ; }",
      "FUN2 ( * VAR2 ) ;",
      "free ( VAR2 ) ;"
    ],
    "pair_id": 229,
    "xfg_id": 4333,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "72",
      "73",
      "76",
      "78",
      "81",
      "89",
      "97",
      "99",
      "101"
    ],
    "keyLine": "101",
    "edges-No": [
      [
        0,
        7
      ],
      [
        0,
        8
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        4
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        7
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        8
      ],
      [
        7,
        8
      ]
    ],
    "target": 0,
    "filePath": "119-6400-c/testcases/000/075/656/CWE126_Buffer_Overread__CWE129_fgets_11.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(globalReturnsTrue())\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n",
      "            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n",
      "                data = atoi(inputBuffer);\n",
      "    if(globalReturnsFalse())\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                printIntLine(buffer[data]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( FUN1 ( ) )",
      "char VAR2 [ VAR3 ] = \"\" ;",
      "if ( fgets ( VAR2 , VAR3 , stdin ) != NULL )",
      "VAR1 = atoi ( VAR2 ) ;",
      "if ( FUN2 ( ) )",
      "int VAR4 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "FUN3 ( VAR4 [ VAR1 ] ) ;"
    ],
    "pair_id": 7056,
    "xfg_id": 6383,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "32",
      "35",
      "36",
      "44",
      "46",
      "47"
    ],
    "keyLine": "35",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        4
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        5
      ],
      [
        2,
        2
      ],
      [
        3,
        3
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-2800-c/testcases/000/231/983/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c",
    "nodes-line": [
      "    if(staticTrue)\n",
      "        data = (int *)malloc(10);\n",
      "        if (data == NULL) {exit(-1);}\n",
      "            data[i] = source[i];\n",
      "        printIntLine(data[0]);\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "if ( VAR1 )",
      "VAR2 = ( int * ) malloc ( 10 ) ;",
      "if ( VAR2 == NULL ) { FUN1 ( - 1 ) ; }",
      "VAR2 [ VAR3 ] = VAR4 [ VAR3 ] ;",
      "FUN2 ( VAR2 [ 0 ] ) ;",
      "free ( VAR2 ) ;"
    ],
    "pair_id": 65,
    "xfg_id": 10480,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "47",
      "48",
      "51",
      "58"
    ],
    "keyLine": "58",
    "edges-No": [
      [
        0,
        3
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ]
    ],
    "target": 0,
    "filePath": "119-12200-c/testcases/000/062/915/CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_16.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    while(1)\n",
      "        data = (int *)ALLOCA(10*sizeof(int));\n",
      "        printIntLine(data[0]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "while ( 1 )",
      "VAR1 = ( int * ) FUN1 ( 10 * sizeof ( int ) ) ;",
      "FUN2 ( VAR1 [ 0 ] ) ;"
    ],
    "pair_id": 13014,
    "xfg_id": 4336,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "18",
      "22",
      "23",
      "25",
      "26",
      "27",
      "30",
      "32",
      "34",
      "35"
    ],
    "keyLine": "26",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        6
      ],
      [
        0,
        2
      ],
      [
        1,
        5
      ],
      [
        1,
        2
      ],
      [
        2,
        7
      ],
      [
        2,
        8
      ],
      [
        2,
        9
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        2,
        5
      ],
      [
        3,
        7
      ],
      [
        3,
        4
      ],
      [
        3,
        6
      ],
      [
        4,
        7
      ],
      [
        4,
        8
      ],
      [
        4,
        9
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        5,
        5
      ],
      [
        6,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-0-c/testcases/000/240/390/CWE416_Use_After_Free__return_freed_ptr_08.c",
    "nodes-line": [
      "static char * helperBad(char * aString)\n",
      "    char * reversedString = NULL;\n",
      "    if (aString != NULL)\n",
      "        i = strlen(aString);\n",
      "        reversedString = (char *) malloc(i+1);\n",
      "        if (reversedString == NULL) {exit(-1);}\n",
      "            reversedString[j] = aString[i-j-1];\n",
      "        reversedString[i] = '\\0';\n",
      "        free(reversedString);\n",
      "        return reversedString;\n"
    ],
    "nodes-line-sym": [
      "static char * FUN1 ( char * VAR1 )",
      "char * VAR2 = NULL ;",
      "if ( VAR1 != NULL )",
      "VAR3 = strlen ( VAR1 ) ;",
      "VAR2 = ( char * ) malloc ( VAR3 + 1 ) ;",
      "if ( VAR2 == NULL ) { FUN2 ( - 1 ) ; }",
      "VAR2 [ VAR4 ] = VAR1 [ VAR3 - VAR4 - 1 ] ;",
      "VAR2 [ VAR3 ] = '' ;",
      "free ( VAR2 ) ;",
      "return VAR2 ;"
    ],
    "pair_id": 589,
    "xfg_id": 12528,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "156",
      "157",
      "166",
      "167",
      "168",
      "172",
      "179",
      "180",
      "188",
      "192",
      "196",
      "197",
      "202",
      "203",
      "210",
      "212",
      "229",
      "233",
      "235",
      "237",
      "241"
    ],
    "keyLine": "237",
    "edges-No": [
      [
        0,
        18
      ],
      [
        0,
        19
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        1
      ],
      [
        2,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        2
      ],
      [
        4,
        14
      ],
      [
        4,
        12
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        9
      ],
      [
        6,
        10
      ],
      [
        6,
        7
      ],
      [
        6,
        8
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ],
      [
        9,
        10
      ],
      [
        9,
        11
      ],
      [
        10,
        12
      ],
      [
        10,
        11
      ],
      [
        11,
        12
      ],
      [
        11,
        13
      ],
      [
        12,
        13
      ],
      [
        13,
        14
      ],
      [
        13,
        15
      ],
      [
        14,
        18
      ],
      [
        14,
        19
      ],
      [
        15,
        5
      ],
      [
        16,
        16
      ],
      [
        16,
        17
      ],
      [
        16,
        18
      ],
      [
        17,
        20
      ],
      [
        17,
        19
      ],
      [
        18,
        19
      ],
      [
        19,
        20
      ]
    ],
    "target": 0,
    "filePath": "119-12300-c/testcases/000/062/724/CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_17.c",
    "nodes-line": [
      "    data = -1;\n",
      "    for(i = 0; i < 1; i++)\n",
      "            SOCKET listenSocket = INVALID_SOCKET;\n",
      "            SOCKET acceptSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (listenSocket == INVALID_SOCKET)\n",
      "                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "                acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "                if (acceptSocket == SOCKET_ERROR)\n",
      "                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "    for(k = 0; k < 1; k++)\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "for ( VAR2 = 0 ; VAR2 < 1 ; VAR2 ++ )",
      "SOCKET VAR3 = VAR4 ;",
      "SOCKET VAR5 = VAR4 ;",
      "char VAR6 [ VAR7 ] ;",
      "if ( FUN1 ( FUN2 ( 2 , 2 ) , & VAR8 ) != VAR9 )",
      "VAR3 = socket ( VAR10 , VAR11 , VAR12 ) ;",
      "if ( VAR3 == VAR4 )",
      "if ( bind ( VAR3 , ( struct VAR13 * ) & VAR14 , sizeof ( VAR14 ) ) == VAR15 )",
      "if ( FUN3 ( VAR3 , VAR16 ) == VAR15 )",
      "VAR5 = accept ( VAR3 , NULL , NULL ) ;",
      "if ( VAR5 == VAR15 )",
      "VAR17 = recv ( VAR5 , VAR6 , VAR7 - 1 , 0 ) ;",
      "if ( VAR17 == VAR15 || VAR17 == 0 )",
      "VAR1 = atoi ( VAR6 ) ;",
      "while ( 0 ) ;",
      "for ( VAR18 = 0 ; VAR18 < 1 ; VAR18 ++ )",
      "int VAR19 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR19 [ VAR1 ] = 1 ;",
      "FUN4 ( VAR19 [ VAR2 ] ) ;"
    ],
    "pair_id": 1233,
    "xfg_id": 4345,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "37",
      "40",
      "44"
    ],
    "keyLine": "44",
    "edges-No": [
      [
        0,
        2
      ],
      [
        1,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/233/367/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_43.cpp",
    "nodes-line": [
      "    data = NULL;\n",
      "        wchar_t source[100];\n",
      "        wcsncat(data, source, 100);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "wchar_t VAR2 [ 100 ] ;",
      "wcsncat ( VAR1 , VAR2 , 100 ) ;"
    ],
    "pair_id": 10654,
    "xfg_id": 12539,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "41",
      "44"
    ],
    "keyLine": "41",
    "edges-No": [
      [
        0,
        1
      ]
    ],
    "target": 1,
    "filePath": "119-12100-c/testcases/000/063/114/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_03.c",
    "nodes-line": [
      "        char source[10+1] = SRC_STRING;\n",
      "        memcpy(data, source, (strlen(source) + 1) * sizeof(char));\n"
    ],
    "nodes-line-sym": [
      "char VAR1 [ 10 + 1 ] = VAR2 ;",
      "memcpy ( VAR3 , VAR1 , ( strlen ( VAR1 ) + 1 ) * sizeof ( char ) ) ;"
    ],
    "pair_id": 85,
    "xfg_id": 6400,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "61",
      "62",
      "63",
      "64",
      "66",
      "69",
      "70",
      "73",
      "74",
      "75",
      "76",
      "77",
      "78"
    ],
    "keyLine": "61",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        1
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ],
      [
        6,
        10
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ],
      [
        8,
        10
      ],
      [
        8,
        11
      ],
      [
        8,
        12
      ],
      [
        9,
        9
      ]
    ],
    "target": 0,
    "filePath": "119-2700-c/testcases/000/232/139/CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c",
    "nodes-line": [
      "        char * dataGoodBuffer = (char *)malloc(50*sizeof(char));\n",
      "        if (dataGoodBuffer == NULL) {exit(-1);}\n",
      "        memset(dataGoodBuffer, 'A', 50-1);\n",
      "        dataGoodBuffer[50-1] = '\\0';\n",
      "        data = (void *)dataGoodBuffer;\n",
      "        void * dataCopy = data;\n",
      "        void * data = dataCopy;\n",
      "            size_t dataLen = strlen((char *)data);\n",
      "            void * dest = (void *)calloc(dataLen+1, 1);\n",
      "            if (dest == NULL) {exit(-1);}\n",
      "            (void)strcpy(dest, data);\n",
      "            printLine((char *)dest);\n",
      "            free(dest);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) malloc ( 50 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR1 , '' , 50 - 1 ) ;",
      "VAR1 [ 50 - 1 ] = '' ;",
      "VAR2 = ( void * ) VAR1 ;",
      "void * VAR3 = VAR2 ;",
      "void * VAR2 = VAR3 ;",
      "size_t VAR4 = strlen ( ( char * ) VAR2 ) ;",
      "void * VAR5 = ( void * ) calloc ( VAR4 + 1 , 1 ) ;",
      "if ( VAR5 == NULL ) { FUN1 ( - 1 ) ; }",
      "( void ) strcpy ( VAR5 , VAR2 ) ;",
      "FUN2 ( ( char * ) VAR5 ) ;",
      "free ( VAR5 ) ;"
    ],
    "pair_id": 13907,
    "xfg_id": 8451,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "24",
      "25",
      "28",
      "33",
      "35"
    ],
    "keyLine": "35",
    "edges-No": [
      [
        0,
        4
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-2800-c/testcases/000/232/027/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    while(1)\n",
      "        data = (int *)malloc(10);\n",
      "        int source[10] = {0};\n",
      "        memcpy(data, source, 10*sizeof(int));\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "while ( 1 )",
      "VAR1 = ( int * ) malloc ( 10 ) ;",
      "int VAR2 [ 10 ] = { 0 } ;",
      "memcpy ( VAR1 , VAR2 , 10 * sizeof ( int ) ) ;"
    ],
    "pair_id": 3625,
    "xfg_id": 4368,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "24",
      "25",
      "28",
      "32",
      "34"
    ],
    "keyLine": "34",
    "edges-No": [
      [
        0,
        4
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-2800-c/testcases/000/232/094/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_09.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    if(GLOBAL_CONST_TRUE)\n",
      "        data = (int *)malloc(10);\n",
      "        int source[10] = {0};\n",
      "        memmove(data, source, 10*sizeof(int));\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "if ( VAR2 )",
      "VAR1 = ( int * ) malloc ( 10 ) ;",
      "int VAR3 [ 10 ] = { 0 } ;",
      "memmove ( VAR1 , VAR3 , 10 * sizeof ( int ) ) ;"
    ],
    "pair_id": 2044,
    "xfg_id": 6429,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "50",
      "53"
    ],
    "keyLine": "53",
    "edges-No": [
      [
        0,
        1
      ]
    ],
    "target": 0,
    "filePath": "119-1100-c/testcases/000/234/038/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_42.c",
    "nodes-line": [
      "static char * goodG2BSource(char * data)\n",
      "    memset(data, 'A', 50-1); /* fill with 'A's */\n"
    ],
    "nodes-line-sym": [
      "static char * FUN1 ( char * VAR1 )",
      "memset ( VAR1 , '' , 50 - 1 ) ;"
    ],
    "pair_id": 970,
    "xfg_id": 6431,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "28",
      "31",
      "36",
      "42",
      "47",
      "50",
      "66",
      "67",
      "69"
    ],
    "keyLine": "69",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        6
      ],
      [
        2,
        8
      ],
      [
        3,
        4
      ],
      [
        4,
        6
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        5,
        8
      ],
      [
        6,
        7
      ],
      [
        7,
        8
      ]
    ],
    "target": 0,
    "filePath": "119-2800-c/testcases/000/232/130/CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c",
    "nodes-line": [
      "    if(globalReturnsTrueOrFalse())\n",
      "            wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));\n",
      "            data = (void *)dataBadBuffer;\n",
      "            char * dataGoodBuffer = (char *)malloc(50*sizeof(char));\n",
      "            data = (void *)dataGoodBuffer;\n",
      "    if(globalReturnsTrueOrFalse())\n",
      "            size_t dataLen = wcslen((wchar_t *)data);\n",
      "            void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));\n",
      "            (void)wcscpy(dest, data);\n"
    ],
    "nodes-line-sym": [
      "if ( FUN1 ( ) )",
      "wchar_t * VAR1 = ( wchar_t * ) malloc ( 50 * sizeof ( wchar_t ) ) ;",
      "VAR2 = ( void * ) VAR1 ;",
      "char * VAR3 = ( char * ) malloc ( 50 * sizeof ( char ) ) ;",
      "VAR2 = ( void * ) VAR3 ;",
      "if ( FUN1 ( ) )",
      "size_t VAR4 = wcslen ( ( wchar_t * ) VAR2 ) ;",
      "void * VAR5 = ( void * ) calloc ( VAR4 + 1 , sizeof ( wchar_t ) ) ;",
      "( void ) wcscpy ( VAR5 , VAR2 ) ;"
    ],
    "pair_id": 10106,
    "xfg_id": 12575,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "160",
      "161",
      "170",
      "171",
      "172",
      "176",
      "183",
      "184",
      "192",
      "196",
      "200",
      "201",
      "206",
      "207",
      "214",
      "216",
      "233",
      "242",
      "244",
      "246",
      "250"
    ],
    "keyLine": "246",
    "edges-No": [
      [
        0,
        18
      ],
      [
        0,
        19
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        2,
        3
      ],
      [
        3,
        7
      ],
      [
        4,
        14
      ],
      [
        4,
        12
      ],
      [
        5,
        7
      ],
      [
        5,
        6
      ],
      [
        6,
        8
      ],
      [
        6,
        9
      ],
      [
        6,
        10
      ],
      [
        6,
        7
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ],
      [
        9,
        10
      ],
      [
        9,
        11
      ],
      [
        10,
        11
      ],
      [
        10,
        12
      ],
      [
        11,
        12
      ],
      [
        11,
        13
      ],
      [
        12,
        13
      ],
      [
        13,
        15
      ],
      [
        13,
        14
      ],
      [
        14,
        18
      ],
      [
        14,
        19
      ],
      [
        15,
        5
      ],
      [
        16,
        17
      ],
      [
        16,
        18
      ],
      [
        17,
        20
      ],
      [
        17,
        19
      ],
      [
        18,
        19
      ],
      [
        19,
        20
      ]
    ],
    "target": 0,
    "filePath": "119-7400-c/testcases/000/073/697/CWE124_Buffer_Underwrite__CWE839_listen_socket_04.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(STATIC_CONST_TRUE)\n",
      "            SOCKET listenSocket = INVALID_SOCKET;\n",
      "            SOCKET acceptSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (listenSocket == INVALID_SOCKET)\n",
      "                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "                acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "                if (acceptSocket == SOCKET_ERROR)\n",
      "                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "    if(STATIC_CONST_FALSE)\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( VAR2 )",
      "SOCKET VAR3 = VAR4 ;",
      "SOCKET VAR5 = VAR4 ;",
      "char VAR6 [ VAR7 ] ;",
      "if ( FUN1 ( FUN2 ( 2 , 2 ) , & VAR8 ) != VAR9 )",
      "VAR3 = socket ( VAR10 , VAR11 , VAR12 ) ;",
      "if ( VAR3 == VAR4 )",
      "if ( bind ( VAR3 , ( struct VAR13 * ) & VAR14 , sizeof ( VAR14 ) ) == VAR15 )",
      "if ( FUN3 ( VAR3 , VAR16 ) == VAR15 )",
      "VAR5 = accept ( VAR3 , NULL , NULL ) ;",
      "if ( VAR5 == VAR15 )",
      "VAR17 = recv ( VAR5 , VAR6 , VAR7 - 1 , 0 ) ;",
      "if ( VAR17 == VAR15 || VAR17 == 0 )",
      "VAR1 = atoi ( VAR6 ) ;",
      "while ( 0 ) ;",
      "if ( VAR18 )",
      "int VAR19 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR19 [ VAR1 ] = 1 ;",
      "FUN4 ( VAR19 [ VAR20 ] ) ;"
    ],
    "pair_id": 1422,
    "xfg_id": 6440,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "27",
      "32",
      "33",
      "37",
      "39",
      "41"
    ],
    "keyLine": "37",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        6
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        5,
        5
      ],
      [
        6,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-9900-c/testcases/000/065/820/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_31.c",
    "nodes-line": [
      "    char dataBuffer[100];\n",
      "    data = dataBuffer;\n",
      "        char * dataCopy = data;\n",
      "        char * data = dataCopy;\n",
      "            dataLen = strlen(data);\n",
      "            for (i = 0; i < dataLen; i++)\n",
      "                dest[i] = data[i];\n"
    ],
    "nodes-line-sym": [
      "char VAR1 [ 100 ] ;",
      "VAR2 = VAR1 ;",
      "char * VAR3 = VAR2 ;",
      "char * VAR2 = VAR3 ;",
      "VAR4 = strlen ( VAR2 ) ;",
      "for ( VAR5 = 0 ; VAR5 < VAR4 ; VAR5 ++ )",
      "VAR6 [ VAR5 ] = VAR2 [ VAR5 ] ;"
    ],
    "pair_id": 8137,
    "xfg_id": 4395,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "56",
      "58",
      "59",
      "62",
      "63",
      "64",
      "65"
    ],
    "keyLine": "62",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        5
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ]
    ],
    "target": 0,
    "filePath": "119-3300-c/testcases/000/231/422/CWE121_Stack_Based_Buffer_Overflow__CWE135_31.c",
    "nodes-line": [
      "    data = (void *)CHAR_STRING;\n",
      "        void * dataCopy = data;\n",
      "        void * data = dataCopy;\n",
      "            size_t dataLen = strlen((char *)data);\n",
      "            void * dest = (void *)ALLOCA((dataLen+1) * 1);\n",
      "            (void)strcpy(dest, data);\n",
      "            printLine((char *)dest);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( void * ) VAR2 ;",
      "void * VAR3 = VAR1 ;",
      "void * VAR1 = VAR3 ;",
      "size_t VAR4 = strlen ( ( char * ) VAR1 ) ;",
      "void * VAR5 = ( void * ) FUN1 ( ( VAR4 + 1 ) * 1 ) ;",
      "( void ) strcpy ( VAR5 , VAR1 ) ;",
      "FUN2 ( ( char * ) VAR5 ) ;"
    ],
    "pair_id": 1909,
    "xfg_id": 12588,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "31",
      "32",
      "41",
      "42"
    ],
    "keyLine": "31",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-1000-c/testcases/000/234/185/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c",
    "nodes-line": [
      "    switch(6)\n",
      "        data = (int64_t *)malloc(sizeof(data));\n",
      "        if (data == NULL) {exit(-1);}\n",
      "    printLongLongLine(*data);\n",
      "    free(data);\n"
    ],
    "nodes-line-sym": [
      "switch ( 6 )",
      "VAR1 = ( VAR2 * ) malloc ( sizeof ( VAR1 ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "FUN2 ( * VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 10376,
    "xfg_id": 10545,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "248",
      "249",
      "258",
      "259",
      "263",
      "270",
      "271",
      "279",
      "285",
      "286",
      "293",
      "295",
      "308",
      "312",
      "319",
      "321",
      "325"
    ],
    "keyLine": "321",
    "edges-No": [
      [
        0,
        15
      ],
      [
        0,
        14
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        6
      ],
      [
        3,
        10
      ],
      [
        3,
        8
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        5,
        7
      ],
      [
        5,
        8
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ],
      [
        7,
        8
      ],
      [
        7,
        9
      ],
      [
        8,
        9
      ],
      [
        9,
        10
      ],
      [
        9,
        11
      ],
      [
        10,
        15
      ],
      [
        10,
        14
      ],
      [
        11,
        4
      ],
      [
        12,
        13
      ],
      [
        12,
        14
      ],
      [
        13,
        15
      ],
      [
        13,
        16
      ],
      [
        14,
        15
      ],
      [
        15,
        16
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/067/530/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_11.cpp",
    "nodes-line": [
      "    data = -1;\n",
      "    if(globalReturnsTrue())\n",
      "            SOCKET connectSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (connectSocket == INVALID_SOCKET)\n",
      "                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "    if(globalReturnsTrue())\n",
      "            int * buffer = new int[10];\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( FUN1 ( ) )",
      "SOCKET VAR2 = VAR3 ;",
      "char VAR4 [ VAR5 ] ;",
      "if ( FUN2 ( FUN3 ( 2 , 2 ) , & VAR6 ) != VAR7 )",
      "VAR2 = socket ( VAR8 , VAR9 , VAR10 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( connect ( VAR2 , ( struct VAR11 * ) & VAR12 , sizeof ( VAR12 ) ) == VAR13 )",
      "VAR14 = recv ( VAR2 , VAR4 , VAR5 - 1 , 0 ) ;",
      "if ( VAR14 == VAR13 || VAR14 == 0 )",
      "VAR1 = atoi ( VAR4 ) ;",
      "while ( 0 ) ;",
      "if ( FUN1 ( ) )",
      "int * VAR15 = new int [ 10 ] ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR15 [ VAR1 ] = 1 ;",
      "FUN4 ( VAR15 [ VAR16 ] ) ;"
    ],
    "pair_id": 10512,
    "xfg_id": 12606,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "37",
      "40",
      "44"
    ],
    "keyLine": "44",
    "edges-No": [
      [
        0,
        2
      ],
      [
        1,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/233/975/CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_43.cpp",
    "nodes-line": [
      "    data = NULL;\n",
      "        wchar_t source[100];\n",
      "        wcscpy(data, source);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "wchar_t VAR2 [ 100 ] ;",
      "wcscpy ( VAR1 , VAR2 ) ;"
    ],
    "pair_id": 6638,
    "xfg_id": 10559,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "39",
      "42",
      "43",
      "48",
      "49",
      "50"
    ],
    "keyLine": "42",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        2
      ],
      [
        2,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-2800-c/testcases/000/232/019/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_08.c",
    "nodes-line": [
      "    if(staticReturnsTrue())\n",
      "        data = (int *)malloc(10);\n",
      "        if (data == NULL) {exit(-1);}\n",
      "        memcpy(data, source, 10*sizeof(int));\n",
      "        printIntLine(data[0]);\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "if ( FUN1 ( ) )",
      "VAR1 = ( int * ) malloc ( 10 ) ;",
      "if ( VAR1 == NULL ) { FUN2 ( - 1 ) ; }",
      "memcpy ( VAR1 , VAR2 , 10 * sizeof ( int ) ) ;",
      "FUN3 ( VAR1 [ 0 ] ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 598,
    "xfg_id": 4426,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "31",
      "32",
      "35",
      "37",
      "41",
      "42",
      "43",
      "44"
    ],
    "keyLine": "41",
    "edges-No": [
      [
        0,
        4
      ],
      [
        0,
        6
      ],
      [
        1,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        2,
        6
      ],
      [
        3,
        3
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ]
    ],
    "target": 1,
    "filePath": "119-3300-c/testcases/000/231/418/CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    for(i = 0; i < 1; i++)\n",
      "        data = (void *)WIDE_STRING;\n",
      "    for(j = 0; j < 1; j++)\n",
      "            size_t dataLen = strlen((char *)data);\n",
      "            void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));\n",
      "            (void)wcscpy(dest, data);\n",
      "            printLine((char *)dest);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "for ( VAR2 = 0 ; VAR2 < 1 ; VAR2 ++ )",
      "VAR1 = ( void * ) VAR3 ;",
      "for ( VAR4 = 0 ; VAR4 < 1 ; VAR4 ++ )",
      "size_t VAR5 = strlen ( ( char * ) VAR1 ) ;",
      "void * VAR6 = ( void * ) FUN1 ( ( VAR5 + 1 ) * sizeof ( wchar_t ) ) ;",
      "( void ) wcscpy ( VAR6 , VAR1 ) ;",
      "FUN2 ( ( char * ) VAR6 ) ;"
    ],
    "pair_id": 1177,
    "xfg_id": 4427,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "35",
      "38",
      "39",
      "40",
      "42",
      "44",
      "46",
      "47",
      "48"
    ],
    "keyLine": "38",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        0,
        7
      ],
      [
        0,
        8
      ],
      [
        1,
        8
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        6
      ],
      [
        1,
        7
      ],
      [
        2,
        2
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ]
    ],
    "target": 1,
    "filePath": "119-1000-c/testcases/000/234/248/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_12.c",
    "nodes-line": [
      "    if(globalReturnsTrueOrFalse())\n",
      "            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));\n",
      "            if (structCharVoid == NULL) {exit(-1);}\n",
      "            structCharVoid->voidSecond = (void *)SRC_STR;\n",
      "            printWLine((wchar_t *)structCharVoid->voidSecond);\n",
      "            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));\n",
      "            printWLine((wchar_t *)structCharVoid->charFirst);\n",
      "            printWLine((wchar_t *)structCharVoid->voidSecond);\n",
      "            free(structCharVoid);\n"
    ],
    "nodes-line-sym": [
      "if ( FUN1 ( ) )",
      "VAR1 * VAR2 = ( VAR1 * ) malloc ( sizeof ( VAR1 ) ) ;",
      "if ( VAR2 == NULL ) { FUN2 ( - 1 ) ; }",
      "VAR2 -> VAR3 = ( void * ) VAR4 ;",
      "FUN3 ( ( wchar_t * ) VAR2 -> VAR3 ) ;",
      "memcpy ( VAR2 -> VAR5 , VAR4 , sizeof ( * VAR2 ) ) ;",
      "FUN3 ( ( wchar_t * ) VAR2 -> VAR5 ) ;",
      "FUN3 ( ( wchar_t * ) VAR2 -> VAR3 ) ;",
      "free ( VAR2 ) ;"
    ],
    "pair_id": 2693,
    "xfg_id": 6481,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "27",
      "30",
      "31",
      "35",
      "43"
    ],
    "keyLine": "30",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        2
      ],
      [
        2,
        2
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-300-c/testcases/000/235/073/CWE127_Buffer_Underread__malloc_wchar_t_memmove_09.c",
    "nodes-line": [
      "    if(GLOBAL_CONST_TRUE)\n",
      "            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));\n",
      "            if (dataBuffer == NULL) {exit(-1);}\n",
      "            data = dataBuffer - 8;\n",
      "        memmove(dest, data, 100*sizeof(wchar_t));\n"
    ],
    "nodes-line-sym": [
      "if ( VAR1 )",
      "wchar_t * VAR2 = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ;",
      "if ( VAR2 == NULL ) { FUN1 ( - 1 ) ; }",
      "VAR3 = VAR2 - 8 ;",
      "memmove ( VAR4 , VAR3 , 100 * sizeof ( wchar_t ) ) ;"
    ],
    "pair_id": 939,
    "xfg_id": 6496,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "23",
      "27",
      "31",
      "33"
    ],
    "keyLine": "33",
    "edges-No": [
      [
        0,
        3
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ],
      [
        2,
        2
      ],
      [
        3,
        3
      ]
    ],
    "target": 1,
    "filePath": "119-5300-c/testcases/000/077/304/CWE127_Buffer_Underread__char_alloca_loop_41.c",
    "nodes-line": [
      "void CWE127_Buffer_Underread__char_alloca_loop_41_badSink(char * data)\n",
      "        char dest[100];\n",
      "        for (i = 0; i < 100; i++)\n",
      "            dest[i] = data[i];\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( char * VAR1 )",
      "char VAR2 [ 100 ] ;",
      "for ( VAR3 = 0 ; VAR3 < 100 ; VAR3 ++ )",
      "VAR2 [ VAR3 ] = VAR1 [ VAR3 ] ;"
    ],
    "pair_id": 3478,
    "xfg_id": 10592,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "95",
      "97",
      "100",
      "107",
      "109",
      "113"
    ],
    "keyLine": "109",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        5
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/067/611/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_fgets_74b.cpp",
    "nodes-line": [
      "void goodB2GSink(map<int, int> dataMap)\n",
      "    int data = dataMap[2];\n",
      "        int * buffer = new int[10];\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( VAR1 < int , int > VAR2 )",
      "int VAR3 = VAR2 [ 2 ] ;",
      "int * VAR4 = new int [ 10 ] ;",
      "if ( VAR3 >= 0 && VAR3 < ( 10 ) )",
      "VAR4 [ VAR3 ] = 1 ;",
      "FUN2 ( VAR4 [ VAR5 ] ) ;"
    ],
    "pair_id": 2580,
    "xfg_id": 10597,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "28",
      "32",
      "34",
      "36"
    ],
    "keyLine": "34",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        1,
        3
      ],
      [
        2,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        3
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-2000-c/testcases/000/232/973/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c",
    "nodes-line": [
      "    int64_t * data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45_badData;\n",
      "        int64_t source[100] = {0}; /* fill with 0's */\n",
      "            for (i = 0; i < 100; i++)\n",
      "                data[i] = source[i];\n",
      "            printLongLongLine(data[0]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 * VAR2 = VAR3 ;",
      "int64_t VAR4 [ 100 ] = { 0 } ;",
      "for ( VAR5 = 0 ; VAR5 < 100 ; VAR5 ++ )",
      "VAR2 [ VAR5 ] = VAR4 [ VAR5 ] ;",
      "FUN1 ( VAR2 [ 0 ] ) ;"
    ],
    "pair_id": 2247,
    "xfg_id": 8560,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "34",
      "38",
      "39",
      "41",
      "44",
      "46",
      "48",
      "52",
      "54",
      "56",
      "58"
    ],
    "keyLine": "58",
    "edges-No": [
      [
        0,
        2
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        8
      ],
      [
        4,
        6
      ],
      [
        4,
        10
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        5,
        5
      ],
      [
        6,
        10
      ],
      [
        7,
        9
      ],
      [
        7,
        8
      ],
      [
        8,
        10
      ],
      [
        9,
        9
      ],
      [
        9,
        10
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/067/783/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_34.cpp",
    "nodes-line": [
      "    unionType myUnion;\n",
      "    data = RAND32();\n",
      "    myUnion.unionFirst = data;\n",
      "        int data = myUnion.unionSecond;\n",
      "            int * buffer = new int[10];\n",
      "            for (i = 0; i < 10; i++)\n",
      "                buffer[i] = 0;\n",
      "            if (data >= 0)\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "unionType VAR1 ;",
      "VAR2 = FUN1 ( ) ;",
      "VAR1 . VAR3 = VAR2 ;",
      "int VAR2 = VAR1 . VAR4 ;",
      "int * VAR5 = new int [ 10 ] ;",
      "for ( VAR6 = 0 ; VAR6 < 10 ; VAR6 ++ )",
      "VAR5 [ VAR6 ] = 0 ;",
      "if ( VAR2 >= 0 )",
      "VAR5 [ VAR2 ] = 1 ;",
      "for ( VAR6 = 0 ; VAR6 < 10 ; VAR6 ++ )",
      "FUN2 ( VAR5 [ VAR6 ] ) ;"
    ],
    "pair_id": 11999,
    "xfg_id": 8562,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "98",
      "99",
      "103",
      "105",
      "108",
      "121",
      "130",
      "137",
      "139",
      "143"
    ],
    "keyLine": "139",
    "edges-No": [
      [
        0,
        7
      ],
      [
        0,
        8
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ],
      [
        4,
        7
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        8
      ],
      [
        6,
        9
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/067/582/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_fgets_15.cpp",
    "nodes-line": [
      "    data = -1;\n",
      "    switch(6)\n",
      "        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n",
      "        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n",
      "            data = atoi(inputBuffer);\n",
      "    switch(8)\n",
      "        int * buffer = new int[10];\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "switch ( 6 )",
      "char VAR2 [ VAR3 ] = \"\" ;",
      "if ( fgets ( VAR2 , VAR3 , stdin ) != NULL )",
      "VAR1 = atoi ( VAR2 ) ;",
      "switch ( 8 )",
      "int * VAR4 = new int [ 10 ] ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR4 [ VAR1 ] = 1 ;",
      "FUN1 ( VAR4 [ VAR5 ] ) ;"
    ],
    "pair_id": 4311,
    "xfg_id": 6535,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "69",
      "71",
      "73",
      "75",
      "77"
    ],
    "keyLine": "77",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ]
    ],
    "target": 0,
    "filePath": "119-5000-c/testcases/000/077/681/CWE127_Buffer_Underread__CWE839_negative_67b.c",
    "nodes-line": [
      "void CWE127_Buffer_Underread__CWE839_negative_67b_goodB2GSink(CWE127_Buffer_Underread__CWE839_negative_67_structType myStruct)\n",
      "    int data = myStruct.structFirst;\n",
      "        int buffer[10] = { 0 };\n",
      "        if (data >= 0 && data < (10))\n",
      "            printIntLine(buffer[data]);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( CWE127_Buffer_Underread__CWE839_negative_67_structType VAR1 )",
      "int VAR2 = VAR1 . VAR3 ;",
      "int VAR4 [ 10 ] = { 0 } ;",
      "if ( VAR2 >= 0 && VAR2 < ( 10 ) )",
      "FUN2 ( VAR4 [ VAR2 ] ) ;"
    ],
    "pair_id": 8933,
    "xfg_id": 12680,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "36",
      "37",
      "38",
      "42",
      "44",
      "45"
    ],
    "keyLine": "36",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        1,
        1
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/233/606/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_43.cpp",
    "nodes-line": [
      "    data = (char *)malloc(100*sizeof(char));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "    badSource(data);\n",
      "        strncpy(dest, data, strlen(data));\n",
      "        printLine(data);\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "FUN2 ( VAR1 ) ;",
      "strncpy ( VAR2 , VAR1 , strlen ( VAR1 ) ) ;",
      "FUN3 ( VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 2452,
    "xfg_id": 4489,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "38",
      "42",
      "45",
      "47"
    ],
    "keyLine": "47",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-5400-c/testcases/000/077/160/CWE127_Buffer_Underread__CWE839_fscanf_15.c",
    "nodes-line": [
      "    data = -1;\n",
      "    switch(7)\n",
      "        int buffer[10] = { 0 };\n",
      "        if (data < 10)\n",
      "            printIntLine(buffer[data]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "switch ( 7 )",
      "int VAR2 [ 10 ] = { 0 } ;",
      "if ( VAR1 < 10 )",
      "FUN1 ( VAR2 [ VAR1 ] ) ;"
    ],
    "pair_id": 8456,
    "xfg_id": 12685,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "39",
      "40",
      "43",
      "47",
      "49"
    ],
    "keyLine": "49",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        4
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        3
      ],
      [
        4,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-300-c/testcases/000/235/024/CWE127_Buffer_Underread__malloc_wchar_t_loop_42.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    data = badSource(data);\n",
      "        wchar_t dest[100];\n",
      "        for (i = 0; i < 100; i++)\n",
      "            dest[i] = data[i];\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "VAR1 = FUN1 ( VAR1 ) ;",
      "wchar_t VAR2 [ 100 ] ;",
      "for ( VAR3 = 0 ; VAR3 < 100 ; VAR3 ++ )",
      "VAR2 [ VAR3 ] = VAR1 [ VAR3 ] ;"
    ],
    "pair_id": 8037,
    "xfg_id": 10652,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "58",
      "59",
      "63",
      "64",
      "69",
      "70",
      "75",
      "77"
    ],
    "keyLine": "58",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        6
      ],
      [
        1,
        7
      ],
      [
        1,
        2
      ]
    ],
    "target": 0,
    "filePath": "119-10100-c/testcases/000/065/571/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_12.c",
    "nodes-line": [
      "    char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    data = dataBuffer;\n",
      "        memset(data, 'A', 50-1); /* fill with 'A's */\n",
      "        data[50-1] = '\\0'; /* null terminate */\n",
      "        memset(data, 'A', 50-1); /* fill with 'A's */\n",
      "        data[50-1] = '\\0'; /* null terminate */\n",
      "        memcpy(dest, data, strlen(data)*sizeof(char));\n",
      "        printLine(data);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "VAR2 = VAR1 ;",
      "memset ( VAR2 , '' , 50 - 1 ) ;",
      "VAR2 [ 50 - 1 ] = '' ;",
      "memset ( VAR2 , '' , 50 - 1 ) ;",
      "VAR2 [ 50 - 1 ] = '' ;",
      "memcpy ( VAR3 , VAR2 , strlen ( VAR2 ) * sizeof ( char ) ) ;",
      "FUN2 ( VAR2 ) ;"
    ],
    "pair_id": 3110,
    "xfg_id": 4510,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "154",
      "155",
      "164",
      "165",
      "166",
      "170",
      "177",
      "178",
      "186",
      "190",
      "194",
      "195",
      "200",
      "201",
      "208",
      "210",
      "227",
      "236",
      "238",
      "240",
      "242",
      "244"
    ],
    "keyLine": "244",
    "edges-No": [
      [
        0,
        19
      ],
      [
        0,
        18
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        2,
        3
      ],
      [
        3,
        7
      ],
      [
        4,
        12
      ],
      [
        4,
        14
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        10
      ],
      [
        6,
        7
      ],
      [
        6,
        8
      ],
      [
        6,
        9
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ],
      [
        9,
        10
      ],
      [
        9,
        11
      ],
      [
        10,
        12
      ],
      [
        10,
        11
      ],
      [
        11,
        12
      ],
      [
        11,
        13
      ],
      [
        12,
        13
      ],
      [
        13,
        14
      ],
      [
        13,
        15
      ],
      [
        14,
        19
      ],
      [
        14,
        18
      ],
      [
        15,
        5
      ],
      [
        16,
        17
      ],
      [
        16,
        18
      ],
      [
        17,
        19
      ],
      [
        17,
        21
      ],
      [
        18,
        19
      ],
      [
        18,
        20
      ],
      [
        19,
        21
      ],
      [
        20,
        20
      ],
      [
        20,
        21
      ]
    ],
    "target": 0,
    "filePath": "119-7400-c/testcases/000/073/704/CWE124_Buffer_Underwrite__CWE839_listen_socket_11.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(globalReturnsTrue())\n",
      "            SOCKET listenSocket = INVALID_SOCKET;\n",
      "            SOCKET acceptSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (listenSocket == INVALID_SOCKET)\n",
      "                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "                acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "                if (acceptSocket == SOCKET_ERROR)\n",
      "                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "    if(globalReturnsFalse())\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( FUN1 ( ) )",
      "SOCKET VAR2 = VAR3 ;",
      "SOCKET VAR4 = VAR3 ;",
      "char VAR5 [ VAR6 ] ;",
      "if ( FUN2 ( FUN3 ( 2 , 2 ) , & VAR7 ) != VAR8 )",
      "VAR2 = socket ( VAR9 , VAR10 , VAR11 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( bind ( VAR2 , ( struct VAR12 * ) & VAR13 , sizeof ( VAR13 ) ) == VAR14 )",
      "if ( FUN4 ( VAR2 , VAR15 ) == VAR14 )",
      "VAR4 = accept ( VAR2 , NULL , NULL ) ;",
      "if ( VAR4 == VAR14 )",
      "VAR16 = recv ( VAR4 , VAR5 , VAR6 - 1 , 0 ) ;",
      "if ( VAR16 == VAR14 || VAR16 == 0 )",
      "VAR1 = atoi ( VAR5 ) ;",
      "while ( 0 ) ;",
      "if ( FUN5 ( ) )",
      "int VAR17 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR17 [ VAR1 ] = 1 ;",
      "for ( VAR18 = 0 ; VAR18 < 10 ; VAR18 ++ )",
      "FUN6 ( VAR17 [ VAR18 ] ) ;"
    ],
    "pair_id": 8366,
    "xfg_id": 12704,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "90",
      "92",
      "95",
      "103",
      "105",
      "109"
    ],
    "keyLine": "105",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        4
      ],
      [
        1,
        3
      ],
      [
        2,
        4
      ],
      [
        2,
        5
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ]
    ],
    "target": 0,
    "filePath": "119-2600-c/testcases/000/232/324/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_63b.c",
    "nodes-line": [
      "void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_63b_goodB2GSink(int * dataPtr)\n",
      "    int data = *dataPtr;\n",
      "        int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( int * VAR1 )",
      "int VAR2 = * VAR1 ;",
      "int * VAR3 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "if ( VAR2 >= 0 && VAR2 < ( 10 ) )",
      "VAR3 [ VAR2 ] = 1 ;",
      "FUN2 ( VAR3 [ VAR4 ] ) ;"
    ],
    "pair_id": 5288,
    "xfg_id": 8611,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "83",
      "85",
      "88",
      "90",
      "92",
      "96"
    ],
    "keyLine": "92",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        5
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/073/735/CWE124_Buffer_Underwrite__CWE839_listen_socket_72b.cpp",
    "nodes-line": [
      "void goodB2GSink(vector<int> dataVector)\n",
      "    int data = dataVector[2];\n",
      "        int buffer[10] = { 0 };\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( VAR1 < int > VAR2 )",
      "int VAR3 = VAR2 [ 2 ] ;",
      "int VAR4 [ 10 ] = { 0 } ;",
      "if ( VAR3 >= 0 && VAR3 < ( 10 ) )",
      "VAR4 [ VAR3 ] = 1 ;",
      "FUN2 ( VAR4 [ VAR5 ] ) ;"
    ],
    "pair_id": 566,
    "xfg_id": 12707,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "53",
      "57"
    ],
    "keyLine": "57",
    "edges-No": [
      [
        0,
        1
      ]
    ],
    "target": 0,
    "filePath": "119-13000-c/testcases/000/000/846/basic-00183-ok.c",
    "nodes-line": [
      "  char buf[10];\n",
      "  getcwd(buf, 10);\n"
    ],
    "nodes-line-sym": [
      "char VAR1 [ 10 ] ;",
      "getcwd ( VAR1 , 10 ) ;"
    ],
    "pair_id": 91,
    "xfg_id": 8615,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "27",
      "28",
      "33",
      "47"
    ],
    "keyLine": "33",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-9900-c/testcases/000/065/814/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_15.c",
    "nodes-line": [
      "    char dataBuffer[100];\n",
      "    data = dataBuffer;\n",
      "    switch(6)\n",
      "        data[100-1] = '\\0'; /* null terminate */\n",
      "            dest[i] = data[i];\n"
    ],
    "nodes-line-sym": [
      "char VAR1 [ 100 ] ;",
      "VAR2 = VAR1 ;",
      "switch ( 6 )",
      "VAR2 [ 100 - 1 ] = '' ;",
      "VAR3 [ VAR4 ] = VAR2 [ VAR4 ] ;"
    ],
    "pair_id": 3816,
    "xfg_id": 8625,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "142",
      "143",
      "146",
      "148",
      "151",
      "159",
      "163",
      "171",
      "173",
      "177"
    ],
    "keyLine": "173",
    "edges-No": [
      [
        0,
        7
      ],
      [
        0,
        8
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ],
      [
        4,
        7
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        9
      ],
      [
        6,
        8
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ]
    ],
    "target": 0,
    "filePath": "119-2700-c/testcases/000/232/216/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(globalTrue)\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n",
      "            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n",
      "                data = atoi(inputBuffer);\n",
      "    if(globalTrue)\n",
      "            int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( VAR2 )",
      "char VAR3 [ VAR4 ] = \"\" ;",
      "if ( fgets ( VAR3 , VAR4 , stdin ) != NULL )",
      "VAR1 = atoi ( VAR3 ) ;",
      "if ( VAR2 )",
      "int * VAR5 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR5 [ VAR1 ] = 1 ;",
      "FUN1 ( VAR5 [ VAR6 ] ) ;"
    ],
    "pair_id": 6809,
    "xfg_id": 6579,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "29",
      "32",
      "34",
      "37",
      "52",
      "54",
      "58"
    ],
    "keyLine": "37",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        6
      ],
      [
        4,
        5
      ]
    ],
    "target": 1,
    "filePath": "119-6400-c/testcases/000/075/661/CWE126_Buffer_Overread__CWE129_fgets_16.c",
    "nodes-line": [
      "    while(1)\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n",
      "            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n",
      "                data = atoi(inputBuffer);\n",
      "            if (data >= 0)\n",
      "                printIntLine(buffer[data]);\n",
      "                printLine(\"ERROR: Array index is negative\");\n"
    ],
    "nodes-line-sym": [
      "while ( 1 )",
      "char VAR1 [ VAR2 ] = \"\" ;",
      "if ( fgets ( VAR1 , VAR2 , stdin ) != NULL )",
      "VAR3 = atoi ( VAR1 ) ;",
      "if ( VAR3 >= 0 )",
      "FUN1 ( VAR4 [ VAR3 ] ) ;",
      "FUN2 ( \"\" ) ;"
    ],
    "pair_id": 6447,
    "xfg_id": 12727,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "36",
      "37",
      "39",
      "40",
      "42",
      "44"
    ],
    "keyLine": "36",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        1
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ]
    ],
    "target": 1,
    "filePath": "119-200-c/testcases/000/240/157/CWE415_Double_Free__malloc_free_int_34.c",
    "nodes-line": [
      "    data = (int *)malloc(100*sizeof(int));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "    free(data);\n",
      "    myUnion.unionFirst = data;\n",
      "        int * data = myUnion.unionSecond;\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( int * ) malloc ( 100 * sizeof ( int ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "free ( VAR1 ) ;",
      "VAR2 . VAR3 = VAR1 ;",
      "int * VAR1 = VAR2 . VAR4 ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 13466,
    "xfg_id": 8670,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "32",
      "35",
      "36",
      "43",
      "44",
      "45"
    ],
    "keyLine": "35",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        2
      ],
      [
        1,
        5
      ],
      [
        1,
        4
      ],
      [
        2,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-2400-c/testcases/000/232/564/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_16.c",
    "nodes-line": [
      "    while(1)\n",
      "        data = (char *)malloc(10*sizeof(char));\n",
      "        if (data == NULL) {exit(-1);}\n",
      "        strncpy(data, source, strlen(source) + 1);\n",
      "        printLine(data);\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "while ( 1 )",
      "VAR1 = ( char * ) malloc ( 10 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "strncpy ( VAR1 , VAR2 , strlen ( VAR2 ) + 1 ) ;",
      "FUN2 ( VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 2810,
    "xfg_id": 8679,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "90",
      "94",
      "95",
      "97"
    ],
    "keyLine": "97",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ]
    ],
    "target": 0,
    "filePath": "119-2700-c/testcases/000/232/146/CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c",
    "nodes-line": [
      "static void goodB2GSink(void * data)\n",
      "        size_t dataLen = wcslen((wchar_t *)data);\n",
      "        void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));\n",
      "        (void)wcscpy(dest, data);\n"
    ],
    "nodes-line-sym": [
      "static void FUN1 ( void * VAR1 )",
      "size_t VAR2 = wcslen ( ( wchar_t * ) VAR1 ) ;",
      "void * VAR3 = ( void * ) calloc ( VAR2 + 1 , sizeof ( wchar_t ) ) ;",
      "( void ) wcscpy ( VAR3 , VAR1 ) ;"
    ],
    "pair_id": 2074,
    "xfg_id": 12777,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "60",
      "61",
      "63",
      "64",
      "65",
      "67",
      "71",
      "73"
    ],
    "keyLine": "60",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        2
      ],
      [
        4,
        5
      ],
      [
        5,
        7
      ],
      [
        5,
        6
      ]
    ],
    "target": 0,
    "filePath": "119-10000-c/testcases/000/065/727/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_34.c",
    "nodes-line": [
      "    char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    data = dataBuffer;\n",
      "    memset(data, 'A', 50-1); /* fill with 'A's */\n",
      "    data[50-1] = '\\0'; /* null terminate */\n",
      "    myUnion.unionFirst = data;\n",
      "        char * data = myUnion.unionSecond;\n",
      "            strncpy(dest, data, strlen(data));\n",
      "            printLine(data);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "VAR2 = VAR1 ;",
      "memset ( VAR2 , '' , 50 - 1 ) ;",
      "VAR2 [ 50 - 1 ] = '' ;",
      "VAR3 . VAR4 = VAR2 ;",
      "char * VAR2 = VAR3 . VAR5 ;",
      "strncpy ( VAR6 , VAR2 , strlen ( VAR2 ) ) ;",
      "FUN2 ( VAR2 ) ;"
    ],
    "pair_id": 9557,
    "xfg_id": 10729,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "147",
      "148",
      "152",
      "154",
      "157",
      "170",
      "175",
      "177",
      "179",
      "183"
    ],
    "keyLine": "179",
    "edges-No": [
      [
        0,
        7
      ],
      [
        0,
        8
      ],
      [
        1,
        3
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ],
      [
        4,
        7
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        8
      ],
      [
        6,
        9
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ]
    ],
    "target": 0,
    "filePath": "119-12400-c/testcases/000/062/578/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15.c",
    "nodes-line": [
      "    data = -1;\n",
      "    switch(6)\n",
      "        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n",
      "        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n",
      "            data = atoi(inputBuffer);\n",
      "    switch(7)\n",
      "        int buffer[10] = { 0 };\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "switch ( 6 )",
      "char VAR2 [ VAR3 ] = \"\" ;",
      "if ( fgets ( VAR2 , VAR3 , stdin ) != NULL )",
      "VAR1 = atoi ( VAR2 ) ;",
      "switch ( 7 )",
      "int VAR4 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR4 [ VAR1 ] = 1 ;",
      "FUN1 ( VAR4 [ VAR5 ] ) ;"
    ],
    "pair_id": 1723,
    "xfg_id": 10733,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "74",
      "77",
      "82",
      "84",
      "98",
      "99",
      "100",
      "101"
    ],
    "keyLine": "98",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        1
      ],
      [
        1,
        6
      ],
      [
        1,
        4
      ],
      [
        2,
        6
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-3300-c/testcases/000/231/413/CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c",
    "nodes-line": [
      "    if(globalReturnsTrueOrFalse())\n",
      "        data = (void *)WIDE_STRING;\n",
      "        data = (void *)WIDE_STRING;\n",
      "    if(globalReturnsTrueOrFalse())\n",
      "            size_t dataLen = wcslen((wchar_t *)data);\n",
      "            void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));\n",
      "            (void)wcscpy(dest, data);\n",
      "            printWLine((wchar_t *)dest);\n"
    ],
    "nodes-line-sym": [
      "if ( FUN1 ( ) )",
      "VAR1 = ( void * ) VAR2 ;",
      "VAR1 = ( void * ) VAR2 ;",
      "if ( FUN1 ( ) )",
      "size_t VAR3 = wcslen ( ( wchar_t * ) VAR1 ) ;",
      "void * VAR4 = ( void * ) FUN2 ( ( VAR3 + 1 ) * sizeof ( wchar_t ) ) ;",
      "( void ) wcscpy ( VAR4 , VAR1 ) ;",
      "FUN3 ( ( wchar_t * ) VAR4 ) ;"
    ],
    "pair_id": 7155,
    "xfg_id": 8686,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "53",
      "56",
      "57",
      "60",
      "61"
    ],
    "keyLine": "60",
    "edges-No": [
      [
        0,
        3
      ],
      [
        1,
        2
      ],
      [
        1,
        4
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        4,
        2
      ],
      [
        4,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-13400-c/testcases/000/000/453/basic-00085-min.c",
    "nodes-line": [
      "  char buf[10];\n",
      "  loop_counter = 0;\n",
      "  while(++loop_counter)\n",
      "    buf[10] = 'A';\n",
      "    if (loop_counter >= 10) break;\n"
    ],
    "nodes-line-sym": [
      "char VAR1 [ 10 ] ;",
      "VAR2 = 0 ;",
      "while ( ++ VAR2 )",
      "VAR1 [ 10 ] = '' ;",
      "if ( VAR2 >= 10 ) break ;"
    ],
    "pair_id": 6814,
    "xfg_id": 4591,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "64",
      "66",
      "67",
      "68",
      "70",
      "76",
      "77",
      "78"
    ],
    "keyLine": "64",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        4,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-11200-c/testcases/000/064/013/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_34.c",
    "nodes-line": [
      "    char * dataGoodBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    data = dataGoodBuffer;\n",
      "    data[0] = '\\0'; /* null terminate */\n",
      "    myUnion.unionFirst = data;\n",
      "        char * data = myUnion.unionSecond;\n",
      "            strncpy(data, source, 100-1);\n",
      "            data[100-1] = '\\0'; /* Ensure the destination buffer is null terminated */\n",
      "            printLine(data);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "VAR2 = VAR1 ;",
      "VAR2 [ 0 ] = '' ;",
      "VAR3 . VAR4 = VAR2 ;",
      "char * VAR2 = VAR3 . VAR5 ;",
      "strncpy ( VAR2 , VAR6 , 100 - 1 ) ;",
      "VAR2 [ 100 - 1 ] = '' ;",
      "FUN2 ( VAR2 ) ;"
    ],
    "pair_id": 4280,
    "xfg_id": 12788,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "28",
      "30",
      "34"
    ],
    "keyLine": "34",
    "edges-No": [
      [
        0,
        2
      ],
      [
        1,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-2100-c/testcases/000/232/874/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_45.c",
    "nodes-line": [
      "    char * data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_45_badData;\n",
      "        char source[100];\n",
      "        strncat(data, source, 100);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = VAR2 ;",
      "char VAR3 [ 100 ] ;",
      "strncat ( VAR1 , VAR3 , 100 ) ;"
    ],
    "pair_id": 1082,
    "xfg_id": 4596,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "31",
      "35",
      "36",
      "38",
      "40",
      "43",
      "45"
    ],
    "keyLine": "45",
    "edges-No": [
      [
        0,
        2
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        4,
        6
      ],
      [
        5,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-6200-c/testcases/000/075/861/CWE126_Buffer_Overread__CWE129_rand_34.c",
    "nodes-line": [
      "    CWE126_Buffer_Overread__CWE129_rand_34_unionType myUnion;\n",
      "    data = RAND32();\n",
      "    myUnion.unionFirst = data;\n",
      "        int data = myUnion.unionSecond;\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0)\n",
      "                printIntLine(buffer[data]);\n"
    ],
    "nodes-line-sym": [
      "CWE126_Buffer_Overread__CWE129_rand_34_unionType VAR1 ;",
      "VAR2 = FUN1 ( ) ;",
      "VAR1 . VAR3 = VAR2 ;",
      "int VAR2 = VAR1 . VAR4 ;",
      "int VAR5 [ 10 ] = { 0 } ;",
      "if ( VAR2 >= 0 )",
      "FUN2 ( VAR5 [ VAR2 ] ) ;"
    ],
    "pair_id": 4003,
    "xfg_id": 8695,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "133",
      "143",
      "144",
      "148",
      "155",
      "156",
      "164",
      "170",
      "171",
      "178",
      "180",
      "195",
      "197",
      "199"
    ],
    "keyLine": "199",
    "edges-No": [
      [
        0,
        12
      ],
      [
        0,
        13
      ],
      [
        1,
        5
      ],
      [
        2,
        9
      ],
      [
        2,
        7
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        6
      ],
      [
        4,
        7
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ],
      [
        6,
        8
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ],
      [
        8,
        10
      ],
      [
        9,
        12
      ],
      [
        9,
        13
      ],
      [
        10,
        3
      ],
      [
        11,
        13
      ],
      [
        12,
        13
      ]
    ],
    "target": 0,
    "filePath": "119-6400-c/testcases/000/075/615/CWE126_Buffer_Overread__CWE129_connect_socket_18.c",
    "nodes-line": [
      "    data = -1;\n",
      "        SOCKET connectSocket = INVALID_SOCKET;\n",
      "        char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "            if (connectSocket == INVALID_SOCKET)\n",
      "            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data = atoi(inputBuffer);\n",
      "        while (0);\n",
      "        int buffer[10] = { 0 };\n",
      "        if (data >= 0 && data < (10))\n",
      "            printIntLine(buffer[data]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "SOCKET VAR2 = VAR3 ;",
      "char VAR4 [ VAR5 ] ;",
      "if ( FUN1 ( FUN2 ( 2 , 2 ) , & VAR6 ) != VAR7 )",
      "VAR2 = socket ( VAR8 , VAR9 , VAR10 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( connect ( VAR2 , ( struct VAR11 * ) & VAR12 , sizeof ( VAR12 ) ) == VAR13 )",
      "VAR14 = recv ( VAR2 , VAR4 , VAR5 - 1 , 0 ) ;",
      "if ( VAR14 == VAR13 || VAR14 == 0 )",
      "VAR1 = atoi ( VAR4 ) ;",
      "while ( 0 ) ;",
      "int VAR15 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "FUN3 ( VAR15 [ VAR1 ] ) ;"
    ],
    "pair_id": 7874,
    "xfg_id": 6648,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "53",
      "56",
      "57",
      "60",
      "61",
      "62"
    ],
    "keyLine": "60",
    "edges-No": [
      [
        0,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        2,
        5
      ],
      [
        4,
        4
      ],
      [
        4,
        5
      ],
      [
        5,
        2
      ],
      [
        5,
        5
      ]
    ],
    "target": 1,
    "filePath": "119-13400-c/testcases/000/000/445/basic-00083-min.c",
    "nodes-line": [
      "  char buf[10];\n",
      "  loop_counter = 0;\n",
      "  while(1)\n",
      "    buf[10] = 'A';\n",
      "    loop_counter++;\n",
      "    if (loop_counter > 10) break;\n"
    ],
    "nodes-line-sym": [
      "char VAR1 [ 10 ] ;",
      "VAR2 = 0 ;",
      "while ( 1 )",
      "VAR1 [ 10 ] = '' ;",
      "VAR2 ++ ;",
      "if ( VAR2 > 10 ) break ;"
    ],
    "pair_id": 7836,
    "xfg_id": 8710,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "63",
      "65",
      "66",
      "70",
      "74",
      "76",
      "79",
      "81"
    ],
    "keyLine": "81",
    "edges-No": [
      [
        0,
        7
      ],
      [
        1,
        3
      ],
      [
        2,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        7
      ],
      [
        4,
        7
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ],
      [
        6,
        6
      ],
      [
        7,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-11500-c/testcases/000/063/688/CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_17.c",
    "nodes-line": [
      "    wchar_t * data;\n",
      "    wchar_t dataGoodBuffer[10+1];\n",
      "    for(h = 0; h < 1; h++)\n",
      "        data = dataGoodBuffer;\n",
      "        wchar_t source[10+1] = SRC_STRING;\n",
      "        sourceLen = wcslen(source);\n",
      "        for (i = 0; i < sourceLen + 1; i++)\n",
      "            data[i] = source[i];\n"
    ],
    "nodes-line-sym": [
      "wchar_t * VAR1 ;",
      "wchar_t VAR2 [ 10 + 1 ] ;",
      "for ( VAR3 = 0 ; VAR3 < 1 ; VAR3 ++ )",
      "VAR1 = VAR2 ;",
      "wchar_t VAR4 [ 10 + 1 ] = VAR5 ;",
      "VAR6 = wcslen ( VAR4 ) ;",
      "for ( VAR7 = 0 ; VAR7 < VAR6 + 1 ; VAR7 ++ )",
      "VAR1 [ VAR7 ] = VAR4 [ VAR7 ] ;"
    ],
    "pair_id": 12967,
    "xfg_id": 10765,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "91",
      "92",
      "93",
      "94",
      "96",
      "102",
      "103",
      "104",
      "105",
      "106",
      "107"
    ],
    "keyLine": "91",
    "edges-No": [
      [
        0,
        4
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        1,
        1
      ],
      [
        4,
        8
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ],
      [
        6,
        8
      ],
      [
        6,
        9
      ],
      [
        6,
        10
      ],
      [
        7,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-2700-c/testcases/000/232/136/CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c",
    "nodes-line": [
      "        char * dataGoodBuffer = (char *)malloc(50*sizeof(char));\n",
      "        if (dataGoodBuffer == NULL) {exit(-1);}\n",
      "        memset(dataGoodBuffer, 'A', 50-1);\n",
      "        dataGoodBuffer[50-1] = '\\0';\n",
      "        data = (void *)dataGoodBuffer;\n",
      "        size_t dataLen = strlen((char *)data);\n",
      "        void * dest = (void *)calloc(dataLen+1, 1);\n",
      "        if (dest == NULL) {exit(-1);}\n",
      "        (void)strcpy(dest, data);\n",
      "        printLine((char *)dest);\n",
      "        free(dest);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) malloc ( 50 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR1 , '' , 50 - 1 ) ;",
      "VAR1 [ 50 - 1 ] = '' ;",
      "VAR2 = ( void * ) VAR1 ;",
      "size_t VAR3 = strlen ( ( char * ) VAR2 ) ;",
      "void * VAR4 = ( void * ) calloc ( VAR3 + 1 , 1 ) ;",
      "if ( VAR4 == NULL ) { FUN1 ( - 1 ) ; }",
      "( void ) strcpy ( VAR4 , VAR2 ) ;",
      "FUN2 ( ( char * ) VAR4 ) ;",
      "free ( VAR4 ) ;"
    ],
    "pair_id": 7536,
    "xfg_id": 6680,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "27",
      "30",
      "32",
      "36",
      "39",
      "41",
      "45"
    ],
    "keyLine": "41",
    "edges-No": [
      [
        0,
        6
      ],
      [
        0,
        5
      ],
      [
        1,
        2
      ],
      [
        2,
        6
      ],
      [
        2,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        6
      ],
      [
        4,
        7
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ]
    ],
    "target": 1,
    "filePath": "119-12400-c/testcases/000/062/668/CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(GLOBAL_CONST_TRUE)\n",
      "        data = 10;\n",
      "    if(GLOBAL_CONST_TRUE)\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0)\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( VAR2 )",
      "VAR1 = 10 ;",
      "if ( VAR2 )",
      "int VAR3 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 )",
      "VAR3 [ VAR1 ] = 1 ;",
      "FUN1 ( VAR3 [ VAR4 ] ) ;"
    ],
    "pair_id": 604,
    "xfg_id": 4633,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "51",
      "52",
      "54",
      "55",
      "57",
      "58",
      "62",
      "63"
    ],
    "keyLine": "51",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        4
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-8900-c/testcases/000/067/084/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_31.c",
    "nodes-line": [
      "    char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    data = dataBuffer;\n",
      "    memset(data, 'A', 50-1); /* fill with 'A's */\n",
      "    data[50-1] = '\\0'; /* null terminate */\n",
      "        char * dataCopy = data;\n",
      "        char * data = dataCopy;\n",
      "            strcat(dest, data);\n",
      "            printLine(data);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "VAR2 = VAR1 ;",
      "memset ( VAR2 , '' , 50 - 1 ) ;",
      "VAR2 [ 50 - 1 ] = '' ;",
      "char * VAR3 = VAR2 ;",
      "char * VAR2 = VAR3 ;",
      "strcat ( VAR4 , VAR2 ) ;",
      "FUN2 ( VAR2 ) ;"
    ],
    "pair_id": 8870,
    "xfg_id": 10784,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "27",
      "28",
      "32",
      "41"
    ],
    "keyLine": "32",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-9900-c/testcases/000/065/802/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_03.c",
    "nodes-line": [
      "    char dataBuffer[100];\n",
      "    data = dataBuffer;\n",
      "    if(5==5)\n",
      "        data[100-1] = '\\0'; /* null terminate */\n",
      "            dest[i] = data[i];\n"
    ],
    "nodes-line-sym": [
      "char VAR1 [ 100 ] ;",
      "VAR2 = VAR1 ;",
      "if ( 5 == 5 )",
      "VAR2 [ 100 - 1 ] = '' ;",
      "VAR3 [ VAR4 ] = VAR2 [ VAR4 ] ;"
    ],
    "pair_id": 9059,
    "xfg_id": 12832,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "52",
      "56"
    ],
    "keyLine": "56",
    "edges-No": [
      [
        0,
        1
      ]
    ],
    "target": 0,
    "filePath": "119-13700-c/testcases/000/000/146/basic-00008-ok.c",
    "nodes-line": [
      "  unsigned int buf[10];\n",
      "  buf[9] = 55;\n"
    ],
    "nodes-line-sym": [
      "unsigned int VAR1 [ 10 ] ;",
      "VAR1 [ 9 ] = 55 ;"
    ],
    "pair_id": 1555,
    "xfg_id": 8737,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "30",
      "35",
      "38",
      "40",
      "44"
    ],
    "keyLine": "40",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-12300-c/testcases/000/062/677/CWE121_Stack_Based_Buffer_Overflow__CWE129_large_18.c",
    "nodes-line": [
      "    data = 10;\n",
      "        int buffer[10] = { 0 };\n",
      "        if (data >= 0)\n",
      "            buffer[data] = 1;\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = 10 ;",
      "int VAR2 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 )",
      "VAR2 [ VAR1 ] = 1 ;",
      "FUN1 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 4672,
    "xfg_id": 12835,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "55",
      "64",
      "65",
      "69",
      "76",
      "77",
      "85",
      "91",
      "92",
      "99",
      "101",
      "121",
      "123",
      "125",
      "127",
      "132"
    ],
    "keyLine": "99",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        1,
        5
      ],
      [
        2,
        9
      ],
      [
        2,
        7
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        6
      ],
      [
        4,
        7
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ],
      [
        6,
        8
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ],
      [
        8,
        10
      ],
      [
        9,
        11
      ],
      [
        9,
        12
      ],
      [
        10,
        3
      ],
      [
        11,
        12
      ],
      [
        11,
        15
      ],
      [
        11,
        13
      ],
      [
        12,
        14
      ],
      [
        13,
        13
      ],
      [
        13,
        14
      ]
    ],
    "target": 1,
    "filePath": "119-7500-c/testcases/000/073/554/CWE124_Buffer_Underwrite__CWE839_connect_socket_05.c",
    "nodes-line": [
      "    if(staticTrue)\n",
      "            SOCKET connectSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (connectSocket == INVALID_SOCKET)\n",
      "                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "            if (data < 10)\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n",
      "                printLine(\"ERROR: Array index is negative.\");\n"
    ],
    "nodes-line-sym": [
      "if ( VAR1 )",
      "SOCKET VAR2 = VAR3 ;",
      "char VAR4 [ VAR5 ] ;",
      "if ( FUN1 ( FUN2 ( 2 , 2 ) , & VAR6 ) != VAR7 )",
      "VAR2 = socket ( VAR8 , VAR9 , VAR10 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( connect ( VAR2 , ( struct VAR11 * ) & VAR12 , sizeof ( VAR12 ) ) == VAR13 )",
      "VAR14 = recv ( VAR2 , VAR4 , VAR5 - 1 , 0 ) ;",
      "if ( VAR14 == VAR13 || VAR14 == 0 )",
      "VAR15 = atoi ( VAR4 ) ;",
      "while ( 0 ) ;",
      "if ( VAR15 < 10 )",
      "VAR16 [ VAR15 ] = 1 ;",
      "for ( VAR17 = 0 ; VAR17 < 10 ; VAR17 ++ )",
      "FUN3 ( VAR16 [ VAR17 ] ) ;",
      "FUN4 ( \"\" ) ;"
    ],
    "pair_id": 2427,
    "xfg_id": 6692,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "91",
      "96",
      "102",
      "103",
      "104",
      "105",
      "106",
      "107"
    ],
    "keyLine": "102",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        5
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        4,
        4
      ]
    ],
    "target": 0,
    "filePath": "119-2700-c/testcases/000/232/136/CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c",
    "nodes-line": [
      "        char * dataGoodBuffer = (char *)malloc(50*sizeof(char));\n",
      "        data = (void *)dataGoodBuffer;\n",
      "        size_t dataLen = strlen((char *)data);\n",
      "        void * dest = (void *)calloc(dataLen+1, 1);\n",
      "        if (dest == NULL) {exit(-1);}\n",
      "        (void)strcpy(dest, data);\n",
      "        printLine((char *)dest);\n",
      "        free(dest);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) malloc ( 50 * sizeof ( char ) ) ;",
      "VAR2 = ( void * ) VAR1 ;",
      "size_t VAR3 = strlen ( ( char * ) VAR2 ) ;",
      "void * VAR4 = ( void * ) calloc ( VAR3 + 1 , 1 ) ;",
      "if ( VAR4 == NULL ) { FUN1 ( - 1 ) ; }",
      "( void ) strcpy ( VAR4 , VAR2 ) ;",
      "FUN2 ( ( char * ) VAR4 ) ;",
      "free ( VAR4 ) ;"
    ],
    "pair_id": 7536,
    "xfg_id": 8746,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "66",
      "55",
      "56",
      "61",
      "62",
      "63"
    ],
    "keyLine": "66",
    "edges-No": [
      [
        1,
        0
      ],
      [
        2,
        0
      ],
      [
        2,
        4
      ],
      [
        3,
        0
      ],
      [
        3,
        5
      ],
      [
        4,
        5
      ],
      [
        5,
        0
      ]
    ],
    "target": 0,
    "filePath": "119-12600-c/testcases/000/001/274/basic-00290-ok.c",
    "nodes-line": [
      "    memcpy(buf, src, copy_size);\n",
      "  char src[10];\n",
      "  char buf[10];\n",
      "  copy_size = 10;\n",
      "  buf_size = sizeof buf;\n",
      "  if (copy_size <= buf_size)\n"
    ],
    "nodes-line-sym": [
      "memcpy ( VAR1 , VAR2 , VAR3 ) ;",
      "char VAR2 [ 10 ] ;",
      "char VAR1 [ 10 ] ;",
      "VAR3 = 10 ;",
      "VAR4 = sizeof VAR1 ;",
      "if ( VAR3 <= VAR4 )"
    ],
    "pair_id": 1145,
    "xfg_id": 12845,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "29",
      "34",
      "35",
      "39",
      "41",
      "43"
    ],
    "keyLine": "39",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        5
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        4
      ],
      [
        4,
        5
      ],
      [
        5,
        5
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/069/316/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_loop_31.cpp",
    "nodes-line": [
      "    data = new char[100];\n",
      "        char * dataCopy = data;\n",
      "        char * data = dataCopy;\n",
      "            dataLen = strlen(data);\n",
      "            for (i = 0; i < dataLen; i++)\n",
      "                dest[i] = data[i];\n"
    ],
    "nodes-line-sym": [
      "VAR1 = new char [ 100 ] ;",
      "char * VAR2 = VAR1 ;",
      "char * VAR1 = VAR2 ;",
      "VAR3 = strlen ( VAR1 ) ;",
      "for ( VAR4 = 0 ; VAR4 < VAR3 ; VAR4 ++ )",
      "VAR5 [ VAR4 ] = VAR1 [ VAR4 ] ;"
    ],
    "pair_id": 13971,
    "xfg_id": 10802,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "52",
      "53",
      "55",
      "56",
      "58",
      "59",
      "63",
      "64",
      "65"
    ],
    "keyLine": "52",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        1
      ],
      [
        4,
        5
      ],
      [
        5,
        7
      ],
      [
        5,
        8
      ],
      [
        5,
        6
      ]
    ],
    "target": 0,
    "filePath": "119-1100-c/testcases/000/234/033/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_31.c",
    "nodes-line": [
      "    data = (char *)malloc(100*sizeof(char));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "    memset(data, 'A', 50-1); /* fill with 'A's */\n",
      "    data[50-1] = '\\0'; /* null terminate */\n",
      "        char * dataCopy = data;\n",
      "        char * data = dataCopy;\n",
      "            strcpy(dest, data);\n",
      "            printLine(data);\n",
      "            free(data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR1 , '' , 50 - 1 ) ;",
      "VAR1 [ 50 - 1 ] = '' ;",
      "char * VAR2 = VAR1 ;",
      "char * VAR1 = VAR2 ;",
      "strcpy ( VAR3 , VAR1 ) ;",
      "FUN2 ( VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 7183,
    "xfg_id": 8767,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "31",
      "32",
      "33",
      "37",
      "44",
      "48",
      "51"
    ],
    "keyLine": "51",
    "edges-No": [
      [
        0,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        4
      ],
      [
        2,
        3
      ],
      [
        3,
        6
      ],
      [
        4,
        6
      ],
      [
        5,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-12000-c/testcases/000/063/163/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_12.c",
    "nodes-line": [
      "    char * dataBadBuffer = (char *)ALLOCA((10)*sizeof(char));\n",
      "    char * dataGoodBuffer = (char *)ALLOCA((10+1)*sizeof(char));\n",
      "    if(globalReturnsTrueOrFalse())\n",
      "        data = dataBadBuffer;\n",
      "        data = dataGoodBuffer;\n",
      "        char source[10+1] = SRC_STRING;\n",
      "        memmove(data, source, (strlen(source) + 1) * sizeof(char));\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( ( 10 ) * sizeof ( char ) ) ;",
      "char * VAR2 = ( char * ) FUN1 ( ( 10 + 1 ) * sizeof ( char ) ) ;",
      "if ( FUN2 ( ) )",
      "VAR3 = VAR1 ;",
      "VAR3 = VAR2 ;",
      "char VAR4 [ 10 + 1 ] = VAR5 ;",
      "memmove ( VAR3 , VAR4 , ( strlen ( VAR4 ) + 1 ) * sizeof ( char ) ) ;"
    ],
    "pair_id": 11152,
    "xfg_id": 4673,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "30",
      "31",
      "33",
      "37",
      "41",
      "44"
    ],
    "keyLine": "44",
    "edges-No": [
      [
        0,
        5
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ],
      [
        3,
        5
      ],
      [
        4,
        5
      ]
    ],
    "target": 1,
    "filePath": "119-12000-c/testcases/000/063/202/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_11.c",
    "nodes-line": [
      "    char * data;\n",
      "    char * dataBadBuffer = (char *)ALLOCA((10)*sizeof(char));\n",
      "    if(globalReturnsTrue())\n",
      "        data = dataBadBuffer;\n",
      "        char source[10+1] = SRC_STRING;\n",
      "        strncpy(data, source, strlen(source) + 1);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 ;",
      "char * VAR2 = ( char * ) FUN1 ( ( 10 ) * sizeof ( char ) ) ;",
      "if ( FUN2 ( ) )",
      "VAR1 = VAR2 ;",
      "char VAR3 [ 10 + 1 ] = VAR4 ;",
      "strncpy ( VAR1 , VAR3 , strlen ( VAR3 ) + 1 ) ;"
    ],
    "pair_id": 90,
    "xfg_id": 8777,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "57",
      "60",
      "65",
      "68",
      "71",
      "73",
      "75"
    ],
    "keyLine": "73",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        1
      ],
      [
        1,
        5
      ],
      [
        1,
        6
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ],
      [
        3,
        5
      ],
      [
        4,
        5
      ],
      [
        4,
        4
      ],
      [
        5,
        5
      ],
      [
        5,
        6
      ]
    ],
    "target": 0,
    "filePath": "119-12200-c/testcases/000/062/815/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c",
    "nodes-line": [
      "    if(globalReturnsTrueOrFalse())\n",
      "        data = (int *)ALLOCA(10*sizeof(int));\n",
      "        data = (int *)ALLOCA(10*sizeof(int));\n",
      "        int source[10] = {0};\n",
      "        for (i = 0; i < 10; i++)\n",
      "            data[i] = source[i];\n",
      "        printIntLine(data[0]);\n"
    ],
    "nodes-line-sym": [
      "if ( FUN1 ( ) )",
      "VAR1 = ( int * ) FUN2 ( 10 * sizeof ( int ) ) ;",
      "VAR1 = ( int * ) FUN2 ( 10 * sizeof ( int ) ) ;",
      "int VAR2 [ 10 ] = { 0 } ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "VAR1 [ VAR3 ] = VAR2 [ VAR3 ] ;",
      "FUN3 ( VAR1 [ 0 ] ) ;"
    ],
    "pair_id": 3002,
    "xfg_id": 8779,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "96",
      "99",
      "101",
      "103"
    ],
    "keyLine": "103",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ]
    ],
    "target": 0,
    "filePath": "119-5500-c/testcases/000/077/122/CWE127_Buffer_Underread__CWE839_fgets_41.c",
    "nodes-line": [
      "static void goodB2GSink(int data)\n",
      "        int buffer[10] = { 0 };\n",
      "        if (data >= 0 && data < (10))\n",
      "            printIntLine(buffer[data]);\n"
    ],
    "nodes-line-sym": [
      "static void FUN1 ( int VAR1 )",
      "int VAR2 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "FUN2 ( VAR2 [ VAR1 ] ) ;"
    ],
    "pair_id": 676,
    "xfg_id": 12879,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "80",
      "81",
      "84",
      "86",
      "89",
      "98",
      "102",
      "104",
      "106",
      "110"
    ],
    "keyLine": "106",
    "edges-No": [
      [
        0,
        7
      ],
      [
        0,
        8
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        4
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        7
      ],
      [
        4,
        8
      ],
      [
        5,
        7
      ],
      [
        5,
        6
      ],
      [
        6,
        8
      ],
      [
        6,
        9
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ]
    ],
    "target": 0,
    "filePath": "119-7500-c/testcases/000/073/613/CWE124_Buffer_Underwrite__CWE839_fgets_16.c",
    "nodes-line": [
      "    data = -1;\n",
      "    while(1)\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n",
      "            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n",
      "                data = atoi(inputBuffer);\n",
      "    while(1)\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "while ( 1 )",
      "char VAR2 [ VAR3 ] = \"\" ;",
      "if ( fgets ( VAR2 , VAR3 , stdin ) != NULL )",
      "VAR1 = atoi ( VAR2 ) ;",
      "while ( 1 )",
      "int VAR4 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR4 [ VAR1 ] = 1 ;",
      "FUN1 ( VAR4 [ VAR5 ] ) ;"
    ],
    "pair_id": 947,
    "xfg_id": 6739,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "47",
      "48",
      "51",
      "54",
      "57"
    ],
    "keyLine": "57",
    "edges-No": [
      [
        0,
        4
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/067/959/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memmove_08.cpp",
    "nodes-line": [
      "    data = NULL;\n",
      "    if(staticReturnsTrue())\n",
      "        data = new char[10];\n",
      "        char source[10+1] = SRC_STRING;\n",
      "        memmove(data, source, (strlen(source) + 1) * sizeof(char));\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "if ( FUN1 ( ) )",
      "VAR1 = new char [ 10 ] ;",
      "char VAR2 [ 10 + 1 ] = VAR3 ;",
      "memmove ( VAR1 , VAR2 , ( strlen ( VAR2 ) + 1 ) * sizeof ( char ) ) ;"
    ],
    "pair_id": 12703,
    "xfg_id": 8791,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "104",
      "105",
      "108",
      "112",
      "117",
      "119",
      "121",
      "123"
    ],
    "keyLine": "123",
    "edges-No": [
      [
        0,
        7
      ],
      [
        1,
        3
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        7
      ],
      [
        4,
        7
      ],
      [
        4,
        5
      ],
      [
        5,
        7
      ],
      [
        6,
        6
      ],
      [
        6,
        7
      ],
      [
        7,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/074/779/CWE124_Buffer_Underwrite__new_char_loop_14.cpp",
    "nodes-line": [
      "    data = NULL;\n",
      "    if(globalFive==5)\n",
      "            char * dataBuffer = new char[100];\n",
      "            data = dataBuffer;\n",
      "        char source[100];\n",
      "        source[100-1] = '\\0'; /* null terminate */\n",
      "        for (i = 0; i < 100; i++)\n",
      "            data[i] = source[i];\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "if ( VAR2 == 5 )",
      "char * VAR3 = new char [ 100 ] ;",
      "VAR1 = VAR3 ;",
      "char VAR4 [ 100 ] ;",
      "VAR4 [ 100 - 1 ] = '' ;",
      "for ( VAR5 = 0 ; VAR5 < 100 ; VAR5 ++ )",
      "VAR1 [ VAR5 ] = VAR4 [ VAR5 ] ;"
    ],
    "pair_id": 6163,
    "xfg_id": 4696,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "57",
      "58",
      "60",
      "61"
    ],
    "keyLine": "57",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        1,
        1
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/233/538/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_33.cpp",
    "nodes-line": [
      "    data = (char *)malloc(100*sizeof(char));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "    memset(data, 'A', 50-1); /* fill with 'A's */\n",
      "    data[50-1] = '\\0'; /* null terminate */\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR1 , '' , 50 - 1 ) ;",
      "VAR1 [ 50 - 1 ] = '' ;"
    ],
    "pair_id": 490,
    "xfg_id": 10841,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "49",
      "51",
      "54",
      "63",
      "65",
      "69"
    ],
    "keyLine": "65",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        4
      ],
      [
        1,
        3
      ],
      [
        2,
        4
      ],
      [
        2,
        5
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ]
    ],
    "target": 1,
    "filePath": "119-2700-c/testcases/000/232/202/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c",
    "nodes-line": [
      "void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b_badSink(CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_structType myStruct)\n",
      "    int data = myStruct.structFirst;\n",
      "        int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "        if (data >= 0)\n",
      "            buffer[data] = 1;\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67_structType VAR1 )",
      "int VAR2 = VAR1 . VAR3 ;",
      "int * VAR4 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "if ( VAR2 >= 0 )",
      "VAR4 [ VAR2 ] = 1 ;",
      "FUN2 ( VAR4 [ VAR5 ] ) ;"
    ],
    "pair_id": 13798,
    "xfg_id": 12897,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "57",
      "61"
    ],
    "keyLine": "61",
    "edges-No": [
      [
        0,
        1
      ]
    ],
    "target": 0,
    "filePath": "119-13600-c/testcases/000/000/286/basic-00043-ok.c",
    "nodes-line": [
      "  char buf[10];\n",
      "  (function1(buf))[9] = 'A';\n"
    ],
    "nodes-line-sym": [
      "char VAR1 [ 10 ] ;",
      "( FUN1 ( VAR1 ) ) [ 9 ] = '' ;"
    ],
    "pair_id": 4551,
    "xfg_id": 4726,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "41",
      "45",
      "49",
      "51"
    ],
    "keyLine": "51",
    "edges-No": [
      [
        0,
        3
      ],
      [
        1,
        3
      ],
      [
        2,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        3
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/235/025/CWE127_Buffer_Underread__malloc_wchar_t_loop_43.cpp",
    "nodes-line": [
      "    data = NULL;\n",
      "        wchar_t dest[100];\n",
      "        for (i = 0; i < 100; i++)\n",
      "            dest[i] = data[i];\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "wchar_t VAR2 [ 100 ] ;",
      "for ( VAR3 = 0 ; VAR3 < 100 ; VAR3 ++ )",
      "VAR2 [ VAR3 ] = VAR1 [ VAR3 ] ;"
    ],
    "pair_id": 13962,
    "xfg_id": 2682,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "53",
      "54",
      "60"
    ],
    "keyLine": "60",
    "edges-No": [
      [
        0,
        2
      ],
      [
        1,
        2
      ]
    ],
    "target": 0,
    "filePath": "119-12600-c/testcases/000/001/266/basic-00288-ok.c",
    "nodes-line": [
      "  char src[10];\n",
      "  char buf[10];\n",
      "  memcpy(buf, src, 10);\n"
    ],
    "nodes-line-sym": [
      "char VAR1 [ 10 ] ;",
      "char VAR2 [ 10 ] ;",
      "memcpy ( VAR2 , VAR1 , 10 ) ;"
    ],
    "pair_id": 3305,
    "xfg_id": 6785,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "33",
      "34",
      "36",
      "37",
      "38",
      "40",
      "44",
      "46",
      "47"
    ],
    "keyLine": "33",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        1,
        1
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        5,
        8
      ]
    ],
    "target": 1,
    "filePath": "119-1500-c/testcases/000/233/571/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_34.c",
    "nodes-line": [
      "    data = (char *)malloc(100*sizeof(char));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "    memset(data, 'A', 100-1); /* fill with 'A's */\n",
      "    data[100-1] = '\\0'; /* null terminate */\n",
      "    myUnion.unionFirst = data;\n",
      "        char * data = myUnion.unionSecond;\n",
      "            strncat(dest, data, strlen(data));\n",
      "            printLine(data);\n",
      "            free(data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR1 , '' , 100 - 1 ) ;",
      "VAR1 [ 100 - 1 ] = '' ;",
      "VAR2 . VAR3 = VAR1 ;",
      "char * VAR1 = VAR2 . VAR4 ;",
      "strncat ( VAR5 , VAR1 , strlen ( VAR1 ) ) ;",
      "FUN2 ( VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 9603,
    "xfg_id": 12930,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "27",
      "29",
      "31",
      "37",
      "38",
      "39",
      "41",
      "43",
      "44",
      "46"
    ],
    "keyLine": "37",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        2,
        7
      ],
      [
        2,
        8
      ],
      [
        2,
        9
      ],
      [
        3,
        6
      ],
      [
        3,
        4
      ],
      [
        4,
        6
      ],
      [
        4,
        7
      ],
      [
        4,
        9
      ],
      [
        4,
        5
      ],
      [
        7,
        8
      ]
    ],
    "target": 1,
    "filePath": "119-4200-c/testcases/000/149/203/UseAfterFree_container-bad.c",
    "nodes-line": [
      "str container;\n",
      "container.foo.a = 0;\n",
      "if ((container.foo.b = (char *)malloc(256*sizeof(char))) != NULL)\n",
      "str1 = malloc(65536); \n",
      " if (str1 == NULL)\n",
      "        {printf(\"Memory allocation problem\"); return 1;}\n",
      "free(str1);\n",
      "if (container.foo.b)\n",
      "{container.foo.b[0] = 'S'; printf(\"%s\\n\", container.foo.b);}/* FLAW */\n",
      "return 0;\n"
    ],
    "nodes-line-sym": [
      "str VAR1 ;",
      "VAR1 . VAR2 . VAR3 = 0 ;",
      "if ( ( VAR1 . VAR2 . VAR4 = ( char * ) malloc ( 256 * sizeof ( char ) ) ) != NULL )",
      "VAR5 = malloc ( 65536 ) ;",
      "if ( VAR5 == NULL )",
      "{ printf ( \"\" ) ; return 1 ; }",
      "free ( VAR5 ) ;",
      "if ( VAR1 . VAR2 . VAR4 )",
      "{ VAR1 . VAR2 . VAR4 [ 0 ] = '' ; printf ( \"\" , VAR1 . VAR2 . VAR4 ) ; }",
      "return 0 ;"
    ],
    "pair_id": 5867,
    "xfg_id": 2692,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "73",
      "74",
      "77",
      "80",
      "82"
    ],
    "keyLine": "82",
    "edges-No": [
      [
        0,
        4
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ]
    ],
    "target": 0,
    "filePath": "119-12200-c/testcases/000/062/905/CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_06.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    if(STATIC_CONST_FIVE==5)\n",
      "        data = (int *)ALLOCA(10*sizeof(int));\n",
      "        int source[10] = {0};\n",
      "        memmove(data, source, 10*sizeof(int));\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "if ( VAR2 == 5 )",
      "VAR1 = ( int * ) FUN1 ( 10 * sizeof ( int ) ) ;",
      "int VAR3 [ 10 ] = { 0 } ;",
      "memmove ( VAR1 , VAR3 , 10 * sizeof ( int ) ) ;"
    ],
    "pair_id": 1022,
    "xfg_id": 2698,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "31",
      "32",
      "33",
      "37",
      "44",
      "48",
      "51"
    ],
    "keyLine": "51",
    "edges-No": [
      [
        0,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        4
      ],
      [
        2,
        3
      ],
      [
        3,
        6
      ],
      [
        4,
        6
      ],
      [
        5,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-11600-c/testcases/000/063/563/CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_12.c",
    "nodes-line": [
      "    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA((10)*sizeof(wchar_t));\n",
      "    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA((10+1)*sizeof(wchar_t));\n",
      "    if(globalReturnsTrueOrFalse())\n",
      "        data = dataBadBuffer;\n",
      "        data = dataGoodBuffer;\n",
      "        wchar_t source[10+1] = SRC_STRING;\n",
      "        memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t));\n"
    ],
    "nodes-line-sym": [
      "wchar_t * VAR1 = ( wchar_t * ) FUN1 ( ( 10 ) * sizeof ( wchar_t ) ) ;",
      "wchar_t * VAR2 = ( wchar_t * ) FUN1 ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ;",
      "if ( FUN2 ( ) )",
      "VAR3 = VAR1 ;",
      "VAR3 = VAR2 ;",
      "wchar_t VAR4 [ 10 + 1 ] = VAR5 ;",
      "memmove ( VAR3 , VAR4 , ( wcslen ( VAR4 ) + 1 ) * sizeof ( wchar_t ) ) ;"
    ],
    "pair_id": 5981,
    "xfg_id": 8844,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "27",
      "30",
      "31",
      "32",
      "33",
      "35",
      "47"
    ],
    "keyLine": "30",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        2
      ],
      [
        2,
        2
      ],
      [
        5,
        6
      ],
      [
        6,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-500-c/testcases/000/234/849/CWE127_Buffer_Underread__malloc_char_loop_16.c",
    "nodes-line": [
      "    while(1)\n",
      "            char * dataBuffer = (char *)malloc(100*sizeof(char));\n",
      "            if (dataBuffer == NULL) {exit(-1);}\n",
      "            memset(dataBuffer, 'A', 100-1);\n",
      "            dataBuffer[100-1] = '\\0';\n",
      "            data = dataBuffer - 8;\n",
      "            dest[i] = data[i];\n"
    ],
    "nodes-line-sym": [
      "while ( 1 )",
      "char * VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR1 , '' , 100 - 1 ) ;",
      "VAR1 [ 100 - 1 ] = '' ;",
      "VAR2 = VAR1 - 8 ;",
      "VAR3 [ VAR4 ] = VAR2 [ VAR4 ] ;"
    ],
    "pair_id": 12364,
    "xfg_id": 4749,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "32",
      "35",
      "36",
      "42",
      "43",
      "44"
    ],
    "keyLine": "35",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        2
      ],
      [
        1,
        5
      ],
      [
        2,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-2400-c/testcases/000/232/550/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_02.c",
    "nodes-line": [
      "    if(1)\n",
      "        data = (char *)malloc(10*sizeof(char));\n",
      "        if (data == NULL) {exit(-1);}\n",
      "        strncpy(data, source, strlen(source) + 1);\n",
      "        printLine(data);\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "if ( 1 )",
      "VAR1 = ( char * ) malloc ( 10 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "strncpy ( VAR1 , VAR2 , strlen ( VAR2 ) + 1 ) ;",
      "FUN2 ( VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 244,
    "xfg_id": 2703,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "38",
      "43",
      "46",
      "48",
      "50",
      "52"
    ],
    "keyLine": "52",
    "edges-No": [
      [
        0,
        4
      ],
      [
        0,
        3
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        4
      ],
      [
        2,
        6
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        6
      ],
      [
        5,
        5
      ],
      [
        5,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-12400-c/testcases/000/062/626/CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c",
    "nodes-line": [
      "    data = -1;\n",
      "    switch(7)\n",
      "        int buffer[10] = { 0 };\n",
      "        if (data >= 0)\n",
      "            buffer[data] = 1;\n",
      "            for(i = 0; i < 10; i++)\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "switch ( 7 )",
      "int VAR2 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 )",
      "VAR2 [ VAR1 ] = 1 ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "FUN1 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 8320,
    "xfg_id": 4752,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "95",
      "97",
      "100"
    ],
    "keyLine": "100",
    "edges-No": [
      [
        0,
        2
      ],
      [
        1,
        2
      ]
    ],
    "target": 0,
    "filePath": "119-9800-c/testcases/000/065/914/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_21.c",
    "nodes-line": [
      "static char * goodG2B2Source(char * data)\n",
      "    if(goodG2B2Static)\n",
      "        memset(data, 'A', 50-1); /* fill with 'A's */\n"
    ],
    "nodes-line-sym": [
      "static char * FUN1 ( char * VAR1 )",
      "if ( VAR2 )",
      "memset ( VAR1 , '' , 50 - 1 ) ;"
    ],
    "pair_id": 1229,
    "xfg_id": 10898,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "29",
      "32",
      "38",
      "40",
      "44",
      "46",
      "48",
      "52",
      "54",
      "56",
      "58"
    ],
    "keyLine": "58",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        7
      ],
      [
        1,
        8
      ],
      [
        2,
        7
      ],
      [
        2,
        8
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        7
      ],
      [
        4,
        6
      ],
      [
        4,
        10
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        5,
        5
      ],
      [
        6,
        10
      ],
      [
        7,
        9
      ],
      [
        7,
        8
      ],
      [
        8,
        10
      ],
      [
        9,
        9
      ],
      [
        9,
        10
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/067/675/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_large_12.cpp",
    "nodes-line": [
      "    if(globalReturnsTrueOrFalse())\n",
      "        data = 10;\n",
      "        data = 7;\n",
      "    if(globalReturnsTrueOrFalse())\n",
      "            int * buffer = new int[10];\n",
      "            for (i = 0; i < 10; i++)\n",
      "                buffer[i] = 0;\n",
      "            if (data >= 0)\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "if ( FUN1 ( ) )",
      "VAR1 = 10 ;",
      "VAR1 = 7 ;",
      "if ( FUN1 ( ) )",
      "int * VAR2 = new int [ 10 ] ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "VAR2 [ VAR3 ] = 0 ;",
      "if ( VAR1 >= 0 )",
      "VAR2 [ VAR1 ] = 1 ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "FUN2 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 2759,
    "xfg_id": 10901,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "165",
      "173",
      "174",
      "178",
      "185",
      "186",
      "194",
      "200",
      "201",
      "208",
      "210",
      "224",
      "226",
      "228",
      "232"
    ],
    "keyLine": "228",
    "edges-No": [
      [
        0,
        12
      ],
      [
        0,
        13
      ],
      [
        1,
        5
      ],
      [
        2,
        7
      ],
      [
        2,
        9
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        6
      ],
      [
        4,
        7
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ],
      [
        6,
        8
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ],
      [
        8,
        10
      ],
      [
        9,
        12
      ],
      [
        9,
        13
      ],
      [
        10,
        3
      ],
      [
        11,
        14
      ],
      [
        11,
        13
      ],
      [
        12,
        13
      ],
      [
        13,
        14
      ]
    ],
    "target": 0,
    "filePath": "119-7600-c/testcases/000/073/550/CWE124_Buffer_Underwrite__CWE839_connect_socket_01.c",
    "nodes-line": [
      "    data = -1;\n",
      "        SOCKET connectSocket = INVALID_SOCKET;\n",
      "        char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "            if (connectSocket == INVALID_SOCKET)\n",
      "            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data = atoi(inputBuffer);\n",
      "        while (0);\n",
      "        int buffer[10] = { 0 };\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "SOCKET VAR2 = VAR3 ;",
      "char VAR4 [ VAR5 ] ;",
      "if ( FUN1 ( FUN2 ( 2 , 2 ) , & VAR6 ) != VAR7 )",
      "VAR2 = socket ( VAR8 , VAR9 , VAR10 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( connect ( VAR2 , ( struct VAR11 * ) & VAR12 , sizeof ( VAR12 ) ) == VAR13 )",
      "VAR14 = recv ( VAR2 , VAR4 , VAR5 - 1 , 0 ) ;",
      "if ( VAR14 == VAR13 || VAR14 == 0 )",
      "VAR1 = atoi ( VAR4 ) ;",
      "while ( 0 ) ;",
      "int VAR15 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR15 [ VAR1 ] = 1 ;",
      "FUN3 ( VAR15 [ VAR16 ] ) ;"
    ],
    "pair_id": 1441,
    "xfg_id": 10902,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "27",
      "36",
      "38",
      "40"
    ],
    "keyLine": "36",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        1,
        4
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        3,
        3
      ],
      [
        4,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-10200-c/testcases/000/065/529/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_18.c",
    "nodes-line": [
      "    char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    data = dataBuffer;\n",
      "        dataLen = strlen(data);\n",
      "        for (i = 0; i < dataLen; i++)\n",
      "            dest[i] = data[i];\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "VAR2 = VAR1 ;",
      "VAR3 = strlen ( VAR2 ) ;",
      "for ( VAR4 = 0 ; VAR4 < VAR3 ; VAR4 ++ )",
      "VAR5 [ VAR4 ] = VAR2 [ VAR4 ] ;"
    ],
    "pair_id": 666,
    "xfg_id": 8856,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "62",
      "65",
      "67",
      "69"
    ],
    "keyLine": "69",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ]
    ],
    "target": 0,
    "filePath": "119-5400-c/testcases/000/077/176/CWE127_Buffer_Underread__CWE839_fscanf_52c.c",
    "nodes-line": [
      "void CWE127_Buffer_Underread__CWE839_fscanf_52c_goodB2GSink(int data)\n",
      "        int buffer[10] = { 0 };\n",
      "        if (data >= 0 && data < (10))\n",
      "            printIntLine(buffer[data]);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( int VAR1 )",
      "int VAR2 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "FUN2 ( VAR2 [ VAR1 ] ) ;"
    ],
    "pair_id": 17,
    "xfg_id": 12962,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "30",
      "31",
      "34",
      "37",
      "41",
      "42",
      "43"
    ],
    "keyLine": "43",
    "edges-No": [
      [
        0,
        4
      ],
      [
        0,
        6
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        2,
        6
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-3300-c/testcases/000/231/417/CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    while(1)\n",
      "        data = (void *)WIDE_STRING;\n",
      "    while(1)\n",
      "            size_t dataLen = strlen((char *)data);\n",
      "            void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));\n",
      "            (void)wcscpy(dest, data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "while ( 1 )",
      "VAR1 = ( void * ) VAR2 ;",
      "while ( 1 )",
      "size_t VAR3 = strlen ( ( char * ) VAR1 ) ;",
      "void * VAR4 = ( void * ) FUN1 ( ( VAR3 + 1 ) * sizeof ( wchar_t ) ) ;",
      "( void ) wcscpy ( VAR4 , VAR1 ) ;"
    ],
    "pair_id": 2546,
    "xfg_id": 12969,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "208",
      "210",
      "218",
      "219",
      "220",
      "224",
      "231",
      "232",
      "240",
      "244",
      "248",
      "249",
      "254",
      "255",
      "262",
      "264",
      "280",
      "282",
      "285",
      "292",
      "294",
      "298"
    ],
    "keyLine": "294",
    "edges-No": [
      [
        0,
        16
      ],
      [
        1,
        16
      ],
      [
        2,
        3
      ],
      [
        3,
        7
      ],
      [
        4,
        12
      ],
      [
        4,
        14
      ],
      [
        5,
        7
      ],
      [
        5,
        6
      ],
      [
        6,
        8
      ],
      [
        6,
        10
      ],
      [
        6,
        9
      ],
      [
        6,
        7
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ],
      [
        9,
        10
      ],
      [
        9,
        11
      ],
      [
        10,
        11
      ],
      [
        10,
        12
      ],
      [
        11,
        12
      ],
      [
        11,
        13
      ],
      [
        12,
        13
      ],
      [
        13,
        15
      ],
      [
        13,
        14
      ],
      [
        14,
        16
      ],
      [
        15,
        5
      ],
      [
        16,
        17
      ],
      [
        17,
        19
      ],
      [
        17,
        20
      ],
      [
        18,
        21
      ],
      [
        18,
        20
      ],
      [
        19,
        20
      ],
      [
        20,
        21
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/067/735/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_34.cpp",
    "nodes-line": [
      "    unionType myUnion;\n",
      "    data = -1;\n",
      "        SOCKET listenSocket = INVALID_SOCKET;\n",
      "        SOCKET acceptSocket = INVALID_SOCKET;\n",
      "        char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "            if (listenSocket == INVALID_SOCKET)\n",
      "            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "            acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "            if (acceptSocket == SOCKET_ERROR)\n",
      "            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data = atoi(inputBuffer);\n",
      "        while (0);\n",
      "    myUnion.unionFirst = data;\n",
      "        int data = myUnion.unionSecond;\n",
      "            int * buffer = new int[10];\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "unionType VAR1 ;",
      "VAR2 = - 1 ;",
      "SOCKET VAR3 = VAR4 ;",
      "SOCKET VAR5 = VAR4 ;",
      "char VAR6 [ VAR7 ] ;",
      "if ( FUN1 ( FUN2 ( 2 , 2 ) , & VAR8 ) != VAR9 )",
      "VAR3 = socket ( VAR10 , VAR11 , VAR12 ) ;",
      "if ( VAR3 == VAR4 )",
      "if ( bind ( VAR3 , ( struct VAR13 * ) & VAR14 , sizeof ( VAR14 ) ) == VAR15 )",
      "if ( FUN3 ( VAR3 , VAR16 ) == VAR15 )",
      "VAR5 = accept ( VAR3 , NULL , NULL ) ;",
      "if ( VAR5 == VAR15 )",
      "VAR17 = recv ( VAR5 , VAR6 , VAR7 - 1 , 0 ) ;",
      "if ( VAR17 == VAR15 || VAR17 == 0 )",
      "VAR2 = atoi ( VAR6 ) ;",
      "while ( 0 ) ;",
      "VAR1 . VAR18 = VAR2 ;",
      "int VAR2 = VAR1 . VAR19 ;",
      "int * VAR20 = new int [ 10 ] ;",
      "if ( VAR2 >= 0 && VAR2 < ( 10 ) )",
      "VAR20 [ VAR2 ] = 1 ;",
      "FUN4 ( VAR20 [ VAR21 ] ) ;"
    ],
    "pair_id": 3988,
    "xfg_id": 2730,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "129",
      "110",
      "111",
      "114",
      "118",
      "123",
      "125",
      "127"
    ],
    "keyLine": "129",
    "edges-No": [
      [
        0,
        0
      ],
      [
        1,
        0
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ],
      [
        4,
        0
      ],
      [
        5,
        0
      ],
      [
        5,
        6
      ],
      [
        6,
        0
      ],
      [
        7,
        0
      ],
      [
        7,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/074/770/CWE124_Buffer_Underwrite__new_char_loop_05.cpp",
    "nodes-line": [
      "            data[i] = source[i];\n",
      "    data = NULL;\n",
      "    if(staticTrue)\n",
      "            char * dataBuffer = new char[100];\n",
      "            data = dataBuffer;\n",
      "        char source[100];\n",
      "        source[100-1] = '\\0'; /* null terminate */\n",
      "        for (i = 0; i < 100; i++)\n"
    ],
    "nodes-line-sym": [
      "VAR1 [ VAR2 ] = VAR3 [ VAR2 ] ;",
      "VAR1 = NULL ;",
      "if ( VAR4 )",
      "char * VAR5 = new char [ 100 ] ;",
      "VAR1 = VAR5 ;",
      "char VAR3 [ 100 ] ;",
      "VAR3 [ 100 - 1 ] = '' ;",
      "for ( VAR2 = 0 ; VAR2 < 100 ; VAR2 ++ )"
    ],
    "pair_id": 5373,
    "xfg_id": 12971,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "30",
      "33",
      "36",
      "37",
      "41"
    ],
    "keyLine": "41",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/232/161/CWE122_Heap_Based_Buffer_Overflow__CWE135_73b.cpp",
    "nodes-line": [
      "void badSink(list<void *> dataList)\n",
      "    void * data = dataList.back();\n",
      "        size_t dataLen = strlen((char *)data);\n",
      "        void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));\n",
      "        free(dest);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( VAR1 < void * > VAR2 )",
      "void * VAR3 = VAR2 . FUN2 ( ) ;",
      "size_t VAR4 = strlen ( ( char * ) VAR3 ) ;",
      "void * VAR5 = ( void * ) calloc ( VAR4 + 1 , sizeof ( wchar_t ) ) ;",
      "free ( VAR5 ) ;"
    ],
    "pair_id": 5794,
    "xfg_id": 10936,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "31",
      "33",
      "38"
    ],
    "keyLine": "38",
    "edges-No": [
      [
        0,
        2
      ],
      [
        1,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/076/598/CWE126_Buffer_Overread__new_char_memcpy_45.cpp",
    "nodes-line": [
      "    char * data = badData;\n",
      "        char dest[100];\n",
      "        memcpy(dest, data, strlen(dest)*sizeof(char));\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = VAR2 ;",
      "char VAR3 [ 100 ] ;",
      "memcpy ( VAR3 , VAR1 , strlen ( VAR3 ) * sizeof ( char ) ) ;"
    ],
    "pair_id": 4502,
    "xfg_id": 12993,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "53",
      "56",
      "57",
      "60",
      "61"
    ],
    "keyLine": "60",
    "edges-No": [
      [
        0,
        3
      ],
      [
        1,
        2
      ],
      [
        1,
        4
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        4,
        2
      ],
      [
        4,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-13400-c/testcases/000/000/411/basic-00075-large.c",
    "nodes-line": [
      "  char buf[10];\n",
      "  loop_counter = 0;\n",
      "  while(loop_counter <= 4105)\n",
      "    buf[4105] = 'A';\n",
      "    loop_counter++;\n"
    ],
    "nodes-line-sym": [
      "char VAR1 [ 10 ] ;",
      "VAR2 = 0 ;",
      "while ( VAR2 <= 4105 )",
      "VAR1 [ 4105 ] = '' ;",
      "VAR2 ++ ;"
    ],
    "pair_id": 6108,
    "xfg_id": 10948,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "24",
      "25",
      "29",
      "38",
      "40"
    ],
    "keyLine": "40",
    "edges-No": [
      [
        0,
        4
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-2800-c/testcases/000/232/026/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    switch(6)\n",
      "        data = (int *)malloc(10);\n",
      "        int source[10] = {0};\n",
      "        memcpy(data, source, 10*sizeof(int));\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "switch ( 6 )",
      "VAR1 = ( int * ) malloc ( 10 ) ;",
      "int VAR2 [ 10 ] = { 0 } ;",
      "memcpy ( VAR1 , VAR2 , 10 * sizeof ( int ) ) ;"
    ],
    "pair_id": 7763,
    "xfg_id": 2758,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "124",
      "126",
      "128",
      "131",
      "139",
      "140",
      "143",
      "151",
      "153",
      "157"
    ],
    "keyLine": "153",
    "edges-No": [
      [
        0,
        4
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ],
      [
        5,
        8
      ],
      [
        5,
        7
      ],
      [
        6,
        8
      ],
      [
        6,
        9
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ]
    ],
    "target": 0,
    "filePath": "119-2700-c/testcases/000/232/227/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c",
    "nodes-line": [
      "    data = -1;\n",
      "        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n",
      "        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n",
      "            data = atoi(inputBuffer);\n",
      "        int dataCopy = data;\n",
      "        int data = dataCopy;\n",
      "            int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "char VAR2 [ VAR3 ] = \"\" ;",
      "if ( fgets ( VAR2 , VAR3 , stdin ) != NULL )",
      "VAR1 = atoi ( VAR2 ) ;",
      "int VAR4 = VAR1 ;",
      "int VAR1 = VAR4 ;",
      "int * VAR5 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR5 [ VAR1 ] = 1 ;",
      "FUN1 ( VAR5 [ VAR6 ] ) ;"
    ],
    "pair_id": 315,
    "xfg_id": 8904,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "148",
      "149",
      "158",
      "159",
      "160",
      "164",
      "171",
      "172",
      "180",
      "184",
      "188",
      "189",
      "194",
      "195",
      "202",
      "204",
      "221",
      "229",
      "231",
      "233"
    ],
    "keyLine": "233",
    "edges-No": [
      [
        0,
        19
      ],
      [
        0,
        18
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ],
      [
        3,
        7
      ],
      [
        4,
        14
      ],
      [
        4,
        12
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        10
      ],
      [
        6,
        8
      ],
      [
        6,
        9
      ],
      [
        6,
        7
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ],
      [
        9,
        10
      ],
      [
        9,
        11
      ],
      [
        10,
        12
      ],
      [
        10,
        11
      ],
      [
        11,
        12
      ],
      [
        11,
        13
      ],
      [
        12,
        13
      ],
      [
        13,
        14
      ],
      [
        13,
        15
      ],
      [
        14,
        19
      ],
      [
        14,
        18
      ],
      [
        15,
        5
      ],
      [
        16,
        17
      ],
      [
        16,
        18
      ],
      [
        17,
        19
      ],
      [
        18,
        19
      ]
    ],
    "target": 0,
    "filePath": "119-5400-c/testcases/000/077/203/CWE127_Buffer_Underread__CWE839_listen_socket_10.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(globalTrue)\n",
      "            SOCKET listenSocket = INVALID_SOCKET;\n",
      "            SOCKET acceptSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (listenSocket == INVALID_SOCKET)\n",
      "                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "                acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "                if (acceptSocket == SOCKET_ERROR)\n",
      "                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "    if(globalFalse)\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                printIntLine(buffer[data]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( VAR2 )",
      "SOCKET VAR3 = VAR4 ;",
      "SOCKET VAR5 = VAR4 ;",
      "char VAR6 [ VAR7 ] ;",
      "if ( FUN1 ( FUN2 ( 2 , 2 ) , & VAR8 ) != VAR9 )",
      "VAR3 = socket ( VAR10 , VAR11 , VAR12 ) ;",
      "if ( VAR3 == VAR4 )",
      "if ( bind ( VAR3 , ( struct VAR13 * ) & VAR14 , sizeof ( VAR14 ) ) == VAR15 )",
      "if ( FUN3 ( VAR3 , VAR16 ) == VAR15 )",
      "VAR5 = accept ( VAR3 , NULL , NULL ) ;",
      "if ( VAR5 == VAR15 )",
      "VAR17 = recv ( VAR5 , VAR6 , VAR7 - 1 , 0 ) ;",
      "if ( VAR17 == VAR15 || VAR17 == 0 )",
      "VAR1 = atoi ( VAR6 ) ;",
      "while ( 0 ) ;",
      "if ( VAR18 )",
      "int VAR19 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "FUN4 ( VAR19 [ VAR1 ] ) ;"
    ],
    "pair_id": 2711,
    "xfg_id": 6861,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "35",
      "38",
      "40",
      "42",
      "44",
      "46",
      "47"
    ],
    "keyLine": "40",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        6
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-1000-c/testcases/000/234/252/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_16.c",
    "nodes-line": [
      "    while(1)\n",
      "            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));\n",
      "            structCharVoid->voidSecond = (void *)SRC_STR;\n",
      "            printWLine((wchar_t *)structCharVoid->voidSecond);\n",
      "            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));\n",
      "            printWLine((wchar_t *)structCharVoid->charFirst);\n",
      "            printWLine((wchar_t *)structCharVoid->voidSecond);\n"
    ],
    "nodes-line-sym": [
      "while ( 1 )",
      "VAR1 * VAR2 = ( VAR1 * ) malloc ( sizeof ( VAR1 ) ) ;",
      "VAR2 -> VAR3 = ( void * ) VAR4 ;",
      "FUN1 ( ( wchar_t * ) VAR2 -> VAR3 ) ;",
      "memcpy ( VAR2 -> VAR5 , VAR4 , sizeof ( * VAR2 ) ) ;",
      "FUN1 ( ( wchar_t * ) VAR2 -> VAR5 ) ;",
      "FUN1 ( ( wchar_t * ) VAR2 -> VAR3 ) ;"
    ],
    "pair_id": 2520,
    "xfg_id": 13008,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "69",
      "71",
      "73",
      "75",
      "77"
    ],
    "keyLine": "77",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ]
    ],
    "target": 0,
    "filePath": "119-6300-c/testcases/000/075/733/CWE126_Buffer_Overread__CWE129_fscanf_67b.c",
    "nodes-line": [
      "void CWE126_Buffer_Overread__CWE129_fscanf_67b_goodB2GSink(CWE126_Buffer_Overread__CWE129_fscanf_67_structType myStruct)\n",
      "    int data = myStruct.structFirst;\n",
      "        int buffer[10] = { 0 };\n",
      "        if (data >= 0 && data < (10))\n",
      "            printIntLine(buffer[data]);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( CWE126_Buffer_Overread__CWE129_fscanf_67_structType VAR1 )",
      "int VAR2 = VAR1 . VAR3 ;",
      "int VAR4 [ 10 ] = { 0 } ;",
      "if ( VAR2 >= 0 && VAR2 < ( 10 ) )",
      "FUN2 ( VAR4 [ VAR2 ] ) ;"
    ],
    "pair_id": 12740,
    "xfg_id": 6871,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "96",
      "97",
      "100",
      "104",
      "107"
    ],
    "keyLine": "107",
    "edges-No": [
      [
        0,
        4
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ]
    ],
    "target": 0,
    "filePath": "119-2200-c/testcases/000/232/721/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_08.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    if(staticReturnsTrue())\n",
      "        data = (wchar_t *)malloc((10+1)*sizeof(wchar_t));\n",
      "        wchar_t source[10+1] = SRC_STRING;\n",
      "        wcsncpy(data, source, wcslen(source) + 1);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "if ( FUN1 ( ) )",
      "VAR1 = ( wchar_t * ) malloc ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ;",
      "wchar_t VAR2 [ 10 + 1 ] = VAR3 ;",
      "wcsncpy ( VAR1 , VAR2 , wcslen ( VAR2 ) + 1 ) ;"
    ],
    "pair_id": 4321,
    "xfg_id": 8925,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "65",
      "68",
      "74",
      "56",
      "58",
      "59",
      "61"
    ],
    "keyLine": "74",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        3,
        2
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        5,
        0
      ],
      [
        5,
        6
      ],
      [
        6,
        2
      ],
      [
        6,
        1
      ]
    ],
    "target": 0,
    "filePath": "119-13000-c/testcases/000/000/838/basic-00181-ok.c",
    "nodes-line": [
      "    i = 0;\n",
      "  if (i > 9)\n",
      "  buf[i] = 'A';\n",
      "  char buf[10];\n",
      "  envvar = getenv(\"STRINGLEN_OK\");\n",
      "  if (envvar != NULL)\n",
      "    i = strlen(envvar);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = 0 ;",
      "if ( VAR1 > 9 )",
      "VAR2 [ VAR1 ] = '' ;",
      "char VAR2 [ 10 ] ;",
      "VAR3 = getenv ( \"\" ) ;",
      "if ( VAR3 != NULL )",
      "VAR1 = strlen ( VAR3 ) ;"
    ],
    "pair_id": 8477,
    "xfg_id": 6881,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "32",
      "33",
      "37",
      "38",
      "43",
      "44",
      "45"
    ],
    "keyLine": "32",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        1,
        1
      ]
    ],
    "target": 1,
    "filePath": "119-1200-c/testcases/000/233/988/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_07.c",
    "nodes-line": [
      "    data = (char *)malloc(100*sizeof(char));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "        memset(data, 'A', 100-1); /* fill with 'A's */\n",
      "        data[100-1] = '\\0'; /* null terminate */\n",
      "        strcat(dest, data);\n",
      "        printLine(data);\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR1 , '' , 100 - 1 ) ;",
      "VAR1 [ 100 - 1 ] = '' ;",
      "strcat ( VAR2 , VAR1 ) ;",
      "FUN2 ( VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 1591,
    "xfg_id": 8934,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "124",
      "130",
      "134",
      "142",
      "144",
      "148"
    ],
    "keyLine": "144",
    "edges-No": [
      [
        0,
        4
      ],
      [
        0,
        3
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        4
      ],
      [
        2,
        5
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ]
    ],
    "target": 0,
    "filePath": "119-2600-c/testcases/000/232/252/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_04.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(STATIC_CONST_TRUE)\n",
      "            int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( VAR2 )",
      "int * VAR3 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR3 [ VAR1 ] = 1 ;",
      "FUN1 ( VAR3 [ VAR4 ] ) ;"
    ],
    "pair_id": 5805,
    "xfg_id": 10985,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "66",
      "67",
      "69",
      "70",
      "71"
    ],
    "keyLine": "66",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        1,
        1
      ]
    ],
    "target": 0,
    "filePath": "119-1500-c/testcases/000/233/572/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_41.c",
    "nodes-line": [
      "    data = (char *)malloc(100*sizeof(char));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "    memset(data, 'A', 50-1); /* fill with 'A's */\n",
      "    data[50-1] = '\\0'; /* null terminate */\n",
      "    CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_41_goodG2BSink(data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR1 , '' , 50 - 1 ) ;",
      "VAR1 [ 50 - 1 ] = '' ;",
      "FUN2 ( VAR1 ) ;"
    ],
    "pair_id": 455,
    "xfg_id": 13033,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "197",
      "198",
      "207",
      "208",
      "209",
      "213",
      "220",
      "221",
      "229",
      "233",
      "237",
      "238",
      "243",
      "244",
      "251",
      "253",
      "279",
      "280",
      "281",
      "285",
      "292",
      "293",
      "301",
      "305",
      "309",
      "310",
      "315",
      "316",
      "323",
      "325",
      "342",
      "346",
      "353",
      "355",
      "359"
    ],
    "keyLine": "355",
    "edges-No": [
      [
        0,
        32
      ],
      [
        0,
        33
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        16
      ],
      [
        1,
        17
      ],
      [
        1,
        18
      ],
      [
        1,
        5
      ],
      [
        1,
        19
      ],
      [
        2,
        3
      ],
      [
        3,
        7
      ],
      [
        4,
        12
      ],
      [
        4,
        14
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        8
      ],
      [
        6,
        7
      ],
      [
        6,
        9
      ],
      [
        6,
        10
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ],
      [
        9,
        10
      ],
      [
        9,
        11
      ],
      [
        10,
        12
      ],
      [
        10,
        11
      ],
      [
        11,
        12
      ],
      [
        11,
        13
      ],
      [
        12,
        13
      ],
      [
        13,
        14
      ],
      [
        13,
        15
      ],
      [
        14,
        32
      ],
      [
        14,
        33
      ],
      [
        15,
        5
      ],
      [
        16,
        17
      ],
      [
        17,
        21
      ],
      [
        18,
        28
      ],
      [
        18,
        26
      ],
      [
        19,
        20
      ],
      [
        19,
        21
      ],
      [
        20,
        23
      ],
      [
        20,
        21
      ],
      [
        20,
        24
      ],
      [
        20,
        22
      ],
      [
        21,
        22
      ],
      [
        22,
        23
      ],
      [
        23,
        24
      ],
      [
        23,
        25
      ],
      [
        24,
        26
      ],
      [
        24,
        25
      ],
      [
        25,
        26
      ],
      [
        25,
        27
      ],
      [
        26,
        27
      ],
      [
        27,
        28
      ],
      [
        27,
        29
      ],
      [
        28,
        32
      ],
      [
        28,
        33
      ],
      [
        29,
        19
      ],
      [
        30,
        32
      ],
      [
        30,
        31
      ],
      [
        31,
        33
      ],
      [
        31,
        34
      ],
      [
        32,
        33
      ],
      [
        33,
        34
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/067/723/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_12.cpp",
    "nodes-line": [
      "    data = -1;\n",
      "    if(globalReturnsTrueOrFalse())\n",
      "            SOCKET listenSocket = INVALID_SOCKET;\n",
      "            SOCKET acceptSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (listenSocket == INVALID_SOCKET)\n",
      "                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "                acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "                if (acceptSocket == SOCKET_ERROR)\n",
      "                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "            SOCKET listenSocket = INVALID_SOCKET;\n",
      "            SOCKET acceptSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (listenSocket == INVALID_SOCKET)\n",
      "                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "                acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "                if (acceptSocket == SOCKET_ERROR)\n",
      "                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "    if(globalReturnsTrueOrFalse())\n",
      "            int * buffer = new int[10];\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( FUN1 ( ) )",
      "SOCKET VAR2 = VAR3 ;",
      "SOCKET VAR4 = VAR3 ;",
      "char VAR5 [ VAR6 ] ;",
      "if ( FUN2 ( FUN3 ( 2 , 2 ) , & VAR7 ) != VAR8 )",
      "VAR2 = socket ( VAR9 , VAR10 , VAR11 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( bind ( VAR2 , ( struct VAR12 * ) & VAR13 , sizeof ( VAR13 ) ) == VAR14 )",
      "if ( FUN4 ( VAR2 , VAR15 ) == VAR14 )",
      "VAR4 = accept ( VAR2 , NULL , NULL ) ;",
      "if ( VAR4 == VAR14 )",
      "VAR16 = recv ( VAR4 , VAR5 , VAR6 - 1 , 0 ) ;",
      "if ( VAR16 == VAR14 || VAR16 == 0 )",
      "VAR1 = atoi ( VAR5 ) ;",
      "while ( 0 ) ;",
      "SOCKET VAR2 = VAR3 ;",
      "SOCKET VAR4 = VAR3 ;",
      "char VAR5 [ VAR6 ] ;",
      "if ( FUN2 ( FUN3 ( 2 , 2 ) , & VAR7 ) != VAR8 )",
      "VAR2 = socket ( VAR9 , VAR10 , VAR11 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( bind ( VAR2 , ( struct VAR12 * ) & VAR13 , sizeof ( VAR13 ) ) == VAR14 )",
      "if ( FUN4 ( VAR2 , VAR15 ) == VAR14 )",
      "VAR4 = accept ( VAR2 , NULL , NULL ) ;",
      "if ( VAR4 == VAR14 )",
      "VAR16 = recv ( VAR4 , VAR5 , VAR6 - 1 , 0 ) ;",
      "if ( VAR16 == VAR14 || VAR16 == 0 )",
      "VAR1 = atoi ( VAR5 ) ;",
      "while ( 0 ) ;",
      "if ( FUN1 ( ) )",
      "int * VAR17 = new int [ 10 ] ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR17 [ VAR1 ] = 1 ;",
      "FUN5 ( VAR17 [ VAR18 ] ) ;"
    ],
    "pair_id": 314,
    "xfg_id": 13039,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "148",
      "149",
      "158",
      "159",
      "163",
      "170",
      "171",
      "179",
      "185",
      "186",
      "193",
      "195",
      "208",
      "216",
      "218",
      "220"
    ],
    "keyLine": "220",
    "edges-No": [
      [
        0,
        14
      ],
      [
        0,
        15
      ],
      [
        1,
        4
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        6
      ],
      [
        3,
        8
      ],
      [
        3,
        10
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        5,
        7
      ],
      [
        5,
        8
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ],
      [
        7,
        8
      ],
      [
        7,
        9
      ],
      [
        8,
        9
      ],
      [
        9,
        10
      ],
      [
        9,
        11
      ],
      [
        10,
        14
      ],
      [
        10,
        15
      ],
      [
        11,
        4
      ],
      [
        12,
        13
      ],
      [
        12,
        14
      ],
      [
        13,
        15
      ],
      [
        14,
        15
      ]
    ],
    "target": 0,
    "filePath": "119-5500-c/testcases/000/077/057/CWE127_Buffer_Underread__CWE839_connect_socket_08.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(staticReturnsTrue())\n",
      "            SOCKET connectSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (connectSocket == INVALID_SOCKET)\n",
      "                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "    if(staticReturnsFalse())\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                printIntLine(buffer[data]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( FUN1 ( ) )",
      "SOCKET VAR2 = VAR3 ;",
      "char VAR4 [ VAR5 ] ;",
      "if ( FUN2 ( FUN3 ( 2 , 2 ) , & VAR6 ) != VAR7 )",
      "VAR2 = socket ( VAR8 , VAR9 , VAR10 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( connect ( VAR2 , ( struct VAR11 * ) & VAR12 , sizeof ( VAR12 ) ) == VAR13 )",
      "VAR14 = recv ( VAR2 , VAR4 , VAR5 - 1 , 0 ) ;",
      "if ( VAR14 == VAR13 || VAR14 == 0 )",
      "VAR1 = atoi ( VAR4 ) ;",
      "while ( 0 ) ;",
      "if ( FUN4 ( ) )",
      "int VAR15 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "FUN5 ( VAR15 [ VAR1 ] ) ;"
    ],
    "pair_id": 10833,
    "xfg_id": 6896,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "103",
      "105",
      "108",
      "110",
      "112",
      "116"
    ],
    "keyLine": "112",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        4
      ],
      [
        1,
        3
      ],
      [
        2,
        4
      ],
      [
        2,
        5
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ]
    ],
    "target": 0,
    "filePath": "119-7400-c/testcases/000/073/733/CWE124_Buffer_Underwrite__CWE839_listen_socket_67b.c",
    "nodes-line": [
      "void CWE124_Buffer_Underwrite__CWE839_listen_socket_67b_goodB2GSink(CWE124_Buffer_Underwrite__CWE839_listen_socket_67_structType myStruct)\n",
      "    int data = myStruct.structFirst;\n",
      "        int buffer[10] = { 0 };\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( CWE124_Buffer_Underwrite__CWE839_listen_socket_67_structType VAR1 )",
      "int VAR2 = VAR1 . VAR3 ;",
      "int VAR4 [ 10 ] = { 0 } ;",
      "if ( VAR2 >= 0 && VAR2 < ( 10 ) )",
      "VAR4 [ VAR2 ] = 1 ;",
      "FUN2 ( VAR4 [ VAR5 ] ) ;"
    ],
    "pair_id": 13945,
    "xfg_id": 2804,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "407",
      "408",
      "415",
      "426",
      "434",
      "445",
      "447"
    ],
    "keyLine": "447",
    "edges-No": [
      [
        0,
        3
      ],
      [
        1,
        5
      ],
      [
        1,
        6
      ],
      [
        2,
        4
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ]
    ],
    "target": 0,
    "filePath": "119-12600-c/testcases/000/001/294/nxt-ok.c",
    "nodes-line": [
      "cp += n;\n",
      "n1 = strlen((char *)data) + 1;\n",
      "n2 = dlen - n;\n",
      "if ((*cp & 0x01) == 0) {\n",
      "if (n2 < 4 || n2 > 16) {\n",
      "if (n2 > sizeof data - n1) \n",
      "    printf(\"Want to copy %d bytes, but can only fit %d\\n\", n2, sizeof data - n1);\n"
    ],
    "nodes-line-sym": [
      "VAR1 += VAR2 ;",
      "VAR3 = strlen ( ( char * ) VAR4 ) + 1 ;",
      "VAR5 = VAR6 - VAR2 ;",
      "if ( ( * VAR1 & 0x01 ) == 0 ) {",
      "if ( VAR5 < 4 || VAR5 > 16 ) {",
      "if ( VAR5 > sizeof VAR4 - VAR3 )",
      "printf ( \"\" , VAR5 , sizeof VAR4 - VAR3 ) ;"
    ],
    "pair_id": 7814,
    "xfg_id": 13047,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "67",
      "68",
      "71",
      "73",
      "77",
      "79",
      "81",
      "83",
      "85"
    ],
    "keyLine": "85",
    "edges-No": [
      [
        0,
        6
      ],
      [
        0,
        5
      ],
      [
        1,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        6
      ],
      [
        2,
        5
      ],
      [
        3,
        3
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        6
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        8
      ],
      [
        7,
        7
      ],
      [
        7,
        8
      ]
    ],
    "target": 0,
    "filePath": "119-7000-c/testcases/000/074/206/CWE124_Buffer_Underwrite__CWE839_rand_17.c",
    "nodes-line": [
      "    data = -1;\n",
      "    for(i = 0; i < 1; i++)\n",
      "        data = RAND32();\n",
      "    for(k = 0; k < 1; k++)\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "for ( VAR2 = 0 ; VAR2 < 1 ; VAR2 ++ )",
      "VAR1 = FUN1 ( ) ;",
      "for ( VAR3 = 0 ; VAR3 < 1 ; VAR3 ++ )",
      "int VAR4 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR4 [ VAR1 ] = 1 ;",
      "for ( VAR2 = 0 ; VAR2 < 10 ; VAR2 ++ )",
      "FUN2 ( VAR4 [ VAR2 ] ) ;"
    ],
    "pair_id": 11273,
    "xfg_id": 8952,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "63",
      "64",
      "72",
      "74"
    ],
    "keyLine": "74",
    "edges-No": [
      [
        0,
        2
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ]
    ],
    "target": 0,
    "filePath": "119-1000-c/testcases/000/234/211/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    if(staticReturnsFalse())\n",
      "        data = (twoIntsStruct *)malloc(sizeof(*data));\n",
      "        data->intOne = 1;\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "if ( FUN1 ( ) )",
      "VAR1 = ( VAR2 * ) malloc ( sizeof ( * VAR1 ) ) ;",
      "VAR1 -> VAR3 = 1 ;"
    ],
    "pair_id": 8101,
    "xfg_id": 13057,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "32",
      "33",
      "37",
      "38",
      "43",
      "44"
    ],
    "keyLine": "32",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ]
    ],
    "target": 1,
    "filePath": "119-8900-c/testcases/000/067/118/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_07.c",
    "nodes-line": [
      "    char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    data = dataBuffer;\n",
      "        memset(data, 'A', 100-1); /* fill with 'A's */\n",
      "        data[100-1] = '\\0'; /* null terminate */\n",
      "        strcpy(dest, data);\n",
      "        printLine(data);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "VAR2 = VAR1 ;",
      "memset ( VAR2 , '' , 100 - 1 ) ;",
      "VAR2 [ 100 - 1 ] = '' ;",
      "strcpy ( VAR3 , VAR2 ) ;",
      "FUN2 ( VAR2 ) ;"
    ],
    "pair_id": 929,
    "xfg_id": 2818,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "33",
      "36",
      "37",
      "43",
      "44",
      "45"
    ],
    "keyLine": "36",
    "edges-No": [
      [
        0,
        0
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        5
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        2
      ],
      [
        2,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-2300-c/testcases/000/232/697/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_17.c",
    "nodes-line": [
      "    for(i = 0; i < 1; i++)\n",
      "        data = (wchar_t *)malloc(10*sizeof(wchar_t));\n",
      "        if (data == NULL) {exit(-1);}\n",
      "        memmove(data, source, (wcslen(source) + 1) * sizeof(wchar_t));\n",
      "        printWLine(data);\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "for ( VAR1 = 0 ; VAR1 < 1 ; VAR1 ++ )",
      "VAR2 = ( wchar_t * ) malloc ( 10 * sizeof ( wchar_t ) ) ;",
      "if ( VAR2 == NULL ) { FUN1 ( - 1 ) ; }",
      "memmove ( VAR2 , VAR3 , ( wcslen ( VAR3 ) + 1 ) * sizeof ( wchar_t ) ) ;",
      "FUN2 ( VAR2 ) ;",
      "free ( VAR2 ) ;"
    ],
    "pair_id": 12513,
    "xfg_id": 11012,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "67",
      "74",
      "78",
      "80",
      "82",
      "84",
      "86"
    ],
    "keyLine": "86",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        1,
        3
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        2,
        6
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        6
      ],
      [
        5,
        5
      ],
      [
        5,
        6
      ]
    ],
    "target": 0,
    "filePath": "119-7500-c/testcases/000/073/661/CWE124_Buffer_Underwrite__CWE839_fscanf_16.c",
    "nodes-line": [
      "    data = -1;\n",
      "    while(1)\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "while ( 1 )",
      "int VAR2 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR2 [ VAR1 ] = 1 ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "FUN1 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 1166,
    "xfg_id": 4874,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "29",
      "31",
      "34",
      "37",
      "39",
      "43",
      "45",
      "47",
      "49"
    ],
    "keyLine": "49",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        5
      ],
      [
        1,
        6
      ],
      [
        2,
        8
      ],
      [
        2,
        4
      ],
      [
        2,
        6
      ],
      [
        3,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        8
      ],
      [
        7,
        8
      ],
      [
        7,
        7
      ]
    ],
    "target": 1,
    "filePath": "119-2700-c/testcases/000/232/244/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c",
    "nodes-line": [
      "void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b_badSink(CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_structType myStruct)\n",
      "    int data = myStruct.structFirst;\n",
      "        int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "        for (i = 0; i < 10; i++)\n",
      "            buffer[i] = 0;\n",
      "        if (data >= 0)\n",
      "            buffer[data] = 1;\n",
      "            for(i = 0; i < 10; i++)\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67_structType VAR1 )",
      "int VAR2 = VAR1 . VAR3 ;",
      "int * VAR4 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "for ( VAR5 = 0 ; VAR5 < 10 ; VAR5 ++ )",
      "VAR4 [ VAR5 ] = 0 ;",
      "if ( VAR2 >= 0 )",
      "VAR4 [ VAR2 ] = 1 ;",
      "for ( VAR5 = 0 ; VAR5 < 10 ; VAR5 ++ )",
      "FUN2 ( VAR4 [ VAR5 ] ) ;"
    ],
    "pair_id": 76,
    "xfg_id": 11020,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "53",
      "54",
      "56",
      "57",
      "59",
      "60",
      "64",
      "66",
      "67"
    ],
    "keyLine": "53",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        1
      ],
      [
        1,
        1
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        5,
        8
      ]
    ],
    "target": 0,
    "filePath": "119-1600-c/testcases/000/233/504/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_31.c",
    "nodes-line": [
      "    data = (char *)malloc(100*sizeof(char));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "    memset(data, 'A', 50-1); /* fill with 'A's */\n",
      "    data[50-1] = '\\0'; /* null terminate */\n",
      "        char * dataCopy = data;\n",
      "        char * data = dataCopy;\n",
      "            memcpy(dest, data, strlen(data)*sizeof(char));\n",
      "            printLine(data);\n",
      "            free(data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR1 , '' , 50 - 1 ) ;",
      "VAR1 [ 50 - 1 ] = '' ;",
      "char * VAR2 = VAR1 ;",
      "char * VAR1 = VAR2 ;",
      "memcpy ( VAR3 , VAR1 , strlen ( VAR1 ) * sizeof ( char ) ) ;",
      "FUN2 ( VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 551,
    "xfg_id": 4892,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "27",
      "31",
      "32",
      "33",
      "34",
      "36",
      "49"
    ],
    "keyLine": "31",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        2,
        2
      ],
      [
        5,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-500-c/testcases/000/234/815/CWE127_Buffer_Underread__malloc_char_cpy_15.c",
    "nodes-line": [
      "    switch(6)\n",
      "        char * dataBuffer = (char *)malloc(100*sizeof(char));\n",
      "        if (dataBuffer == NULL) {exit(-1);}\n",
      "        memset(dataBuffer, 'A', 100-1);\n",
      "        dataBuffer[100-1] = '\\0';\n",
      "        data = dataBuffer - 8;\n",
      "        strcpy(dest, data);\n"
    ],
    "nodes-line-sym": [
      "switch ( 6 )",
      "char * VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR1 , '' , 100 - 1 ) ;",
      "VAR1 [ 100 - 1 ] = '' ;",
      "VAR2 = VAR1 - 8 ;",
      "strcpy ( VAR3 , VAR2 ) ;"
    ],
    "pair_id": 7001,
    "xfg_id": 2857,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "62",
      "65",
      "66",
      "70",
      "82",
      "83",
      "84",
      "85",
      "86",
      "87"
    ],
    "keyLine": "65",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        2
      ],
      [
        3,
        4
      ],
      [
        3,
        7
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        5,
        8
      ],
      [
        5,
        9
      ],
      [
        6,
        6
      ]
    ],
    "target": 0,
    "filePath": "119-2800-c/testcases/000/232/129/CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c",
    "nodes-line": [
      "    if(globalReturnsTrue())\n",
      "            wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));\n",
      "            if (dataBadBuffer == NULL) {exit(-1);}\n",
      "            data = (void *)dataBadBuffer;\n",
      "            size_t dataLen = wcslen((wchar_t *)data);\n",
      "            void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));\n",
      "            if (dest == NULL) {exit(-1);}\n",
      "            (void)wcscpy(dest, data);\n",
      "            printWLine((wchar_t *)dest);\n",
      "            free(dest);\n"
    ],
    "nodes-line-sym": [
      "if ( FUN1 ( ) )",
      "wchar_t * VAR1 = ( wchar_t * ) malloc ( 50 * sizeof ( wchar_t ) ) ;",
      "if ( VAR1 == NULL ) { FUN2 ( - 1 ) ; }",
      "VAR2 = ( void * ) VAR1 ;",
      "size_t VAR3 = wcslen ( ( wchar_t * ) VAR2 ) ;",
      "void * VAR4 = ( void * ) calloc ( VAR3 + 1 , sizeof ( wchar_t ) ) ;",
      "if ( VAR4 == NULL ) { FUN2 ( - 1 ) ; }",
      "( void ) wcscpy ( VAR4 , VAR2 ) ;",
      "FUN3 ( ( wchar_t * ) VAR4 ) ;",
      "free ( VAR4 ) ;"
    ],
    "pair_id": 2522,
    "xfg_id": 2864,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "129",
      "131",
      "133",
      "137",
      "110",
      "112",
      "114",
      "117",
      "125",
      "126"
    ],
    "keyLine": "133",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        2
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        7
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ],
      [
        9,
        1
      ],
      [
        9,
        2
      ]
    ],
    "target": 0,
    "filePath": "119-12400-c/testcases/000/062/584/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_31.c",
    "nodes-line": [
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n",
      "    data = -1;\n",
      "        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n",
      "        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n",
      "            data = atoi(inputBuffer);\n",
      "        int dataCopy = data;\n",
      "        int data = dataCopy;\n"
    ],
    "nodes-line-sym": [
      "int VAR1 [ 10 ] = { 0 } ;",
      "if ( VAR2 >= 0 && VAR2 < ( 10 ) )",
      "VAR1 [ VAR2 ] = 1 ;",
      "FUN1 ( VAR1 [ VAR3 ] ) ;",
      "VAR2 = - 1 ;",
      "char VAR4 [ VAR5 ] = \"\" ;",
      "if ( fgets ( VAR4 , VAR5 , stdin ) != NULL )",
      "VAR2 = atoi ( VAR4 ) ;",
      "int VAR6 = VAR2 ;",
      "int VAR2 = VAR6 ;"
    ],
    "pair_id": 6039,
    "xfg_id": 13116,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "27",
      "29",
      "31",
      "37",
      "38",
      "43",
      "44"
    ],
    "keyLine": "44",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-4200-c/testcases/000/149/203/UseAfterFree_container-bad.c",
    "nodes-line": [
      "str container;\n",
      "container.foo.a = 0;\n",
      "if ((container.foo.b = (char *)malloc(256*sizeof(char))) != NULL)\n",
      "str1 = malloc(65536); \n",
      " if (str1 == NULL)\n",
      "if (container.foo.b)\n",
      "{container.foo.b[0] = 'S'; printf(\"%s\\n\", container.foo.b);}/* FLAW */\n"
    ],
    "nodes-line-sym": [
      "str VAR1 ;",
      "VAR1 . VAR2 . VAR3 = 0 ;",
      "if ( ( VAR1 . VAR2 . VAR4 = ( char * ) malloc ( 256 * sizeof ( char ) ) ) != NULL )",
      "VAR5 = malloc ( 65536 ) ;",
      "if ( VAR5 == NULL )",
      "if ( VAR1 . VAR2 . VAR4 )",
      "{ VAR1 . VAR2 . VAR4 [ 0 ] = '' ; printf ( \"\" , VAR1 . VAR2 . VAR4 ) ; }"
    ],
    "pair_id": 5867,
    "xfg_id": 9027,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "36",
      "37",
      "39",
      "40",
      "42",
      "44"
    ],
    "keyLine": "36",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        1
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ]
    ],
    "target": 1,
    "filePath": "119-100-c/testcases/000/240/253/CWE415_Double_Free__malloc_free_wchar_t_34.c",
    "nodes-line": [
      "    data = (wchar_t *)malloc(100*sizeof(wchar_t));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "    free(data);\n",
      "    myUnion.unionFirst = data;\n",
      "        wchar_t * data = myUnion.unionSecond;\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "free ( VAR1 ) ;",
      "VAR2 . VAR3 = VAR1 ;",
      "wchar_t * VAR1 = VAR2 . VAR4 ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 12426,
    "xfg_id": 9029,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "36",
      "39",
      "40",
      "44"
    ],
    "keyLine": "44",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ]
    ],
    "target": 1,
    "filePath": "119-3300-c/testcases/000/231/464/CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_03.c",
    "nodes-line": [
      "    if(5==5)\n",
      "            charVoid structCharVoid;\n",
      "            structCharVoid.voidSecond = (void *)SRC_STR;\n",
      "            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));\n"
    ],
    "nodes-line-sym": [
      "if ( 5 == 5 )",
      "charVoid VAR1 ;",
      "VAR1 . VAR2 = ( void * ) VAR3 ;",
      "memmove ( VAR1 . VAR4 , VAR3 , sizeof ( VAR1 ) ) ;"
    ],
    "pair_id": 533,
    "xfg_id": 2887,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "60",
      "61",
      "63",
      "64",
      "65",
      "67",
      "71",
      "72",
      "73"
    ],
    "keyLine": "60",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        1
      ],
      [
        4,
        5
      ],
      [
        5,
        7
      ],
      [
        5,
        8
      ],
      [
        5,
        6
      ]
    ],
    "target": 0,
    "filePath": "119-1200-c/testcases/000/234/004/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_34.c",
    "nodes-line": [
      "    data = (char *)malloc(100*sizeof(char));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "    memset(data, 'A', 50-1); /* fill with 'A's */\n",
      "    data[50-1] = '\\0'; /* null terminate */\n",
      "    myUnion.unionFirst = data;\n",
      "        char * data = myUnion.unionSecond;\n",
      "            strcat(dest, data);\n",
      "            printLine(data);\n",
      "            free(data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR1 , '' , 50 - 1 ) ;",
      "VAR1 [ 50 - 1 ] = '' ;",
      "VAR2 . VAR3 = VAR1 ;",
      "char * VAR1 = VAR2 . VAR4 ;",
      "strcat ( VAR5 , VAR1 ) ;",
      "FUN2 ( VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 11825,
    "xfg_id": 11084,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "31",
      "32",
      "33",
      "41",
      "42"
    ],
    "keyLine": "31",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        5
      ],
      [
        1,
        4
      ],
      [
        2,
        2
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-1100-c/testcases/000/234/152/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c",
    "nodes-line": [
      "    switch(6)\n",
      "        data = (double *)malloc(sizeof(data));\n",
      "        if (data == NULL) {exit(-1);}\n",
      "        *data = 1.7E300;\n",
      "    printDoubleLine(*data);\n",
      "    free(data);\n"
    ],
    "nodes-line-sym": [
      "switch ( 6 )",
      "VAR1 = ( double * ) malloc ( sizeof ( VAR1 ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "* VAR1 = 1 . 7E300 ;",
      "FUN2 ( * VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 12558,
    "xfg_id": 2900,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "29",
      "32",
      "37",
      "40",
      "44"
    ],
    "keyLine": "44",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        5
      ],
      [
        3,
        5
      ],
      [
        4,
        5
      ]
    ],
    "target": 1,
    "filePath": "119-5200-c/testcases/000/077/373/CWE127_Buffer_Underread__char_alloca_memmove_12.c",
    "nodes-line": [
      "    char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    if(globalReturnsTrueOrFalse())\n",
      "        data = dataBuffer - 8;\n",
      "        data = dataBuffer;\n",
      "        char dest[100];\n",
      "        memmove(dest, data, 100*sizeof(char));\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "if ( FUN2 ( ) )",
      "VAR2 = VAR1 - 8 ;",
      "VAR2 = VAR1 ;",
      "char VAR3 [ 100 ] ;",
      "memmove ( VAR3 , VAR2 , 100 * sizeof ( char ) ) ;"
    ],
    "pair_id": 3515,
    "xfg_id": 9061,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "131",
      "113",
      "115",
      "118",
      "125",
      "127"
    ],
    "keyLine": "127",
    "edges-No": [
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        2,
        5
      ],
      [
        3,
        0
      ],
      [
        3,
        5
      ],
      [
        4,
        5
      ],
      [
        5,
        0
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/067/555/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_63b.cpp",
    "nodes-line": [
      "                printIntLine(buffer[i]);\n",
      "void goodB2GSink(int * dataPtr)\n",
      "    int data = *dataPtr;\n",
      "        int * buffer = new int[10];\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n"
    ],
    "nodes-line-sym": [
      "FUN1 ( VAR1 [ VAR2 ] ) ;",
      "void FUN2 ( int * VAR3 )",
      "int VAR4 = * VAR3 ;",
      "int * VAR1 = new int [ 10 ] ;",
      "if ( VAR4 >= 0 && VAR4 < ( 10 ) )",
      "VAR1 [ VAR4 ] = 1 ;"
    ],
    "pair_id": 4065,
    "xfg_id": 9063,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "27",
      "31",
      "32",
      "37",
      "38",
      "43",
      "45",
      "46"
    ],
    "keyLine": "26",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        0,
        7
      ],
      [
        0,
        8
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        1
      ]
    ],
    "target": 1,
    "filePath": "119-1500-c/testcases/000/233/592/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_12.c",
    "nodes-line": [
      "    data = (char *)malloc(100*sizeof(char));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "        memset(data, 'A', 100-1); /* fill with 'A's */\n",
      "        data[100-1] = '\\0'; /* null terminate */\n",
      "        memset(data, 'A', 50-1); /* fill with 'A's */\n",
      "        data[50-1] = '\\0'; /* null terminate */\n",
      "        strncpy(dest, data, strlen(data));\n",
      "        printLine(data);\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR1 , '' , 100 - 1 ) ;",
      "VAR1 [ 100 - 1 ] = '' ;",
      "memset ( VAR1 , '' , 50 - 1 ) ;",
      "VAR1 [ 50 - 1 ] = '' ;",
      "strncpy ( VAR2 , VAR1 , strlen ( VAR1 ) ) ;",
      "FUN2 ( VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 5295,
    "xfg_id": 13162,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "41",
      "44"
    ],
    "keyLine": "41",
    "edges-No": [
      [
        0,
        1
      ]
    ],
    "target": 1,
    "filePath": "119-12000-c/testcases/000/063/202/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_11.c",
    "nodes-line": [
      "        char source[10+1] = SRC_STRING;\n",
      "        strncpy(data, source, strlen(source) + 1);\n"
    ],
    "nodes-line-sym": [
      "char VAR1 [ 10 + 1 ] = VAR2 ;",
      "strncpy ( VAR3 , VAR1 , strlen ( VAR1 ) + 1 ) ;"
    ],
    "pair_id": 90,
    "xfg_id": 7027,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "30",
      "31",
      "35",
      "36"
    ],
    "keyLine": "30",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        2
      ],
      [
        2,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-1100-c/testcases/000/234/173/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_03.c",
    "nodes-line": [
      "    if(5==5)\n",
      "        data = (int64_t *)malloc(sizeof(data));\n",
      "        if (data == NULL) {exit(-1);}\n",
      "    printLongLongLine(*data);\n",
      "    free(data);\n"
    ],
    "nodes-line-sym": [
      "if ( 5 == 5 )",
      "VAR1 = ( VAR2 * ) malloc ( sizeof ( VAR1 ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "FUN2 ( * VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 6100,
    "xfg_id": 2936,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "32",
      "33",
      "37",
      "38",
      "43",
      "44",
      "49",
      "50",
      "51"
    ],
    "keyLine": "32",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        0,
        7
      ],
      [
        0,
        8
      ],
      [
        1,
        1
      ]
    ],
    "target": 1,
    "filePath": "119-1500-c/testcases/000/233/624/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_12.c",
    "nodes-line": [
      "    data = (char *)malloc(100*sizeof(char));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "        memset(data, 'A', 100-1); /* fill with 'A's */\n",
      "        data[100-1] = '\\0'; /* null terminate */\n",
      "        memset(data, 'A', 50-1); /* fill with 'A's */\n",
      "        data[50-1] = '\\0'; /* null terminate */\n",
      "        SNPRINTF(dest, strlen(data), \"%s\", data);\n",
      "        printLine(data);\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR1 , '' , 100 - 1 ) ;",
      "VAR1 [ 100 - 1 ] = '' ;",
      "memset ( VAR1 , '' , 50 - 1 ) ;",
      "VAR1 [ 50 - 1 ] = '' ;",
      "FUN2 ( VAR2 , strlen ( VAR1 ) , \"\" , VAR1 ) ;",
      "FUN3 ( VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 3226,
    "xfg_id": 13178,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "152",
      "162",
      "163",
      "164",
      "168",
      "175",
      "176",
      "184",
      "188",
      "192",
      "193",
      "198",
      "199",
      "206",
      "208",
      "228",
      "230",
      "232",
      "234",
      "236"
    ],
    "keyLine": "236",
    "edges-No": [
      [
        0,
        17
      ],
      [
        0,
        16
      ],
      [
        1,
        2
      ],
      [
        2,
        6
      ],
      [
        3,
        13
      ],
      [
        3,
        11
      ],
      [
        4,
        6
      ],
      [
        4,
        5
      ],
      [
        5,
        9
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        5,
        8
      ],
      [
        6,
        7
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ],
      [
        8,
        10
      ],
      [
        9,
        10
      ],
      [
        9,
        11
      ],
      [
        10,
        11
      ],
      [
        10,
        12
      ],
      [
        11,
        12
      ],
      [
        12,
        14
      ],
      [
        12,
        13
      ],
      [
        13,
        17
      ],
      [
        13,
        16
      ],
      [
        14,
        4
      ],
      [
        15,
        17
      ],
      [
        15,
        19
      ],
      [
        16,
        17
      ],
      [
        16,
        18
      ],
      [
        17,
        19
      ],
      [
        18,
        18
      ],
      [
        18,
        19
      ]
    ],
    "target": 0,
    "filePath": "119-12300-c/testcases/000/062/725/CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_18.c",
    "nodes-line": [
      "    data = -1;\n",
      "        SOCKET listenSocket = INVALID_SOCKET;\n",
      "        SOCKET acceptSocket = INVALID_SOCKET;\n",
      "        char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "            if (listenSocket == INVALID_SOCKET)\n",
      "            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "            acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "            if (acceptSocket == SOCKET_ERROR)\n",
      "            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data = atoi(inputBuffer);\n",
      "        while (0);\n",
      "        int buffer[10] = { 0 };\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "            for(i = 0; i < 10; i++)\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "SOCKET VAR2 = VAR3 ;",
      "SOCKET VAR4 = VAR3 ;",
      "char VAR5 [ VAR6 ] ;",
      "if ( FUN1 ( FUN2 ( 2 , 2 ) , & VAR7 ) != VAR8 )",
      "VAR2 = socket ( VAR9 , VAR10 , VAR11 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( bind ( VAR2 , ( struct VAR12 * ) & VAR13 , sizeof ( VAR13 ) ) == VAR14 )",
      "if ( FUN3 ( VAR2 , VAR15 ) == VAR14 )",
      "VAR4 = accept ( VAR2 , NULL , NULL ) ;",
      "if ( VAR4 == VAR14 )",
      "VAR16 = recv ( VAR4 , VAR5 , VAR6 - 1 , 0 ) ;",
      "if ( VAR16 == VAR14 || VAR16 == 0 )",
      "VAR1 = atoi ( VAR5 ) ;",
      "while ( 0 ) ;",
      "int VAR17 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR17 [ VAR1 ] = 1 ;",
      "for ( VAR18 = 0 ; VAR18 < 10 ; VAR18 ++ )",
      "FUN4 ( VAR17 [ VAR18 ] ) ;"
    ],
    "pair_id": 1568,
    "xfg_id": 11143,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "28",
      "31",
      "34",
      "36",
      "38",
      "40"
    ],
    "keyLine": "40",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        1,
        5
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        5
      ],
      [
        4,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-12300-c/testcases/000/062/756/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.c",
    "nodes-line": [
      "    data = RAND32();\n",
      "        int buffer[10] = { 0 };\n",
      "        if (data >= 0)\n",
      "            buffer[data] = 1;\n",
      "            for(i = 0; i < 10; i++)\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = FUN1 ( ) ;",
      "int VAR2 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 )",
      "VAR2 [ VAR1 ] = 1 ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "FUN2 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 3668,
    "xfg_id": 7049,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "36",
      "39",
      "40",
      "44"
    ],
    "keyLine": "44",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ]
    ],
    "target": 1,
    "filePath": "119-3300-c/testcases/000/231/459/CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c",
    "nodes-line": [
      "    while(1)\n",
      "            charVoid structCharVoid;\n",
      "            structCharVoid.voidSecond = (void *)SRC_STR;\n",
      "            memcpy(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));\n"
    ],
    "nodes-line-sym": [
      "while ( 1 )",
      "charVoid VAR1 ;",
      "VAR1 . VAR2 = ( void * ) VAR3 ;",
      "memcpy ( VAR1 . VAR4 , VAR3 , sizeof ( VAR1 ) ) ;"
    ],
    "pair_id": 4209,
    "xfg_id": 11165,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "162",
      "163",
      "172",
      "173",
      "174",
      "178",
      "185",
      "186",
      "194",
      "198",
      "202",
      "203",
      "208",
      "209",
      "216",
      "218",
      "235",
      "244",
      "251",
      "253",
      "257"
    ],
    "keyLine": "253",
    "edges-No": [
      [
        0,
        18
      ],
      [
        0,
        19
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        2,
        3
      ],
      [
        3,
        7
      ],
      [
        4,
        12
      ],
      [
        4,
        14
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        8
      ],
      [
        6,
        9
      ],
      [
        6,
        7
      ],
      [
        6,
        10
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ],
      [
        9,
        10
      ],
      [
        9,
        11
      ],
      [
        10,
        12
      ],
      [
        10,
        11
      ],
      [
        11,
        12
      ],
      [
        11,
        13
      ],
      [
        12,
        13
      ],
      [
        13,
        14
      ],
      [
        13,
        15
      ],
      [
        14,
        18
      ],
      [
        14,
        19
      ],
      [
        15,
        5
      ],
      [
        16,
        17
      ],
      [
        16,
        18
      ],
      [
        17,
        20
      ],
      [
        17,
        19
      ],
      [
        18,
        19
      ],
      [
        19,
        20
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/067/722/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_11.cpp",
    "nodes-line": [
      "    data = -1;\n",
      "    if(globalReturnsTrue())\n",
      "            SOCKET listenSocket = INVALID_SOCKET;\n",
      "            SOCKET acceptSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (listenSocket == INVALID_SOCKET)\n",
      "                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "                acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "                if (acceptSocket == SOCKET_ERROR)\n",
      "                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "    if(globalReturnsFalse())\n",
      "            int * buffer = new int[10];\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( FUN1 ( ) )",
      "SOCKET VAR2 = VAR3 ;",
      "SOCKET VAR4 = VAR3 ;",
      "char VAR5 [ VAR6 ] ;",
      "if ( FUN2 ( FUN3 ( 2 , 2 ) , & VAR7 ) != VAR8 )",
      "VAR2 = socket ( VAR9 , VAR10 , VAR11 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( bind ( VAR2 , ( struct VAR12 * ) & VAR13 , sizeof ( VAR13 ) ) == VAR14 )",
      "if ( FUN4 ( VAR2 , VAR15 ) == VAR14 )",
      "VAR4 = accept ( VAR2 , NULL , NULL ) ;",
      "if ( VAR4 == VAR14 )",
      "VAR16 = recv ( VAR4 , VAR5 , VAR6 - 1 , 0 ) ;",
      "if ( VAR16 == VAR14 || VAR16 == 0 )",
      "VAR1 = atoi ( VAR5 ) ;",
      "while ( 0 ) ;",
      "if ( FUN5 ( ) )",
      "int * VAR17 = new int [ 10 ] ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR17 [ VAR1 ] = 1 ;",
      "FUN6 ( VAR17 [ VAR18 ] ) ;"
    ],
    "pair_id": 8181,
    "xfg_id": 11176,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "66",
      "68",
      "70",
      "72",
      "74",
      "85"
    ],
    "keyLine": "85",
    "edges-No": [
      [
        0,
        3
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ]
    ],
    "target": 0,
    "filePath": "119-11200-c/testcases/000/064/093/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_34.c",
    "nodes-line": [
      "    CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_34_unionType myUnion;\n",
      "    char dataGoodBuffer[100];\n",
      "    data = dataGoodBuffer;\n",
      "    myUnion.unionFirst = data;\n",
      "        char * data = myUnion.unionSecond;\n",
      "            data[100-1] = '\\0'; /* Ensure the destination buffer is null terminated */\n"
    ],
    "nodes-line-sym": [
      "CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_34_unionType VAR1 ;",
      "char VAR2 [ 100 ] ;",
      "VAR3 = VAR2 ;",
      "VAR1 . VAR4 = VAR3 ;",
      "char * VAR3 = VAR1 . VAR5 ;",
      "VAR3 [ 100 - 1 ] = '' ;"
    ],
    "pair_id": 844,
    "xfg_id": 13231,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "197",
      "198",
      "207",
      "208",
      "209",
      "213",
      "220",
      "221",
      "229",
      "233",
      "237",
      "238",
      "243",
      "244",
      "251",
      "253",
      "279",
      "280",
      "281",
      "285",
      "292",
      "293",
      "301",
      "305",
      "309",
      "310",
      "315",
      "316",
      "323",
      "325",
      "342",
      "346",
      "349",
      "351",
      "354",
      "356",
      "358",
      "360"
    ],
    "keyLine": "360",
    "edges-No": [
      [
        0,
        34
      ],
      [
        0,
        35
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        16
      ],
      [
        1,
        17
      ],
      [
        1,
        18
      ],
      [
        1,
        5
      ],
      [
        1,
        19
      ],
      [
        2,
        3
      ],
      [
        3,
        7
      ],
      [
        4,
        12
      ],
      [
        4,
        14
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        8
      ],
      [
        6,
        7
      ],
      [
        6,
        9
      ],
      [
        6,
        10
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ],
      [
        9,
        10
      ],
      [
        9,
        11
      ],
      [
        10,
        12
      ],
      [
        10,
        11
      ],
      [
        11,
        12
      ],
      [
        11,
        13
      ],
      [
        12,
        13
      ],
      [
        13,
        14
      ],
      [
        13,
        15
      ],
      [
        14,
        34
      ],
      [
        14,
        35
      ],
      [
        15,
        5
      ],
      [
        16,
        17
      ],
      [
        17,
        21
      ],
      [
        18,
        28
      ],
      [
        18,
        26
      ],
      [
        19,
        20
      ],
      [
        19,
        21
      ],
      [
        20,
        23
      ],
      [
        20,
        21
      ],
      [
        20,
        24
      ],
      [
        20,
        22
      ],
      [
        21,
        22
      ],
      [
        22,
        23
      ],
      [
        23,
        24
      ],
      [
        23,
        25
      ],
      [
        24,
        26
      ],
      [
        24,
        25
      ],
      [
        25,
        26
      ],
      [
        25,
        27
      ],
      [
        26,
        27
      ],
      [
        27,
        28
      ],
      [
        27,
        29
      ],
      [
        28,
        34
      ],
      [
        28,
        35
      ],
      [
        29,
        19
      ],
      [
        30,
        34
      ],
      [
        30,
        31
      ],
      [
        30,
        32
      ],
      [
        31,
        35
      ],
      [
        31,
        33
      ],
      [
        31,
        37
      ],
      [
        32,
        32
      ],
      [
        32,
        33
      ],
      [
        33,
        37
      ],
      [
        34,
        35
      ],
      [
        34,
        36
      ],
      [
        35,
        37
      ],
      [
        36,
        37
      ],
      [
        36,
        36
      ]
    ],
    "target": 0,
    "filePath": "119-2600-c/testcases/000/232/344/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_12.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(globalReturnsTrueOrFalse())\n",
      "            SOCKET listenSocket = INVALID_SOCKET;\n",
      "            SOCKET acceptSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (listenSocket == INVALID_SOCKET)\n",
      "                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "                acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "                if (acceptSocket == SOCKET_ERROR)\n",
      "                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "            SOCKET listenSocket = INVALID_SOCKET;\n",
      "            SOCKET acceptSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (listenSocket == INVALID_SOCKET)\n",
      "                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "                acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "                if (acceptSocket == SOCKET_ERROR)\n",
      "                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "    if(globalReturnsTrueOrFalse())\n",
      "            int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "            for (i = 0; i < 10; i++)\n",
      "                buffer[i] = 0;\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( FUN1 ( ) )",
      "SOCKET VAR2 = VAR3 ;",
      "SOCKET VAR4 = VAR3 ;",
      "char VAR5 [ VAR6 ] ;",
      "if ( FUN2 ( FUN3 ( 2 , 2 ) , & VAR7 ) != VAR8 )",
      "VAR2 = socket ( VAR9 , VAR10 , VAR11 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( bind ( VAR2 , ( struct VAR12 * ) & VAR13 , sizeof ( VAR13 ) ) == VAR14 )",
      "if ( FUN4 ( VAR2 , VAR15 ) == VAR14 )",
      "VAR4 = accept ( VAR2 , NULL , NULL ) ;",
      "if ( VAR4 == VAR14 )",
      "VAR16 = recv ( VAR4 , VAR5 , VAR6 - 1 , 0 ) ;",
      "if ( VAR16 == VAR14 || VAR16 == 0 )",
      "VAR1 = atoi ( VAR5 ) ;",
      "while ( 0 ) ;",
      "SOCKET VAR2 = VAR3 ;",
      "SOCKET VAR4 = VAR3 ;",
      "char VAR5 [ VAR6 ] ;",
      "if ( FUN2 ( FUN3 ( 2 , 2 ) , & VAR7 ) != VAR8 )",
      "VAR2 = socket ( VAR9 , VAR10 , VAR11 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( bind ( VAR2 , ( struct VAR12 * ) & VAR13 , sizeof ( VAR13 ) ) == VAR14 )",
      "if ( FUN4 ( VAR2 , VAR15 ) == VAR14 )",
      "VAR4 = accept ( VAR2 , NULL , NULL ) ;",
      "if ( VAR4 == VAR14 )",
      "VAR16 = recv ( VAR4 , VAR5 , VAR6 - 1 , 0 ) ;",
      "if ( VAR16 == VAR14 || VAR16 == 0 )",
      "VAR1 = atoi ( VAR5 ) ;",
      "while ( 0 ) ;",
      "if ( FUN1 ( ) )",
      "int * VAR17 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "for ( VAR18 = 0 ; VAR18 < 10 ; VAR18 ++ )",
      "VAR17 [ VAR18 ] = 0 ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR17 [ VAR1 ] = 1 ;",
      "for ( VAR18 = 0 ; VAR18 < 10 ; VAR18 ++ )",
      "FUN5 ( VAR17 [ VAR18 ] ) ;"
    ],
    "pair_id": 7480,
    "xfg_id": 11187,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "49",
      "58",
      "59",
      "63",
      "65",
      "67",
      "70",
      "71",
      "73",
      "75",
      "76",
      "77",
      "78",
      "79",
      "81",
      "85",
      "86",
      "88",
      "91",
      "93",
      "95",
      "96",
      "98",
      "101",
      "103",
      "120",
      "122",
      "126",
      "135",
      "137",
      "141"
    ],
    "keyLine": "70",
    "edges-No": [
      [
        0,
        21
      ],
      [
        0,
        23
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        1,
        21
      ],
      [
        1,
        22
      ],
      [
        1,
        7
      ],
      [
        2,
        18
      ],
      [
        2,
        19
      ],
      [
        2,
        15
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        5,
        23
      ],
      [
        6,
        21
      ],
      [
        6,
        22
      ],
      [
        6,
        15
      ],
      [
        6,
        7
      ],
      [
        6,
        13
      ],
      [
        7,
        8
      ],
      [
        7,
        9
      ],
      [
        7,
        10
      ],
      [
        7,
        11
      ],
      [
        7,
        12
      ],
      [
        7,
        13
      ],
      [
        10,
        11
      ],
      [
        11,
        11
      ],
      [
        11,
        12
      ],
      [
        12,
        10
      ],
      [
        13,
        14
      ],
      [
        13,
        15
      ],
      [
        13,
        16
      ],
      [
        15,
        18
      ],
      [
        15,
        16
      ],
      [
        16,
        17
      ],
      [
        16,
        18
      ],
      [
        16,
        19
      ],
      [
        16,
        20
      ],
      [
        19,
        25
      ],
      [
        19,
        29
      ],
      [
        19,
        26
      ],
      [
        19,
        28
      ],
      [
        20,
        3
      ],
      [
        21,
        22
      ],
      [
        23,
        24
      ],
      [
        25,
        26
      ],
      [
        25,
        27
      ],
      [
        28,
        29
      ],
      [
        28,
        30
      ]
    ],
    "target": 1,
    "filePath": "119-5500-c/testcases/000/077/061/CWE127_Buffer_Underread__CWE839_connect_socket_12.c",
    "nodes-line": [
      "    if(globalReturnsTrueOrFalse())\n",
      "            SOCKET connectSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                    break;\n",
      "                wsaDataInit = 1;\n",
      "                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (connectSocket == INVALID_SOCKET)\n",
      "                    break;\n",
      "                memset(&service, 0, sizeof(service));\n",
      "                service.sin_family = AF_INET;\n",
      "                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n",
      "                service.sin_port = htons(TCP_PORT);\n",
      "                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                    break;\n",
      "                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                    break;\n",
      "                inputBuffer[recvResult] = '\\0';\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "            if (connectSocket != INVALID_SOCKET)\n",
      "                CLOSE_SOCKET(connectSocket);\n",
      "            if (wsaDataInit)\n",
      "                WSACleanup();\n",
      "            if (data < 10)\n",
      "                printIntLine(buffer[data]);\n",
      "                printLine(\"ERROR: Array index is too big.\");\n",
      "            if (data >= 0 && data < (10))\n",
      "                printIntLine(buffer[data]);\n",
      "                printLine(\"ERROR: Array index is out-of-bounds\");\n"
    ],
    "nodes-line-sym": [
      "if ( FUN1 ( ) )",
      "SOCKET VAR1 = VAR2 ;",
      "char VAR3 [ VAR4 ] ;",
      "if ( FUN2 ( FUN3 ( 2 , 2 ) , & VAR5 ) != VAR6 )",
      "break ;",
      "VAR7 = 1 ;",
      "VAR1 = socket ( VAR8 , VAR9 , VAR10 ) ;",
      "if ( VAR1 == VAR2 )",
      "break ;",
      "memset ( & VAR11 , 0 , sizeof ( VAR11 ) ) ;",
      "VAR11 . VAR12 = VAR8 ;",
      "VAR11 . VAR13 . VAR14 = inet_addr ( VAR15 ) ;",
      "VAR11 . VAR16 = FUN4 ( VAR17 ) ;",
      "if ( connect ( VAR1 , ( struct VAR18 * ) & VAR11 , sizeof ( VAR11 ) ) == VAR19 )",
      "break ;",
      "VAR20 = recv ( VAR1 , VAR3 , VAR4 - 1 , 0 ) ;",
      "if ( VAR20 == VAR19 || VAR20 == 0 )",
      "break ;",
      "VAR3 [ VAR20 ] = '' ;",
      "VAR21 = atoi ( VAR3 ) ;",
      "while ( 0 ) ;",
      "if ( VAR1 != VAR2 )",
      "FUN5 ( VAR1 ) ;",
      "if ( VAR7 )",
      "FUN6 ( ) ;",
      "if ( VAR21 < 10 )",
      "FUN7 ( VAR22 [ VAR21 ] ) ;",
      "FUN8 ( \"\" ) ;",
      "if ( VAR21 >= 0 && VAR21 < ( 10 ) )",
      "FUN7 ( VAR22 [ VAR21 ] ) ;",
      "FUN8 ( \"\" ) ;"
    ],
    "pair_id": 11989,
    "xfg_id": 11195,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "27",
      "31",
      "32",
      "37",
      "38",
      "43",
      "45",
      "46"
    ],
    "keyLine": "26",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        0,
        7
      ],
      [
        0,
        8
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        1
      ]
    ],
    "target": 1,
    "filePath": "119-1600-c/testcases/000/233/528/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_12.c",
    "nodes-line": [
      "    data = (char *)malloc(100*sizeof(char));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "        memset(data, 'A', 100-1); /* fill with 'A's */\n",
      "        data[100-1] = '\\0'; /* null terminate */\n",
      "        memset(data, 'A', 50-1); /* fill with 'A's */\n",
      "        data[50-1] = '\\0'; /* null terminate */\n",
      "        memmove(dest, data, strlen(data)*sizeof(char));\n",
      "        printLine(data);\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR1 , '' , 100 - 1 ) ;",
      "VAR1 [ 100 - 1 ] = '' ;",
      "memset ( VAR1 , '' , 50 - 1 ) ;",
      "VAR1 [ 50 - 1 ] = '' ;",
      "memmove ( VAR2 , VAR1 , strlen ( VAR1 ) * sizeof ( char ) ) ;",
      "FUN2 ( VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 559,
    "xfg_id": 7103,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "29",
      "30",
      "34",
      "44"
    ],
    "keyLine": "34",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        3
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/069/311/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_loop_16.cpp",
    "nodes-line": [
      "    data = new char[100];\n",
      "    while(1)\n",
      "        data[100-1] = '\\0'; /* null terminate */\n",
      "            dest[i] = data[i];\n"
    ],
    "nodes-line-sym": [
      "VAR1 = new char [ 100 ] ;",
      "while ( 1 )",
      "VAR1 [ 100 - 1 ] = '' ;",
      "VAR2 [ VAR3 ] = VAR1 [ VAR3 ] ;"
    ],
    "pair_id": 3702,
    "xfg_id": 9153,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "51",
      "53",
      "62",
      "63",
      "64",
      "65"
    ],
    "keyLine": "62",
    "edges-No": [
      [
        0,
        4
      ],
      [
        0,
        2
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ]
    ],
    "target": 0,
    "filePath": "119-3300-c/testcases/000/231/421/CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c",
    "nodes-line": [
      "void CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G1Sink(void * data)\n",
      "    if(CWE121_Stack_Based_Buffer_Overflow__CWE135_22_goodB2G1Global)\n",
      "            size_t dataLen = wcslen((wchar_t *)data);\n",
      "            void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));\n",
      "            (void)wcscpy(dest, data);\n",
      "            printWLine((wchar_t *)dest);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( void * VAR1 )",
      "if ( VAR2 )",
      "size_t VAR3 = wcslen ( ( wchar_t * ) VAR1 ) ;",
      "void * VAR4 = ( void * ) FUN2 ( ( VAR3 + 1 ) * sizeof ( wchar_t ) ) ;",
      "( void ) wcscpy ( VAR4 , VAR1 ) ;",
      "FUN3 ( ( wchar_t * ) VAR4 ) ;"
    ],
    "pair_id": 2660,
    "xfg_id": 11207,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "30",
      "31",
      "33",
      "37",
      "41",
      "44"
    ],
    "keyLine": "44",
    "edges-No": [
      [
        0,
        5
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ],
      [
        3,
        5
      ],
      [
        4,
        5
      ]
    ],
    "target": 1,
    "filePath": "119-11800-c/testcases/000/063/394/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_03.c",
    "nodes-line": [
      "    char * data;\n",
      "    char dataBadBuffer[10];\n",
      "    if(5==5)\n",
      "        data = dataBadBuffer;\n",
      "        char source[10+1] = SRC_STRING;\n",
      "        strncpy(data, source, strlen(source) + 1);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 ;",
      "char VAR2 [ 10 ] ;",
      "if ( 5 == 5 )",
      "VAR1 = VAR2 ;",
      "char VAR3 [ 10 + 1 ] = VAR4 ;",
      "strncpy ( VAR1 , VAR3 , strlen ( VAR3 ) + 1 ) ;"
    ],
    "pair_id": 11547,
    "xfg_id": 11219,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "32",
      "35",
      "36",
      "42",
      "43",
      "44"
    ],
    "keyLine": "35",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        2
      ],
      [
        1,
        5
      ],
      [
        2,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-2400-c/testcases/000/232/484/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c",
    "nodes-line": [
      "    if(1)\n",
      "        data = (char *)malloc(10*sizeof(char));\n",
      "        if (data == NULL) {exit(-1);}\n",
      "        memcpy(data, source, (strlen(source) + 1) * sizeof(char));\n",
      "        printLine(data);\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "if ( 1 )",
      "VAR1 = ( char * ) malloc ( 10 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memcpy ( VAR1 , VAR2 , ( strlen ( VAR2 ) + 1 ) * sizeof ( char ) ) ;",
      "FUN2 ( VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 2877,
    "xfg_id": 9187,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "76",
      "77",
      "78"
    ],
    "keyLine": "76",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        1
      ]
    ],
    "target": 0,
    "filePath": "119-2300-c/testcases/000/232/610/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_45.c",
    "nodes-line": [
      "    data = (wchar_t *)malloc((10+1)*sizeof(wchar_t));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "    CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_45_goodG2BData = data;\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( wchar_t * ) malloc ( ( 10 + 1 ) * sizeof ( wchar_t ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "VAR2 = VAR1 ;"
    ],
    "pair_id": 922,
    "xfg_id": 9190,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "28",
      "30",
      "34"
    ],
    "keyLine": "34",
    "edges-No": [
      [
        0,
        2
      ],
      [
        1,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-2200-c/testcases/000/232/808/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_45.c",
    "nodes-line": [
      "    char * data = CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_45_badData;\n",
      "        char source[100];\n",
      "        memcpy(data, source, 100*sizeof(char));\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = VAR2 ;",
      "char VAR3 [ 100 ] ;",
      "memcpy ( VAR1 , VAR3 , 100 * sizeof ( char ) ) ;"
    ],
    "pair_id": 345,
    "xfg_id": 5100,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "59",
      "60",
      "64",
      "65",
      "70",
      "71",
      "76",
      "78",
      "79"
    ],
    "keyLine": "59",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        0,
        7
      ],
      [
        0,
        8
      ],
      [
        0,
        1
      ],
      [
        1,
        1
      ]
    ],
    "target": 0,
    "filePath": "119-1500-c/testcases/000/233/592/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_12.c",
    "nodes-line": [
      "    data = (char *)malloc(100*sizeof(char));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "        memset(data, 'A', 50-1); /* fill with 'A's */\n",
      "        data[50-1] = '\\0'; /* null terminate */\n",
      "        memset(data, 'A', 50-1); /* fill with 'A's */\n",
      "        data[50-1] = '\\0'; /* null terminate */\n",
      "        strncpy(dest, data, strlen(data));\n",
      "        printLine(data);\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR1 , '' , 50 - 1 ) ;",
      "VAR1 [ 50 - 1 ] = '' ;",
      "memset ( VAR1 , '' , 50 - 1 ) ;",
      "VAR1 [ 50 - 1 ] = '' ;",
      "strncpy ( VAR2 , VAR1 , strlen ( VAR1 ) ) ;",
      "FUN2 ( VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 5295,
    "xfg_id": 9200,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "102",
      "103",
      "107",
      "109",
      "113",
      "116",
      "118",
      "122"
    ],
    "keyLine": "118",
    "edges-No": [
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        1,
        2
      ],
      [
        1,
        1
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        3
      ],
      [
        4,
        7
      ],
      [
        4,
        6
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-12400-c/testcases/000/062/676/CWE121_Stack_Based_Buffer_Overflow__CWE129_large_17.c",
    "nodes-line": [
      "    data = -1;\n",
      "    for(h = 0; h < 1; h++)\n",
      "        data = 7;\n",
      "    for(j = 0; j < 1; j++)\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0)\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "for ( VAR2 = 0 ; VAR2 < 1 ; VAR2 ++ )",
      "VAR1 = 7 ;",
      "for ( VAR3 = 0 ; VAR3 < 1 ; VAR3 ++ )",
      "int VAR4 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 )",
      "VAR4 [ VAR1 ] = 1 ;",
      "FUN1 ( VAR4 [ VAR5 ] ) ;"
    ],
    "pair_id": 5110,
    "xfg_id": 5105,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "97",
      "100",
      "102",
      "105",
      "112",
      "114",
      "118"
    ],
    "keyLine": "114",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        2,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/067/652/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_fscanf_64b.cpp",
    "nodes-line": [
      "void goodB2GSink(void * dataVoidPtr)\n",
      "    int * dataPtr = (int *)dataVoidPtr;\n",
      "    int data = (*dataPtr);\n",
      "        int * buffer = new int[10];\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( void * VAR1 )",
      "int * VAR2 = ( int * ) VAR1 ;",
      "int VAR3 = ( * VAR2 ) ;",
      "int * VAR4 = new int [ 10 ] ;",
      "if ( VAR3 >= 0 && VAR3 < ( 10 ) )",
      "VAR4 [ VAR3 ] = 1 ;",
      "FUN2 ( VAR4 [ VAR5 ] ) ;"
    ],
    "pair_id": 1556,
    "xfg_id": 11253,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "184",
      "185",
      "194",
      "195",
      "199",
      "206",
      "207",
      "215",
      "221",
      "222",
      "229",
      "231",
      "253",
      "254",
      "258",
      "265",
      "266",
      "274",
      "280",
      "281",
      "288",
      "290",
      "303",
      "307",
      "309",
      "311",
      "314",
      "316",
      "318",
      "320"
    ],
    "keyLine": "320",
    "edges-No": [
      [
        0,
        26
      ],
      [
        0,
        27
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        14
      ],
      [
        1,
        4
      ],
      [
        1,
        12
      ],
      [
        1,
        13
      ],
      [
        2,
        6
      ],
      [
        3,
        10
      ],
      [
        3,
        8
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        5,
        7
      ],
      [
        5,
        8
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ],
      [
        7,
        8
      ],
      [
        7,
        9
      ],
      [
        8,
        9
      ],
      [
        9,
        10
      ],
      [
        9,
        11
      ],
      [
        10,
        26
      ],
      [
        10,
        27
      ],
      [
        11,
        4
      ],
      [
        12,
        16
      ],
      [
        13,
        18
      ],
      [
        13,
        20
      ],
      [
        14,
        15
      ],
      [
        14,
        16
      ],
      [
        15,
        17
      ],
      [
        15,
        18
      ],
      [
        15,
        16
      ],
      [
        16,
        17
      ],
      [
        17,
        18
      ],
      [
        17,
        19
      ],
      [
        18,
        19
      ],
      [
        19,
        20
      ],
      [
        19,
        21
      ],
      [
        20,
        26
      ],
      [
        20,
        27
      ],
      [
        21,
        14
      ],
      [
        22,
        23
      ],
      [
        22,
        24
      ],
      [
        22,
        26
      ],
      [
        23,
        29
      ],
      [
        23,
        27
      ],
      [
        23,
        25
      ],
      [
        24,
        24
      ],
      [
        24,
        25
      ],
      [
        25,
        29
      ],
      [
        26,
        27
      ],
      [
        26,
        28
      ],
      [
        27,
        29
      ],
      [
        28,
        29
      ],
      [
        28,
        28
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/067/531/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_12.cpp",
    "nodes-line": [
      "    data = -1;\n",
      "    if(globalReturnsTrueOrFalse())\n",
      "            SOCKET connectSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (connectSocket == INVALID_SOCKET)\n",
      "                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "            SOCKET connectSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (connectSocket == INVALID_SOCKET)\n",
      "                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "    if(globalReturnsTrueOrFalse())\n",
      "            int * buffer = new int[10];\n",
      "            for (i = 0; i < 10; i++)\n",
      "                buffer[i] = 0;\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( FUN1 ( ) )",
      "SOCKET VAR2 = VAR3 ;",
      "char VAR4 [ VAR5 ] ;",
      "if ( FUN2 ( FUN3 ( 2 , 2 ) , & VAR6 ) != VAR7 )",
      "VAR2 = socket ( VAR8 , VAR9 , VAR10 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( connect ( VAR2 , ( struct VAR11 * ) & VAR12 , sizeof ( VAR12 ) ) == VAR13 )",
      "VAR14 = recv ( VAR2 , VAR4 , VAR5 - 1 , 0 ) ;",
      "if ( VAR14 == VAR13 || VAR14 == 0 )",
      "VAR1 = atoi ( VAR4 ) ;",
      "while ( 0 ) ;",
      "SOCKET VAR2 = VAR3 ;",
      "char VAR4 [ VAR5 ] ;",
      "if ( FUN2 ( FUN3 ( 2 , 2 ) , & VAR6 ) != VAR7 )",
      "VAR2 = socket ( VAR8 , VAR9 , VAR10 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( connect ( VAR2 , ( struct VAR11 * ) & VAR12 , sizeof ( VAR12 ) ) == VAR13 )",
      "VAR14 = recv ( VAR2 , VAR4 , VAR5 - 1 , 0 ) ;",
      "if ( VAR14 == VAR13 || VAR14 == 0 )",
      "VAR1 = atoi ( VAR4 ) ;",
      "while ( 0 ) ;",
      "if ( FUN1 ( ) )",
      "int * VAR15 = new int [ 10 ] ;",
      "for ( VAR16 = 0 ; VAR16 < 10 ; VAR16 ++ )",
      "VAR15 [ VAR16 ] = 0 ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR15 [ VAR1 ] = 1 ;",
      "for ( VAR16 = 0 ; VAR16 < 10 ; VAR16 ++ )",
      "FUN4 ( VAR15 [ VAR16 ] ) ;"
    ],
    "pair_id": 12159,
    "xfg_id": 3061,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "35",
      "36",
      "39",
      "42",
      "44",
      "47",
      "49"
    ],
    "keyLine": "49",
    "edges-No": [
      [
        0,
        6
      ],
      [
        1,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        6
      ],
      [
        3,
        6
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        5,
        5
      ],
      [
        6,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/068/112/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_wchar_t_loop_17.cpp",
    "nodes-line": [
      "    data = NULL;\n",
      "    for(i = 0; i < 1; i++)\n",
      "        data = new wchar_t[10];\n",
      "        wchar_t source[10+1] = SRC_STRING;\n",
      "        sourceLen = wcslen(source);\n",
      "        for (i = 0; i < sourceLen + 1; i++)\n",
      "            data[i] = source[i];\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "for ( VAR2 = 0 ; VAR2 < 1 ; VAR2 ++ )",
      "VAR1 = new wchar_t [ 10 ] ;",
      "wchar_t VAR3 [ 10 + 1 ] = VAR4 ;",
      "VAR5 = wcslen ( VAR3 ) ;",
      "for ( VAR2 = 0 ; VAR2 < VAR5 + 1 ; VAR2 ++ )",
      "VAR1 [ VAR2 ] = VAR3 [ VAR2 ] ;"
    ],
    "pair_id": 13083,
    "xfg_id": 11264,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "74",
      "81",
      "85",
      "93",
      "95",
      "99"
    ],
    "keyLine": "95",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        5
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ]
    ],
    "target": 0,
    "filePath": "119-2600-c/testcases/000/232/264/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c",
    "nodes-line": [
      "    data = -1;\n",
      "    while(1)\n",
      "            int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "while ( 1 )",
      "int * VAR2 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR2 [ VAR1 ] = 1 ;",
      "FUN1 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 5004,
    "xfg_id": 13313,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "90",
      "92",
      "95",
      "97"
    ],
    "keyLine": "97",
    "edges-No": [
      [
        0,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ]
    ],
    "target": 0,
    "filePath": "119-1000-c/testcases/000/234/222/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_21.c",
    "nodes-line": [
      "static twoIntsStruct * goodG2B2Source(twoIntsStruct * data)\n",
      "    if(goodG2B2Static)\n",
      "        data = (twoIntsStruct *)malloc(sizeof(*data));\n",
      "        data->intOne = 1;\n"
    ],
    "nodes-line-sym": [
      "static VAR1 * FUN1 ( VAR1 * VAR2 )",
      "if ( VAR3 )",
      "VAR2 = ( VAR1 * ) malloc ( sizeof ( * VAR2 ) ) ;",
      "VAR2 -> VAR4 = 1 ;"
    ],
    "pair_id": 1084,
    "xfg_id": 5120,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "174",
      "175",
      "176",
      "180",
      "187",
      "188",
      "196",
      "200",
      "204",
      "205",
      "210",
      "211",
      "218",
      "220",
      "239",
      "241",
      "245"
    ],
    "keyLine": "218",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        5
      ],
      [
        2,
        12
      ],
      [
        2,
        10
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        4,
        7
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ],
      [
        7,
        8
      ],
      [
        7,
        9
      ],
      [
        8,
        10
      ],
      [
        8,
        9
      ],
      [
        9,
        10
      ],
      [
        9,
        11
      ],
      [
        10,
        11
      ],
      [
        11,
        12
      ],
      [
        11,
        13
      ],
      [
        12,
        15
      ],
      [
        12,
        14
      ],
      [
        13,
        3
      ],
      [
        14,
        15
      ],
      [
        14,
        16
      ]
    ],
    "target": 0,
    "filePath": "119-5400-c/testcases/000/077/194/CWE127_Buffer_Underread__CWE839_listen_socket_01.c",
    "nodes-line": [
      "        SOCKET listenSocket = INVALID_SOCKET;\n",
      "        SOCKET acceptSocket = INVALID_SOCKET;\n",
      "        char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "            if (listenSocket == INVALID_SOCKET)\n",
      "            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "            acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "            if (acceptSocket == SOCKET_ERROR)\n",
      "            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data = atoi(inputBuffer);\n",
      "        while (0);\n",
      "        if (data >= 0 && data < (10))\n",
      "            printIntLine(buffer[data]);\n",
      "            printLine(\"ERROR: Array index is out-of-bounds\");\n"
    ],
    "nodes-line-sym": [
      "SOCKET VAR1 = VAR2 ;",
      "SOCKET VAR3 = VAR2 ;",
      "char VAR4 [ VAR5 ] ;",
      "if ( FUN1 ( FUN2 ( 2 , 2 ) , & VAR6 ) != VAR7 )",
      "VAR1 = socket ( VAR8 , VAR9 , VAR10 ) ;",
      "if ( VAR1 == VAR2 )",
      "if ( bind ( VAR1 , ( struct VAR11 * ) & VAR12 , sizeof ( VAR12 ) ) == VAR13 )",
      "if ( FUN3 ( VAR1 , VAR14 ) == VAR13 )",
      "VAR3 = accept ( VAR1 , NULL , NULL ) ;",
      "if ( VAR3 == VAR13 )",
      "VAR15 = recv ( VAR3 , VAR4 , VAR5 - 1 , 0 ) ;",
      "if ( VAR15 == VAR13 || VAR15 == 0 )",
      "VAR16 = atoi ( VAR4 ) ;",
      "while ( 0 ) ;",
      "if ( VAR16 >= 0 && VAR16 < ( 10 ) )",
      "FUN4 ( VAR17 [ VAR16 ] ) ;",
      "FUN5 ( \"\" ) ;"
    ],
    "pair_id": 84,
    "xfg_id": 11272,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "183",
      "184",
      "193",
      "194",
      "195",
      "199",
      "206",
      "207",
      "215",
      "219",
      "223",
      "224",
      "229",
      "230",
      "237",
      "239",
      "265",
      "266",
      "267",
      "271",
      "278",
      "279",
      "287",
      "291",
      "295",
      "296",
      "301",
      "302",
      "309",
      "311",
      "328",
      "353",
      "355",
      "357",
      "359",
      "361"
    ],
    "keyLine": "361",
    "edges-No": [
      [
        0,
        32
      ],
      [
        0,
        33
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        16
      ],
      [
        1,
        17
      ],
      [
        1,
        18
      ],
      [
        1,
        5
      ],
      [
        1,
        19
      ],
      [
        2,
        3
      ],
      [
        3,
        7
      ],
      [
        4,
        14
      ],
      [
        4,
        12
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        10
      ],
      [
        6,
        8
      ],
      [
        6,
        9
      ],
      [
        6,
        7
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ],
      [
        9,
        11
      ],
      [
        9,
        10
      ],
      [
        10,
        11
      ],
      [
        10,
        12
      ],
      [
        11,
        12
      ],
      [
        11,
        13
      ],
      [
        12,
        13
      ],
      [
        13,
        14
      ],
      [
        13,
        15
      ],
      [
        14,
        32
      ],
      [
        14,
        33
      ],
      [
        15,
        5
      ],
      [
        16,
        17
      ],
      [
        17,
        21
      ],
      [
        18,
        28
      ],
      [
        18,
        26
      ],
      [
        19,
        20
      ],
      [
        19,
        21
      ],
      [
        20,
        23
      ],
      [
        20,
        24
      ],
      [
        20,
        21
      ],
      [
        20,
        22
      ],
      [
        21,
        22
      ],
      [
        22,
        23
      ],
      [
        23,
        25
      ],
      [
        23,
        24
      ],
      [
        24,
        25
      ],
      [
        24,
        26
      ],
      [
        25,
        26
      ],
      [
        25,
        27
      ],
      [
        26,
        27
      ],
      [
        27,
        28
      ],
      [
        27,
        29
      ],
      [
        28,
        32
      ],
      [
        28,
        33
      ],
      [
        29,
        19
      ],
      [
        30,
        31
      ],
      [
        30,
        32
      ],
      [
        31,
        35
      ],
      [
        31,
        33
      ],
      [
        32,
        33
      ],
      [
        32,
        34
      ],
      [
        33,
        35
      ],
      [
        34,
        35
      ],
      [
        34,
        34
      ]
    ],
    "target": 0,
    "filePath": "119-7400-c/testcases/000/073/705/CWE124_Buffer_Underwrite__CWE839_listen_socket_12.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(globalReturnsTrueOrFalse())\n",
      "            SOCKET listenSocket = INVALID_SOCKET;\n",
      "            SOCKET acceptSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (listenSocket == INVALID_SOCKET)\n",
      "                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "                acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "                if (acceptSocket == SOCKET_ERROR)\n",
      "                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "            SOCKET listenSocket = INVALID_SOCKET;\n",
      "            SOCKET acceptSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (listenSocket == INVALID_SOCKET)\n",
      "                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "                acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "                if (acceptSocket == SOCKET_ERROR)\n",
      "                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "    if(globalReturnsTrueOrFalse())\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( FUN1 ( ) )",
      "SOCKET VAR2 = VAR3 ;",
      "SOCKET VAR4 = VAR3 ;",
      "char VAR5 [ VAR6 ] ;",
      "if ( FUN2 ( FUN3 ( 2 , 2 ) , & VAR7 ) != VAR8 )",
      "VAR2 = socket ( VAR9 , VAR10 , VAR11 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( bind ( VAR2 , ( struct VAR12 * ) & VAR13 , sizeof ( VAR13 ) ) == VAR14 )",
      "if ( FUN4 ( VAR2 , VAR15 ) == VAR14 )",
      "VAR4 = accept ( VAR2 , NULL , NULL ) ;",
      "if ( VAR4 == VAR14 )",
      "VAR16 = recv ( VAR4 , VAR5 , VAR6 - 1 , 0 ) ;",
      "if ( VAR16 == VAR14 || VAR16 == 0 )",
      "VAR1 = atoi ( VAR5 ) ;",
      "while ( 0 ) ;",
      "SOCKET VAR2 = VAR3 ;",
      "SOCKET VAR4 = VAR3 ;",
      "char VAR5 [ VAR6 ] ;",
      "if ( FUN2 ( FUN3 ( 2 , 2 ) , & VAR7 ) != VAR8 )",
      "VAR2 = socket ( VAR9 , VAR10 , VAR11 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( bind ( VAR2 , ( struct VAR12 * ) & VAR13 , sizeof ( VAR13 ) ) == VAR14 )",
      "if ( FUN4 ( VAR2 , VAR15 ) == VAR14 )",
      "VAR4 = accept ( VAR2 , NULL , NULL ) ;",
      "if ( VAR4 == VAR14 )",
      "VAR16 = recv ( VAR4 , VAR5 , VAR6 - 1 , 0 ) ;",
      "if ( VAR16 == VAR14 || VAR16 == 0 )",
      "VAR1 = atoi ( VAR5 ) ;",
      "while ( 0 ) ;",
      "if ( FUN1 ( ) )",
      "int VAR17 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR17 [ VAR1 ] = 1 ;",
      "for ( VAR18 = 0 ; VAR18 < 10 ; VAR18 ++ )",
      "FUN5 ( VAR17 [ VAR18 ] ) ;"
    ],
    "pair_id": 2559,
    "xfg_id": 5136,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "64",
      "67",
      "68",
      "72",
      "80",
      "81",
      "82",
      "83",
      "84",
      "85"
    ],
    "keyLine": "67",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        2
      ],
      [
        2,
        2
      ],
      [
        3,
        4
      ],
      [
        3,
        7
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        5,
        8
      ],
      [
        5,
        9
      ],
      [
        6,
        6
      ]
    ],
    "target": 0,
    "filePath": "119-2700-c/testcases/000/232/134/CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c",
    "nodes-line": [
      "    while(1)\n",
      "            wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));\n",
      "            if (dataBadBuffer == NULL) {exit(-1);}\n",
      "            data = (void *)dataBadBuffer;\n",
      "            size_t dataLen = wcslen((wchar_t *)data);\n",
      "            void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));\n",
      "            if (dest == NULL) {exit(-1);}\n",
      "            (void)wcscpy(dest, data);\n",
      "            printWLine((wchar_t *)dest);\n",
      "            free(dest);\n"
    ],
    "nodes-line-sym": [
      "while ( 1 )",
      "wchar_t * VAR1 = ( wchar_t * ) malloc ( 50 * sizeof ( wchar_t ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "VAR2 = ( void * ) VAR1 ;",
      "size_t VAR3 = wcslen ( ( wchar_t * ) VAR2 ) ;",
      "void * VAR4 = ( void * ) calloc ( VAR3 + 1 , sizeof ( wchar_t ) ) ;",
      "if ( VAR4 == NULL ) { FUN1 ( - 1 ) ; }",
      "( void ) wcscpy ( VAR4 , VAR2 ) ;",
      "FUN2 ( ( wchar_t * ) VAR4 ) ;",
      "free ( VAR4 ) ;"
    ],
    "pair_id": 3671,
    "xfg_id": 13330,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "161",
      "162",
      "165",
      "170",
      "173",
      "177",
      "178",
      "180"
    ],
    "keyLine": "180",
    "edges-No": [
      [
        0,
        5
      ],
      [
        0,
        7
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        7
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        4,
        7
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-2800-c/testcases/000/232/121/CWE122_Heap_Based_Buffer_Overflow__CWE135_03.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    if(5==5)\n",
      "            char * dataGoodBuffer = (char *)malloc(50*sizeof(char));\n",
      "            data = (void *)dataGoodBuffer;\n",
      "    if(5==5)\n",
      "            size_t dataLen = strlen((char *)data);\n",
      "            void * dest = (void *)calloc(dataLen+1, 1);\n",
      "            (void)strcpy(dest, data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "if ( 5 == 5 )",
      "char * VAR2 = ( char * ) malloc ( 50 * sizeof ( char ) ) ;",
      "VAR1 = ( void * ) VAR2 ;",
      "if ( 5 == 5 )",
      "size_t VAR3 = strlen ( ( char * ) VAR1 ) ;",
      "void * VAR4 = ( void * ) calloc ( VAR3 + 1 , 1 ) ;",
      "( void ) strcpy ( VAR4 , VAR1 ) ;"
    ],
    "pair_id": 12865,
    "xfg_id": 7208,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "32",
      "33",
      "34",
      "35",
      "36"
    ],
    "keyLine": "32",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        1,
        1
      ]
    ],
    "target": 1,
    "filePath": "119-1000-c/testcases/000/234/225/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c",
    "nodes-line": [
      "        data = (twoIntsStruct *)malloc(sizeof(data));\n",
      "        if (data == NULL) {exit(-1);}\n",
      "        data->intOne = 1;\n",
      "        data->intTwo = 2;\n",
      "        *dataPtr1 = data;\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( VAR2 * ) malloc ( sizeof ( VAR1 ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "VAR1 -> VAR3 = 1 ;",
      "VAR1 -> VAR4 = 2 ;",
      "* VAR5 = VAR1 ;"
    ],
    "pair_id": 11810,
    "xfg_id": 5164,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "89",
      "94",
      "97",
      "98",
      "101",
      "102",
      "106"
    ],
    "keyLine": "106",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ]
    ],
    "target": 0,
    "filePath": "119-2700-c/testcases/000/232/139/CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c",
    "nodes-line": [
      "        wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));\n",
      "        data = (void *)dataBadBuffer;\n",
      "        void * dataCopy = data;\n",
      "        void * data = dataCopy;\n",
      "            size_t dataLen = wcslen((wchar_t *)data);\n",
      "            void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));\n",
      "            free(dest);\n"
    ],
    "nodes-line-sym": [
      "wchar_t * VAR1 = ( wchar_t * ) malloc ( 50 * sizeof ( wchar_t ) ) ;",
      "VAR2 = ( void * ) VAR1 ;",
      "void * VAR3 = VAR2 ;",
      "void * VAR2 = VAR3 ;",
      "size_t VAR4 = wcslen ( ( wchar_t * ) VAR2 ) ;",
      "void * VAR5 = ( void * ) calloc ( VAR4 + 1 , sizeof ( wchar_t ) ) ;",
      "free ( VAR5 ) ;"
    ],
    "pair_id": 1310,
    "xfg_id": 9262,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "183",
      "184",
      "193",
      "194",
      "195",
      "199",
      "206",
      "207",
      "215",
      "219",
      "223",
      "224",
      "229",
      "230",
      "237",
      "239",
      "265",
      "266",
      "267",
      "271",
      "278",
      "279",
      "287",
      "291",
      "295",
      "296",
      "301",
      "302",
      "309",
      "311",
      "328",
      "353",
      "355",
      "357",
      "361"
    ],
    "keyLine": "357",
    "edges-No": [
      [
        0,
        32
      ],
      [
        0,
        33
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        16
      ],
      [
        1,
        17
      ],
      [
        1,
        18
      ],
      [
        1,
        5
      ],
      [
        1,
        19
      ],
      [
        2,
        3
      ],
      [
        3,
        7
      ],
      [
        4,
        14
      ],
      [
        4,
        12
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        10
      ],
      [
        6,
        8
      ],
      [
        6,
        9
      ],
      [
        6,
        7
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ],
      [
        9,
        11
      ],
      [
        9,
        10
      ],
      [
        10,
        11
      ],
      [
        10,
        12
      ],
      [
        11,
        12
      ],
      [
        11,
        13
      ],
      [
        12,
        13
      ],
      [
        13,
        14
      ],
      [
        13,
        15
      ],
      [
        14,
        32
      ],
      [
        14,
        33
      ],
      [
        15,
        5
      ],
      [
        16,
        17
      ],
      [
        17,
        21
      ],
      [
        18,
        28
      ],
      [
        18,
        26
      ],
      [
        19,
        20
      ],
      [
        19,
        21
      ],
      [
        20,
        23
      ],
      [
        20,
        24
      ],
      [
        20,
        21
      ],
      [
        20,
        22
      ],
      [
        21,
        22
      ],
      [
        22,
        23
      ],
      [
        23,
        25
      ],
      [
        23,
        24
      ],
      [
        24,
        25
      ],
      [
        24,
        26
      ],
      [
        25,
        26
      ],
      [
        25,
        27
      ],
      [
        26,
        27
      ],
      [
        27,
        28
      ],
      [
        27,
        29
      ],
      [
        28,
        32
      ],
      [
        28,
        33
      ],
      [
        29,
        19
      ],
      [
        30,
        31
      ],
      [
        30,
        32
      ],
      [
        31,
        34
      ],
      [
        31,
        33
      ],
      [
        32,
        33
      ],
      [
        33,
        34
      ]
    ],
    "target": 0,
    "filePath": "119-7400-c/testcases/000/073/705/CWE124_Buffer_Underwrite__CWE839_listen_socket_12.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(globalReturnsTrueOrFalse())\n",
      "            SOCKET listenSocket = INVALID_SOCKET;\n",
      "            SOCKET acceptSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (listenSocket == INVALID_SOCKET)\n",
      "                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "                acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "                if (acceptSocket == SOCKET_ERROR)\n",
      "                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "            SOCKET listenSocket = INVALID_SOCKET;\n",
      "            SOCKET acceptSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (listenSocket == INVALID_SOCKET)\n",
      "                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "                acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "                if (acceptSocket == SOCKET_ERROR)\n",
      "                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "    if(globalReturnsTrueOrFalse())\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( FUN1 ( ) )",
      "SOCKET VAR2 = VAR3 ;",
      "SOCKET VAR4 = VAR3 ;",
      "char VAR5 [ VAR6 ] ;",
      "if ( FUN2 ( FUN3 ( 2 , 2 ) , & VAR7 ) != VAR8 )",
      "VAR2 = socket ( VAR9 , VAR10 , VAR11 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( bind ( VAR2 , ( struct VAR12 * ) & VAR13 , sizeof ( VAR13 ) ) == VAR14 )",
      "if ( FUN4 ( VAR2 , VAR15 ) == VAR14 )",
      "VAR4 = accept ( VAR2 , NULL , NULL ) ;",
      "if ( VAR4 == VAR14 )",
      "VAR16 = recv ( VAR4 , VAR5 , VAR6 - 1 , 0 ) ;",
      "if ( VAR16 == VAR14 || VAR16 == 0 )",
      "VAR1 = atoi ( VAR5 ) ;",
      "while ( 0 ) ;",
      "SOCKET VAR2 = VAR3 ;",
      "SOCKET VAR4 = VAR3 ;",
      "char VAR5 [ VAR6 ] ;",
      "if ( FUN2 ( FUN3 ( 2 , 2 ) , & VAR7 ) != VAR8 )",
      "VAR2 = socket ( VAR9 , VAR10 , VAR11 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( bind ( VAR2 , ( struct VAR12 * ) & VAR13 , sizeof ( VAR13 ) ) == VAR14 )",
      "if ( FUN4 ( VAR2 , VAR15 ) == VAR14 )",
      "VAR4 = accept ( VAR2 , NULL , NULL ) ;",
      "if ( VAR4 == VAR14 )",
      "VAR16 = recv ( VAR4 , VAR5 , VAR6 - 1 , 0 ) ;",
      "if ( VAR16 == VAR14 || VAR16 == 0 )",
      "VAR1 = atoi ( VAR5 ) ;",
      "while ( 0 ) ;",
      "if ( FUN1 ( ) )",
      "int VAR17 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR17 [ VAR1 ] = 1 ;",
      "FUN5 ( VAR17 [ VAR18 ] ) ;"
    ],
    "pair_id": 2559,
    "xfg_id": 9272,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "27",
      "29",
      "30",
      "34",
      "35",
      "36"
    ],
    "keyLine": "26",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        1
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-2800-c/testcases/000/232/032/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_31.c",
    "nodes-line": [
      "    data = (int *)malloc(10);\n",
      "    if (data == NULL) {exit(-1);}\n",
      "        int * dataCopy = data;\n",
      "        int * data = dataCopy;\n",
      "            memcpy(data, source, 10*sizeof(int));\n",
      "            printIntLine(data[0]);\n",
      "            free(data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( int * ) malloc ( 10 ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "int * VAR2 = VAR1 ;",
      "int * VAR1 = VAR2 ;",
      "memcpy ( VAR1 , VAR3 , 10 * sizeof ( int ) ) ;",
      "FUN2 ( VAR1 [ 0 ] ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 9373,
    "xfg_id": 3130,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "40",
      "41",
      "43",
      "47",
      "49",
      "51"
    ],
    "keyLine": "47",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        5
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        4
      ],
      [
        4,
        5
      ],
      [
        5,
        5
      ]
    ],
    "target": 1,
    "filePath": "119-9900-c/testcases/000/065/818/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_21.c",
    "nodes-line": [
      "    char dataBuffer[100];\n",
      "    data = dataBuffer;\n",
      "    data = badSource(data);\n",
      "        dataLen = strlen(data);\n",
      "        for (i = 0; i < dataLen; i++)\n",
      "            dest[i] = data[i];\n"
    ],
    "nodes-line-sym": [
      "char VAR1 [ 100 ] ;",
      "VAR2 = VAR1 ;",
      "VAR2 = FUN1 ( VAR2 ) ;",
      "VAR3 = strlen ( VAR2 ) ;",
      "for ( VAR4 = 0 ; VAR4 < VAR3 ; VAR4 ++ )",
      "VAR5 [ VAR4 ] = VAR2 [ VAR4 ] ;"
    ],
    "pair_id": 8724,
    "xfg_id": 11322,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "121",
      "122",
      "125",
      "127",
      "130",
      "141",
      "143",
      "146",
      "154",
      "186",
      "189",
      "191",
      "194",
      "196",
      "198",
      "200"
    ],
    "keyLine": "200",
    "edges-No": [
      [
        0,
        12
      ],
      [
        0,
        13
      ],
      [
        1,
        6
      ],
      [
        1,
        2
      ],
      [
        1,
        5
      ],
      [
        1,
        3
      ],
      [
        2,
        4
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        12
      ],
      [
        4,
        13
      ],
      [
        5,
        7
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ],
      [
        7,
        12
      ],
      [
        7,
        13
      ],
      [
        8,
        12
      ],
      [
        8,
        10
      ],
      [
        8,
        9
      ],
      [
        9,
        11
      ],
      [
        9,
        13
      ],
      [
        9,
        15
      ],
      [
        10,
        10
      ],
      [
        10,
        11
      ],
      [
        11,
        15
      ],
      [
        12,
        13
      ],
      [
        12,
        14
      ],
      [
        13,
        15
      ],
      [
        14,
        15
      ],
      [
        14,
        14
      ]
    ],
    "target": 0,
    "filePath": "119-2700-c/testcases/000/232/218/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_12.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(globalReturnsTrueOrFalse())\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n",
      "            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n",
      "                data = atoi(inputBuffer);\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n",
      "            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n",
      "                data = atoi(inputBuffer);\n",
      "    if(globalReturnsTrueOrFalse())\n",
      "            int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "            for (i = 0; i < 10; i++)\n",
      "                buffer[i] = 0;\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( FUN1 ( ) )",
      "char VAR2 [ VAR3 ] = \"\" ;",
      "if ( fgets ( VAR2 , VAR3 , stdin ) != NULL )",
      "VAR1 = atoi ( VAR2 ) ;",
      "char VAR2 [ VAR3 ] = \"\" ;",
      "if ( fgets ( VAR2 , VAR3 , stdin ) != NULL )",
      "VAR1 = atoi ( VAR2 ) ;",
      "if ( FUN1 ( ) )",
      "int * VAR4 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "for ( VAR5 = 0 ; VAR5 < 10 ; VAR5 ++ )",
      "VAR4 [ VAR5 ] = 0 ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR4 [ VAR1 ] = 1 ;",
      "for ( VAR5 = 0 ; VAR5 < 10 ; VAR5 ++ )",
      "FUN2 ( VAR4 [ VAR5 ] ) ;"
    ],
    "pair_id": 5163,
    "xfg_id": 3132,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "50",
      "51",
      "59",
      "62",
      "65",
      "67",
      "69"
    ],
    "keyLine": "67",
    "edges-No": [
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        1,
        2
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ],
      [
        3,
        5
      ],
      [
        4,
        4
      ],
      [
        4,
        5
      ],
      [
        5,
        5
      ],
      [
        5,
        6
      ]
    ],
    "target": 0,
    "filePath": "119-12200-c/testcases/000/062/813/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_10.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    if(globalFalse)\n",
      "        data = (int *)ALLOCA(10*sizeof(int));\n",
      "        int source[10] = {0};\n",
      "        for (i = 0; i < 10; i++)\n",
      "            data[i] = source[i];\n",
      "        printIntLine(data[0]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "if ( VAR2 )",
      "VAR1 = ( int * ) FUN1 ( 10 * sizeof ( int ) ) ;",
      "int VAR3 [ 10 ] = { 0 } ;",
      "for ( VAR4 = 0 ; VAR4 < 10 ; VAR4 ++ )",
      "VAR1 [ VAR4 ] = VAR3 [ VAR4 ] ;",
      "FUN2 ( VAR1 [ 0 ] ) ;"
    ],
    "pair_id": 3021,
    "xfg_id": 5193,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "279",
      "280",
      "290",
      "291",
      "292",
      "296",
      "303",
      "304",
      "312",
      "316",
      "320",
      "321",
      "326",
      "327",
      "334",
      "336",
      "358",
      "363",
      "365",
      "367",
      "371"
    ],
    "keyLine": "367",
    "edges-No": [
      [
        0,
        18
      ],
      [
        0,
        19
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        2,
        3
      ],
      [
        3,
        7
      ],
      [
        4,
        14
      ],
      [
        4,
        12
      ],
      [
        5,
        7
      ],
      [
        5,
        6
      ],
      [
        6,
        10
      ],
      [
        6,
        7
      ],
      [
        6,
        8
      ],
      [
        6,
        9
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ],
      [
        9,
        10
      ],
      [
        9,
        11
      ],
      [
        10,
        11
      ],
      [
        10,
        12
      ],
      [
        11,
        12
      ],
      [
        11,
        13
      ],
      [
        12,
        13
      ],
      [
        13,
        15
      ],
      [
        13,
        14
      ],
      [
        14,
        18
      ],
      [
        14,
        19
      ],
      [
        15,
        5
      ],
      [
        16,
        17
      ],
      [
        16,
        18
      ],
      [
        17,
        20
      ],
      [
        17,
        19
      ],
      [
        18,
        19
      ],
      [
        19,
        20
      ]
    ],
    "target": 0,
    "filePath": "119-12300-c/testcases/000/062/722/CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_15.c",
    "nodes-line": [
      "    data = -1;\n",
      "    switch(6)\n",
      "        SOCKET listenSocket = INVALID_SOCKET;\n",
      "        SOCKET acceptSocket = INVALID_SOCKET;\n",
      "        char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "            if (listenSocket == INVALID_SOCKET)\n",
      "            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "            acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "            if (acceptSocket == SOCKET_ERROR)\n",
      "            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data = atoi(inputBuffer);\n",
      "        while (0);\n",
      "    switch(7)\n",
      "        int buffer[10] = { 0 };\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "switch ( 6 )",
      "SOCKET VAR2 = VAR3 ;",
      "SOCKET VAR4 = VAR3 ;",
      "char VAR5 [ VAR6 ] ;",
      "if ( FUN1 ( FUN2 ( 2 , 2 ) , & VAR7 ) != VAR8 )",
      "VAR2 = socket ( VAR9 , VAR10 , VAR11 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( bind ( VAR2 , ( struct VAR12 * ) & VAR13 , sizeof ( VAR13 ) ) == VAR14 )",
      "if ( FUN3 ( VAR2 , VAR15 ) == VAR14 )",
      "VAR4 = accept ( VAR2 , NULL , NULL ) ;",
      "if ( VAR4 == VAR14 )",
      "VAR16 = recv ( VAR4 , VAR5 , VAR6 - 1 , 0 ) ;",
      "if ( VAR16 == VAR14 || VAR16 == 0 )",
      "VAR1 = atoi ( VAR5 ) ;",
      "while ( 0 ) ;",
      "switch ( 7 )",
      "int VAR17 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR17 [ VAR1 ] = 1 ;",
      "FUN4 ( VAR17 [ VAR18 ] ) ;"
    ],
    "pair_id": 2217,
    "xfg_id": 3151,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "81",
      "82",
      "84",
      "86",
      "88"
    ],
    "keyLine": "88",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        4
      ],
      [
        1,
        3
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ]
    ],
    "target": 0,
    "filePath": "119-5000-c/testcases/000/077/675/CWE127_Buffer_Underread__CWE839_negative_61a.c",
    "nodes-line": [
      "    data = -1;\n",
      "    data = CWE127_Buffer_Underread__CWE839_negative_61b_goodB2GSource(data);\n",
      "        int buffer[10] = { 0 };\n",
      "        if (data >= 0 && data < (10))\n",
      "            printIntLine(buffer[data]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "VAR1 = FUN1 ( VAR1 ) ;",
      "int VAR2 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "FUN2 ( VAR2 [ VAR1 ] ) ;"
    ],
    "pair_id": 316,
    "xfg_id": 7268,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "66",
      "67",
      "69"
    ],
    "keyLine": "69",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ]
    ],
    "target": 0,
    "filePath": "119-8900-c/testcases/000/067/139/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_44.c",
    "nodes-line": [
      "    char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    data = dataBuffer;\n",
      "    memset(data, 'A', 50-1); /* fill with 'A's */\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "VAR2 = VAR1 ;",
      "memset ( VAR2 , '' , 50 - 1 ) ;"
    ],
    "pair_id": 318,
    "xfg_id": 3174,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "27",
      "30",
      "32",
      "36",
      "39",
      "41",
      "45",
      "47",
      "49",
      "51"
    ],
    "keyLine": "51",
    "edges-No": [
      [
        0,
        7
      ],
      [
        0,
        8
      ],
      [
        1,
        2
      ],
      [
        2,
        7
      ],
      [
        2,
        8
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        7
      ],
      [
        4,
        10
      ],
      [
        4,
        6
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        5,
        5
      ],
      [
        6,
        10
      ],
      [
        7,
        9
      ],
      [
        7,
        8
      ],
      [
        8,
        10
      ],
      [
        9,
        9
      ],
      [
        9,
        10
      ]
    ],
    "target": 1,
    "filePath": "119-2500-c/testcases/000/232/377/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_03.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(5==5)\n",
      "        data = RAND32();\n",
      "    if(5==5)\n",
      "            int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "            for (i = 0; i < 10; i++)\n",
      "                buffer[i] = 0;\n",
      "            if (data >= 0)\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( 5 == 5 )",
      "VAR1 = FUN1 ( ) ;",
      "if ( 5 == 5 )",
      "int * VAR2 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "VAR2 [ VAR3 ] = 0 ;",
      "if ( VAR1 >= 0 )",
      "VAR2 [ VAR1 ] = 1 ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "FUN2 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 6528,
    "xfg_id": 3181,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "61",
      "62",
      "65",
      "70",
      "73",
      "82",
      "83",
      "87"
    ],
    "keyLine": "87",
    "edges-No": [
      [
        0,
        5
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ],
      [
        3,
        5
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        4,
        7
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-2800-c/testcases/000/232/129/CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    if(globalReturnsTrue())\n",
      "            wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));\n",
      "            data = (void *)dataBadBuffer;\n",
      "    if(globalReturnsFalse())\n",
      "            size_t dataLen = wcslen((wchar_t *)data);\n",
      "            void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));\n",
      "            free(dest);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "if ( FUN1 ( ) )",
      "wchar_t * VAR2 = ( wchar_t * ) malloc ( 50 * sizeof ( wchar_t ) ) ;",
      "VAR1 = ( void * ) VAR2 ;",
      "if ( FUN2 ( ) )",
      "size_t VAR3 = wcslen ( ( wchar_t * ) VAR1 ) ;",
      "void * VAR4 = ( void * ) calloc ( VAR3 + 1 , sizeof ( wchar_t ) ) ;",
      "free ( VAR4 ) ;"
    ],
    "pair_id": 2522,
    "xfg_id": 9327,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "38",
      "41",
      "42",
      "43"
    ],
    "keyLine": "41",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        2
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/234/168/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_62b.cpp",
    "nodes-line": [
      "void goodG2BSource(double * &data)\n",
      "    data = (double *)malloc(sizeof(*data));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "    *data = 1.7E300;\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( double * & VAR1 )",
      "VAR1 = ( double * ) malloc ( sizeof ( * VAR1 ) ) ;",
      "if ( VAR1 == NULL ) { FUN2 ( - 1 ) ; }",
      "* VAR1 = 1 . 7E300 ;"
    ],
    "pair_id": 7379,
    "xfg_id": 9336,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "50",
      "53"
    ],
    "keyLine": "53",
    "edges-No": [
      [
        0,
        1
      ]
    ],
    "target": 0,
    "filePath": "119-13500-c/testcases/000/000/330/basic-00054-ok.c",
    "nodes-line": [
      "void function1(char * buf)\n",
      "  buf[9] = 'A';\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( char * VAR1 )",
      "VAR1 [ 9 ] = '' ;"
    ],
    "pair_id": 323,
    "xfg_id": 11408,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "186",
      "194",
      "195",
      "196",
      "200",
      "207",
      "208",
      "216",
      "220",
      "224",
      "225",
      "230",
      "231",
      "238",
      "240",
      "257",
      "258",
      "261",
      "263",
      "265",
      "267",
      "269"
    ],
    "keyLine": "269",
    "edges-No": [
      [
        0,
        15
      ],
      [
        1,
        2
      ],
      [
        2,
        6
      ],
      [
        3,
        11
      ],
      [
        3,
        13
      ],
      [
        4,
        6
      ],
      [
        4,
        5
      ],
      [
        5,
        9
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        5,
        8
      ],
      [
        6,
        7
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ],
      [
        8,
        10
      ],
      [
        9,
        10
      ],
      [
        9,
        11
      ],
      [
        10,
        11
      ],
      [
        10,
        12
      ],
      [
        11,
        12
      ],
      [
        12,
        14
      ],
      [
        12,
        13
      ],
      [
        13,
        15
      ],
      [
        14,
        4
      ],
      [
        15,
        16
      ],
      [
        16,
        19
      ],
      [
        16,
        18
      ],
      [
        17,
        19
      ],
      [
        17,
        21
      ],
      [
        18,
        19
      ],
      [
        18,
        20
      ],
      [
        19,
        21
      ],
      [
        20,
        20
      ],
      [
        20,
        21
      ]
    ],
    "target": 0,
    "filePath": "119-7400-c/testcases/000/073/714/CWE124_Buffer_Underwrite__CWE839_listen_socket_31.c",
    "nodes-line": [
      "    data = -1;\n",
      "        SOCKET listenSocket = INVALID_SOCKET;\n",
      "        SOCKET acceptSocket = INVALID_SOCKET;\n",
      "        char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "            if (listenSocket == INVALID_SOCKET)\n",
      "            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "            acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "            if (acceptSocket == SOCKET_ERROR)\n",
      "            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data = atoi(inputBuffer);\n",
      "        while (0);\n",
      "        int dataCopy = data;\n",
      "        int data = dataCopy;\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "SOCKET VAR2 = VAR3 ;",
      "SOCKET VAR4 = VAR3 ;",
      "char VAR5 [ VAR6 ] ;",
      "if ( FUN1 ( FUN2 ( 2 , 2 ) , & VAR7 ) != VAR8 )",
      "VAR2 = socket ( VAR9 , VAR10 , VAR11 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( bind ( VAR2 , ( struct VAR12 * ) & VAR13 , sizeof ( VAR13 ) ) == VAR14 )",
      "if ( FUN3 ( VAR2 , VAR15 ) == VAR14 )",
      "VAR4 = accept ( VAR2 , NULL , NULL ) ;",
      "if ( VAR4 == VAR14 )",
      "VAR16 = recv ( VAR4 , VAR5 , VAR6 - 1 , 0 ) ;",
      "if ( VAR16 == VAR14 || VAR16 == 0 )",
      "VAR1 = atoi ( VAR5 ) ;",
      "while ( 0 ) ;",
      "int VAR17 = VAR1 ;",
      "int VAR1 = VAR17 ;",
      "int VAR18 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR18 [ VAR1 ] = 1 ;",
      "for ( VAR19 = 0 ; VAR19 < 10 ; VAR19 ++ )",
      "FUN4 ( VAR18 [ VAR19 ] ) ;"
    ],
    "pair_id": 7722,
    "xfg_id": 11416,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "179",
      "187",
      "188",
      "192",
      "199",
      "200",
      "208",
      "214",
      "215",
      "222",
      "224",
      "238",
      "241",
      "243",
      "246",
      "248",
      "250",
      "252"
    ],
    "keyLine": "252",
    "edges-No": [
      [
        0,
        15
      ],
      [
        0,
        14
      ],
      [
        1,
        5
      ],
      [
        2,
        9
      ],
      [
        2,
        7
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        4,
        6
      ],
      [
        4,
        7
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ],
      [
        6,
        8
      ],
      [
        7,
        8
      ],
      [
        8,
        10
      ],
      [
        8,
        9
      ],
      [
        9,
        15
      ],
      [
        9,
        14
      ],
      [
        10,
        3
      ],
      [
        11,
        13
      ],
      [
        11,
        15
      ],
      [
        11,
        17
      ],
      [
        12,
        12
      ],
      [
        12,
        13
      ],
      [
        13,
        17
      ],
      [
        14,
        15
      ],
      [
        14,
        16
      ],
      [
        15,
        17
      ],
      [
        16,
        16
      ],
      [
        16,
        17
      ]
    ],
    "target": 0,
    "filePath": "119-2700-c/testcases/000/232/165/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_01.c",
    "nodes-line": [
      "    data = -1;\n",
      "        SOCKET connectSocket = INVALID_SOCKET;\n",
      "        char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "            if (connectSocket == INVALID_SOCKET)\n",
      "            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data = atoi(inputBuffer);\n",
      "        while (0);\n",
      "        int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "        for (i = 0; i < 10; i++)\n",
      "            buffer[i] = 0;\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "            for(i = 0; i < 10; i++)\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "SOCKET VAR2 = VAR3 ;",
      "char VAR4 [ VAR5 ] ;",
      "if ( FUN1 ( FUN2 ( 2 , 2 ) , & VAR6 ) != VAR7 )",
      "VAR2 = socket ( VAR8 , VAR9 , VAR10 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( connect ( VAR2 , ( struct VAR11 * ) & VAR12 , sizeof ( VAR12 ) ) == VAR13 )",
      "VAR14 = recv ( VAR2 , VAR4 , VAR5 - 1 , 0 ) ;",
      "if ( VAR14 == VAR13 || VAR14 == 0 )",
      "VAR1 = atoi ( VAR4 ) ;",
      "while ( 0 ) ;",
      "int * VAR15 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "for ( VAR16 = 0 ; VAR16 < 10 ; VAR16 ++ )",
      "VAR15 [ VAR16 ] = 0 ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR15 [ VAR1 ] = 1 ;",
      "for ( VAR16 = 0 ; VAR16 < 10 ; VAR16 ++ )",
      "FUN3 ( VAR15 [ VAR16 ] ) ;"
    ],
    "pair_id": 6441,
    "xfg_id": 3231,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "33",
      "36",
      "37",
      "43",
      "44",
      "45"
    ],
    "keyLine": "36",
    "edges-No": [
      [
        0,
        0
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        5
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        2
      ],
      [
        2,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-2400-c/testcases/000/232/499/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_17.c",
    "nodes-line": [
      "    for(i = 0; i < 1; i++)\n",
      "        data = (char *)malloc(10*sizeof(char));\n",
      "        if (data == NULL) {exit(-1);}\n",
      "        memcpy(data, source, (strlen(source) + 1) * sizeof(char));\n",
      "        printLine(data);\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "for ( VAR1 = 0 ; VAR1 < 1 ; VAR1 ++ )",
      "VAR2 = ( char * ) malloc ( 10 * sizeof ( char ) ) ;",
      "if ( VAR2 == NULL ) { FUN1 ( - 1 ) ; }",
      "memcpy ( VAR2 , VAR3 , ( strlen ( VAR3 ) + 1 ) * sizeof ( char ) ) ;",
      "FUN2 ( VAR2 ) ;",
      "free ( VAR2 ) ;"
    ],
    "pair_id": 8451,
    "xfg_id": 5283,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "81",
      "86",
      "90",
      "91",
      "92",
      "93",
      "94",
      "95"
    ],
    "keyLine": "90",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        1,
        5
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        4,
        4
      ]
    ],
    "target": 0,
    "filePath": "119-2800-c/testcases/000/232/119/CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c",
    "nodes-line": [
      "        wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));\n",
      "        data = (void *)dataBadBuffer;\n",
      "        size_t dataLen = wcslen((wchar_t *)data);\n",
      "        void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));\n",
      "        if (dest == NULL) {exit(-1);}\n",
      "        (void)wcscpy(dest, data);\n",
      "        printWLine((wchar_t *)dest);\n",
      "        free(dest);\n"
    ],
    "nodes-line-sym": [
      "wchar_t * VAR1 = ( wchar_t * ) malloc ( 50 * sizeof ( wchar_t ) ) ;",
      "VAR2 = ( void * ) VAR1 ;",
      "size_t VAR3 = wcslen ( ( wchar_t * ) VAR2 ) ;",
      "void * VAR4 = ( void * ) calloc ( VAR3 + 1 , sizeof ( wchar_t ) ) ;",
      "if ( VAR4 == NULL ) { FUN1 ( - 1 ) ; }",
      "( void ) wcscpy ( VAR4 , VAR2 ) ;",
      "FUN2 ( ( wchar_t * ) VAR4 ) ;",
      "free ( VAR4 ) ;"
    ],
    "pair_id": 2494,
    "xfg_id": 11431,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "104",
      "110",
      "114",
      "116",
      "118",
      "122"
    ],
    "keyLine": "118",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        5
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ]
    ],
    "target": 0,
    "filePath": "119-12400-c/testcases/000/062/625/CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(globalFive==5)\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( VAR2 == 5 )",
      "int VAR3 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR3 [ VAR1 ] = 1 ;",
      "FUN1 ( VAR3 [ VAR4 ] ) ;"
    ],
    "pair_id": 3983,
    "xfg_id": 3239,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "63",
      "64",
      "68",
      "69",
      "74",
      "75",
      "80",
      "81"
    ],
    "keyLine": "63",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        6
      ],
      [
        1,
        7
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ]
    ],
    "target": 0,
    "filePath": "119-9900-c/testcases/000/065/763/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_12.c",
    "nodes-line": [
      "    char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    data = dataBuffer;\n",
      "        memset(data, 'A', 50-1); /* fill with 'A's */\n",
      "        data[50-1] = '\\0'; /* null terminate */\n",
      "        memset(data, 'A', 50-1); /* fill with 'A's */\n",
      "        data[50-1] = '\\0'; /* null terminate */\n",
      "        SNPRINTF(dest, strlen(data), \"%s\", data);\n",
      "        printLine(data);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "VAR2 = VAR1 ;",
      "memset ( VAR2 , '' , 50 - 1 ) ;",
      "VAR2 [ 50 - 1 ] = '' ;",
      "memset ( VAR2 , '' , 50 - 1 ) ;",
      "VAR2 [ 50 - 1 ] = '' ;",
      "FUN2 ( VAR3 , strlen ( VAR2 ) , \"\" , VAR2 ) ;",
      "FUN3 ( VAR2 ) ;"
    ],
    "pair_id": 5435,
    "xfg_id": 3241,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "30",
      "31",
      "34",
      "36",
      "40",
      "41",
      "42",
      "43"
    ],
    "keyLine": "40",
    "edges-No": [
      [
        0,
        4
      ],
      [
        0,
        6
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        2,
        6
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ]
    ],
    "target": 1,
    "filePath": "119-3300-c/testcases/000/231/404/CWE121_Stack_Based_Buffer_Overflow__CWE135_03.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    if(5==5)\n",
      "        data = (void *)WIDE_STRING;\n",
      "    if(5==5)\n",
      "            size_t dataLen = strlen((char *)data);\n",
      "            void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));\n",
      "            (void)wcscpy(dest, data);\n",
      "            printLine((char *)dest);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "if ( 5 == 5 )",
      "VAR1 = ( void * ) VAR2 ;",
      "if ( 5 == 5 )",
      "size_t VAR3 = strlen ( ( char * ) VAR1 ) ;",
      "void * VAR4 = ( void * ) FUN1 ( ( VAR3 + 1 ) * sizeof ( wchar_t ) ) ;",
      "( void ) wcscpy ( VAR4 , VAR1 ) ;",
      "FUN2 ( ( char * ) VAR4 ) ;"
    ],
    "pair_id": 4626,
    "xfg_id": 7338,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "197",
      "198",
      "207",
      "208",
      "209",
      "213",
      "220",
      "221",
      "229",
      "233",
      "237",
      "238",
      "243",
      "244",
      "251",
      "253",
      "279",
      "280",
      "281",
      "285",
      "292",
      "293",
      "301",
      "305",
      "309",
      "310",
      "315",
      "316",
      "323",
      "325",
      "342",
      "346",
      "354",
      "356",
      "360"
    ],
    "keyLine": "356",
    "edges-No": [
      [
        0,
        32
      ],
      [
        0,
        33
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        16
      ],
      [
        1,
        17
      ],
      [
        1,
        18
      ],
      [
        1,
        5
      ],
      [
        1,
        19
      ],
      [
        2,
        3
      ],
      [
        3,
        7
      ],
      [
        4,
        12
      ],
      [
        4,
        14
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        8
      ],
      [
        6,
        7
      ],
      [
        6,
        9
      ],
      [
        6,
        10
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ],
      [
        9,
        10
      ],
      [
        9,
        11
      ],
      [
        10,
        12
      ],
      [
        10,
        11
      ],
      [
        11,
        12
      ],
      [
        11,
        13
      ],
      [
        12,
        13
      ],
      [
        13,
        14
      ],
      [
        13,
        15
      ],
      [
        14,
        32
      ],
      [
        14,
        33
      ],
      [
        15,
        5
      ],
      [
        16,
        17
      ],
      [
        17,
        21
      ],
      [
        18,
        28
      ],
      [
        18,
        26
      ],
      [
        19,
        20
      ],
      [
        19,
        21
      ],
      [
        20,
        23
      ],
      [
        20,
        21
      ],
      [
        20,
        24
      ],
      [
        20,
        22
      ],
      [
        21,
        22
      ],
      [
        22,
        23
      ],
      [
        23,
        24
      ],
      [
        23,
        25
      ],
      [
        24,
        26
      ],
      [
        24,
        25
      ],
      [
        25,
        26
      ],
      [
        25,
        27
      ],
      [
        26,
        27
      ],
      [
        27,
        28
      ],
      [
        27,
        29
      ],
      [
        28,
        32
      ],
      [
        28,
        33
      ],
      [
        29,
        19
      ],
      [
        30,
        32
      ],
      [
        30,
        31
      ],
      [
        31,
        33
      ],
      [
        31,
        34
      ],
      [
        32,
        33
      ],
      [
        33,
        34
      ]
    ],
    "target": 0,
    "filePath": "119-2600-c/testcases/000/232/344/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_12.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(globalReturnsTrueOrFalse())\n",
      "            SOCKET listenSocket = INVALID_SOCKET;\n",
      "            SOCKET acceptSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (listenSocket == INVALID_SOCKET)\n",
      "                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "                acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "                if (acceptSocket == SOCKET_ERROR)\n",
      "                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "            SOCKET listenSocket = INVALID_SOCKET;\n",
      "            SOCKET acceptSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (listenSocket == INVALID_SOCKET)\n",
      "                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "                acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "                if (acceptSocket == SOCKET_ERROR)\n",
      "                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "    if(globalReturnsTrueOrFalse())\n",
      "            int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( FUN1 ( ) )",
      "SOCKET VAR2 = VAR3 ;",
      "SOCKET VAR4 = VAR3 ;",
      "char VAR5 [ VAR6 ] ;",
      "if ( FUN2 ( FUN3 ( 2 , 2 ) , & VAR7 ) != VAR8 )",
      "VAR2 = socket ( VAR9 , VAR10 , VAR11 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( bind ( VAR2 , ( struct VAR12 * ) & VAR13 , sizeof ( VAR13 ) ) == VAR14 )",
      "if ( FUN4 ( VAR2 , VAR15 ) == VAR14 )",
      "VAR4 = accept ( VAR2 , NULL , NULL ) ;",
      "if ( VAR4 == VAR14 )",
      "VAR16 = recv ( VAR4 , VAR5 , VAR6 - 1 , 0 ) ;",
      "if ( VAR16 == VAR14 || VAR16 == 0 )",
      "VAR1 = atoi ( VAR5 ) ;",
      "while ( 0 ) ;",
      "SOCKET VAR2 = VAR3 ;",
      "SOCKET VAR4 = VAR3 ;",
      "char VAR5 [ VAR6 ] ;",
      "if ( FUN2 ( FUN3 ( 2 , 2 ) , & VAR7 ) != VAR8 )",
      "VAR2 = socket ( VAR9 , VAR10 , VAR11 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( bind ( VAR2 , ( struct VAR12 * ) & VAR13 , sizeof ( VAR13 ) ) == VAR14 )",
      "if ( FUN4 ( VAR2 , VAR15 ) == VAR14 )",
      "VAR4 = accept ( VAR2 , NULL , NULL ) ;",
      "if ( VAR4 == VAR14 )",
      "VAR16 = recv ( VAR4 , VAR5 , VAR6 - 1 , 0 ) ;",
      "if ( VAR16 == VAR14 || VAR16 == 0 )",
      "VAR1 = atoi ( VAR5 ) ;",
      "while ( 0 ) ;",
      "if ( FUN1 ( ) )",
      "int * VAR17 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR17 [ VAR1 ] = 1 ;",
      "FUN5 ( VAR17 [ VAR18 ] ) ;"
    ],
    "pair_id": 7480,
    "xfg_id": 3242,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "134",
      "135",
      "138",
      "140",
      "143",
      "151",
      "155",
      "157",
      "159",
      "163"
    ],
    "keyLine": "159",
    "edges-No": [
      [
        0,
        7
      ],
      [
        0,
        8
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ],
      [
        4,
        7
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        9
      ],
      [
        6,
        8
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ]
    ],
    "target": 0,
    "filePath": "119-7500-c/testcases/000/073/602/CWE124_Buffer_Underwrite__CWE839_fgets_05.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(staticTrue)\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n",
      "            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n",
      "                data = atoi(inputBuffer);\n",
      "    if(staticTrue)\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( VAR2 )",
      "char VAR3 [ VAR4 ] = \"\" ;",
      "if ( fgets ( VAR3 , VAR4 , stdin ) != NULL )",
      "VAR1 = atoi ( VAR3 ) ;",
      "if ( VAR2 )",
      "int VAR5 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR5 [ VAR1 ] = 1 ;",
      "FUN1 ( VAR5 [ VAR6 ] ) ;"
    ],
    "pair_id": 2183,
    "xfg_id": 7340,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "40",
      "41",
      "43",
      "47",
      "49"
    ],
    "keyLine": "40",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        2,
        3
      ]
    ],
    "target": 1,
    "filePath": "119-10000-c/testcases/000/065/722/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_21.c",
    "nodes-line": [
      "    char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    data = dataBuffer;\n",
      "    data = badSource(data);\n",
      "        strncpy(dest, data, strlen(data));\n",
      "        printLine(data);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "VAR2 = VAR1 ;",
      "VAR2 = FUN2 ( VAR2 ) ;",
      "strncpy ( VAR3 , VAR2 , strlen ( VAR2 ) ) ;",
      "FUN3 ( VAR2 ) ;"
    ],
    "pair_id": 10200,
    "xfg_id": 3240,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "150",
      "151",
      "160",
      "161",
      "165",
      "172",
      "173",
      "181",
      "187",
      "188",
      "195",
      "197",
      "211",
      "215",
      "223",
      "225",
      "229"
    ],
    "keyLine": "225",
    "edges-No": [
      [
        0,
        15
      ],
      [
        0,
        14
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        6
      ],
      [
        3,
        8
      ],
      [
        3,
        10
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        5,
        7
      ],
      [
        5,
        8
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ],
      [
        7,
        8
      ],
      [
        7,
        9
      ],
      [
        8,
        9
      ],
      [
        9,
        10
      ],
      [
        9,
        11
      ],
      [
        10,
        15
      ],
      [
        10,
        14
      ],
      [
        11,
        4
      ],
      [
        12,
        13
      ],
      [
        12,
        14
      ],
      [
        13,
        15
      ],
      [
        13,
        16
      ],
      [
        14,
        15
      ],
      [
        15,
        16
      ]
    ],
    "target": 0,
    "filePath": "119-2700-c/testcases/000/232/180/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c",
    "nodes-line": [
      "    data = -1;\n",
      "    while(1)\n",
      "            SOCKET connectSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (connectSocket == INVALID_SOCKET)\n",
      "                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "    while(1)\n",
      "            int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "while ( 1 )",
      "SOCKET VAR2 = VAR3 ;",
      "char VAR4 [ VAR5 ] ;",
      "if ( FUN1 ( FUN2 ( 2 , 2 ) , & VAR6 ) != VAR7 )",
      "VAR2 = socket ( VAR8 , VAR9 , VAR10 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( connect ( VAR2 , ( struct VAR11 * ) & VAR12 , sizeof ( VAR12 ) ) == VAR13 )",
      "VAR14 = recv ( VAR2 , VAR4 , VAR5 - 1 , 0 ) ;",
      "if ( VAR14 == VAR13 || VAR14 == 0 )",
      "VAR1 = atoi ( VAR4 ) ;",
      "while ( 0 ) ;",
      "while ( 1 )",
      "int * VAR15 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR15 [ VAR1 ] = 1 ;",
      "FUN3 ( VAR15 [ VAR16 ] ) ;"
    ],
    "pair_id": 7178,
    "xfg_id": 9391,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "94",
      "96",
      "99",
      "101",
      "103",
      "106",
      "108",
      "110",
      "112"
    ],
    "keyLine": "112",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        5
      ],
      [
        1,
        6
      ],
      [
        2,
        8
      ],
      [
        2,
        6
      ],
      [
        2,
        4
      ],
      [
        3,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        8
      ],
      [
        7,
        8
      ],
      [
        7,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/067/606/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_fgets_66b.cpp",
    "nodes-line": [
      "void goodB2GSink(int dataArray[])\n",
      "    int data = dataArray[2];\n",
      "        int * buffer = new int[10];\n",
      "        for (i = 0; i < 10; i++)\n",
      "            buffer[i] = 0;\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "            for(i = 0; i < 10; i++)\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( int VAR1 [ ] )",
      "int VAR2 = VAR1 [ 2 ] ;",
      "int * VAR3 = new int [ 10 ] ;",
      "for ( VAR4 = 0 ; VAR4 < 10 ; VAR4 ++ )",
      "VAR3 [ VAR4 ] = 0 ;",
      "if ( VAR2 >= 0 && VAR2 < ( 10 ) )",
      "VAR3 [ VAR2 ] = 1 ;",
      "for ( VAR4 = 0 ; VAR4 < 10 ; VAR4 ++ )",
      "FUN2 ( VAR3 [ VAR4 ] ) ;"
    ],
    "pair_id": 1999,
    "xfg_id": 11439,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "24",
      "27",
      "29",
      "32",
      "41",
      "43",
      "47"
    ],
    "keyLine": "43",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        2,
        5
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-2700-c/testcases/000/232/241/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c",
    "nodes-line": [
      "void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b_badSink(void * dataVoidPtr)\n",
      "    int * dataPtr = (int *)dataVoidPtr;\n",
      "    int data = (*dataPtr);\n",
      "        int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "        if (data >= 0)\n",
      "            buffer[data] = 1;\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( void * VAR1 )",
      "int * VAR2 = ( int * ) VAR1 ;",
      "int VAR3 = ( * VAR2 ) ;",
      "int * VAR4 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "if ( VAR3 >= 0 )",
      "VAR4 [ VAR3 ] = 1 ;",
      "FUN2 ( VAR4 [ VAR5 ] ) ;"
    ],
    "pair_id": 7168,
    "xfg_id": 7357,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "193",
      "201",
      "202",
      "203",
      "207",
      "214",
      "215",
      "223",
      "227",
      "231",
      "232",
      "237",
      "238",
      "245",
      "247",
      "265",
      "267",
      "269",
      "272",
      "274",
      "276",
      "278"
    ],
    "keyLine": "278",
    "edges-No": [
      [
        0,
        18
      ],
      [
        0,
        19
      ],
      [
        1,
        2
      ],
      [
        2,
        6
      ],
      [
        3,
        13
      ],
      [
        3,
        11
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        5,
        8
      ],
      [
        5,
        9
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        7
      ],
      [
        7,
        8
      ],
      [
        8,
        10
      ],
      [
        8,
        9
      ],
      [
        9,
        10
      ],
      [
        9,
        11
      ],
      [
        10,
        11
      ],
      [
        10,
        12
      ],
      [
        11,
        12
      ],
      [
        12,
        13
      ],
      [
        12,
        14
      ],
      [
        13,
        18
      ],
      [
        13,
        19
      ],
      [
        14,
        4
      ],
      [
        15,
        19
      ],
      [
        15,
        17
      ],
      [
        15,
        21
      ],
      [
        16,
        16
      ],
      [
        16,
        17
      ],
      [
        17,
        21
      ],
      [
        18,
        19
      ],
      [
        18,
        20
      ],
      [
        19,
        21
      ],
      [
        20,
        20
      ],
      [
        20,
        21
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/067/712/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_listen_socket_01.cpp",
    "nodes-line": [
      "    data = -1;\n",
      "        SOCKET listenSocket = INVALID_SOCKET;\n",
      "        SOCKET acceptSocket = INVALID_SOCKET;\n",
      "        char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "            if (listenSocket == INVALID_SOCKET)\n",
      "            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "            acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "            if (acceptSocket == SOCKET_ERROR)\n",
      "            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data = atoi(inputBuffer);\n",
      "        while (0);\n",
      "        int * buffer = new int[10];\n",
      "        for (i = 0; i < 10; i++)\n",
      "            buffer[i] = 0;\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "            for(i = 0; i < 10; i++)\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "SOCKET VAR2 = VAR3 ;",
      "SOCKET VAR4 = VAR3 ;",
      "char VAR5 [ VAR6 ] ;",
      "if ( FUN1 ( FUN2 ( 2 , 2 ) , & VAR7 ) != VAR8 )",
      "VAR2 = socket ( VAR9 , VAR10 , VAR11 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( bind ( VAR2 , ( struct VAR12 * ) & VAR13 , sizeof ( VAR13 ) ) == VAR14 )",
      "if ( FUN3 ( VAR2 , VAR15 ) == VAR14 )",
      "VAR4 = accept ( VAR2 , NULL , NULL ) ;",
      "if ( VAR4 == VAR14 )",
      "VAR16 = recv ( VAR4 , VAR5 , VAR6 - 1 , 0 ) ;",
      "if ( VAR16 == VAR14 || VAR16 == 0 )",
      "VAR1 = atoi ( VAR5 ) ;",
      "while ( 0 ) ;",
      "int * VAR17 = new int [ 10 ] ;",
      "for ( VAR18 = 0 ; VAR18 < 10 ; VAR18 ++ )",
      "VAR17 [ VAR18 ] = 0 ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR17 [ VAR1 ] = 1 ;",
      "for ( VAR18 = 0 ; VAR18 < 10 ; VAR18 ++ )",
      "FUN4 ( VAR17 [ VAR18 ] ) ;"
    ],
    "pair_id": 934,
    "xfg_id": 5317,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "172",
      "181",
      "182",
      "183",
      "187",
      "189",
      "191",
      "194",
      "195",
      "197",
      "199",
      "200",
      "201",
      "202",
      "203",
      "205",
      "207",
      "209",
      "211",
      "212",
      "214",
      "217",
      "218",
      "220",
      "223",
      "225",
      "227",
      "228",
      "230",
      "232",
      "234",
      "237",
      "239",
      "321",
      "323",
      "327",
      "336",
      "338",
      "342"
    ],
    "keyLine": "194",
    "edges-No": [
      [
        0,
        27
      ],
      [
        0,
        29
      ],
      [
        0,
        31
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        1,
        27
      ],
      [
        1,
        2
      ],
      [
        1,
        28
      ],
      [
        2,
        29
      ],
      [
        2,
        30
      ],
      [
        2,
        8
      ],
      [
        2,
        27
      ],
      [
        3,
        21
      ],
      [
        3,
        25
      ],
      [
        3,
        24
      ],
      [
        4,
        7
      ],
      [
        4,
        8
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        6,
        31
      ],
      [
        7,
        8
      ],
      [
        7,
        27
      ],
      [
        7,
        18
      ],
      [
        7,
        28
      ],
      [
        7,
        14
      ],
      [
        7,
        16
      ],
      [
        8,
        9
      ],
      [
        8,
        10
      ],
      [
        8,
        11
      ],
      [
        8,
        12
      ],
      [
        8,
        13
      ],
      [
        8,
        14
      ],
      [
        11,
        12
      ],
      [
        12,
        12
      ],
      [
        12,
        13
      ],
      [
        13,
        11
      ],
      [
        14,
        15
      ],
      [
        14,
        16
      ],
      [
        16,
        17
      ],
      [
        16,
        18
      ],
      [
        16,
        19
      ],
      [
        18,
        29
      ],
      [
        18,
        21
      ],
      [
        18,
        30
      ],
      [
        18,
        19
      ],
      [
        19,
        21
      ],
      [
        19,
        22
      ],
      [
        19,
        20
      ],
      [
        21,
        22
      ],
      [
        21,
        24
      ],
      [
        22,
        25
      ],
      [
        22,
        26
      ],
      [
        22,
        23
      ],
      [
        22,
        24
      ],
      [
        25,
        36
      ],
      [
        25,
        33
      ],
      [
        25,
        37
      ],
      [
        25,
        34
      ],
      [
        26,
        4
      ],
      [
        27,
        28
      ],
      [
        29,
        30
      ],
      [
        31,
        32
      ],
      [
        33,
        34
      ],
      [
        33,
        35
      ],
      [
        36,
        37
      ],
      [
        36,
        38
      ]
    ],
    "target": 0,
    "filePath": "119-6200-c/testcases/000/075/801/CWE126_Buffer_Overread__CWE129_listen_socket_12.c",
    "nodes-line": [
      "    if(globalReturnsTrueOrFalse())\n",
      "            SOCKET listenSocket = INVALID_SOCKET;\n",
      "            SOCKET acceptSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                    break;\n",
      "                wsaDataInit = 1;\n",
      "                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (listenSocket == INVALID_SOCKET)\n",
      "                    break;\n",
      "                memset(&service, 0, sizeof(service));\n",
      "                service.sin_family = AF_INET;\n",
      "                service.sin_addr.s_addr = INADDR_ANY;\n",
      "                service.sin_port = htons(TCP_PORT);\n",
      "                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                    break;\n",
      "                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "                    break;\n",
      "                acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "                if (acceptSocket == SOCKET_ERROR)\n",
      "                    break;\n",
      "                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                    break;\n",
      "                inputBuffer[recvResult] = '\\0';\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "            if (listenSocket != INVALID_SOCKET)\n",
      "                CLOSE_SOCKET(listenSocket);\n",
      "            if (acceptSocket != INVALID_SOCKET)\n",
      "                CLOSE_SOCKET(acceptSocket);\n",
      "            if (wsaDataInit)\n",
      "                WSACleanup();\n",
      "            if (data >= 0 && data < (10))\n",
      "                printIntLine(buffer[data]);\n",
      "                printLine(\"ERROR: Array index is out-of-bounds\");\n",
      "            if (data >= 0 && data < (10))\n",
      "                printIntLine(buffer[data]);\n",
      "                printLine(\"ERROR: Array index is out-of-bounds\");\n"
    ],
    "nodes-line-sym": [
      "if ( FUN1 ( ) )",
      "SOCKET VAR1 = VAR2 ;",
      "SOCKET VAR3 = VAR2 ;",
      "char VAR4 [ VAR5 ] ;",
      "if ( FUN2 ( FUN3 ( 2 , 2 ) , & VAR6 ) != VAR7 )",
      "break ;",
      "VAR8 = 1 ;",
      "VAR1 = socket ( VAR9 , VAR10 , VAR11 ) ;",
      "if ( VAR1 == VAR2 )",
      "break ;",
      "memset ( & VAR12 , 0 , sizeof ( VAR12 ) ) ;",
      "VAR12 . VAR13 = VAR9 ;",
      "VAR12 . VAR14 . VAR15 = VAR16 ;",
      "VAR12 . VAR17 = FUN4 ( VAR18 ) ;",
      "if ( bind ( VAR1 , ( struct VAR19 * ) & VAR12 , sizeof ( VAR12 ) ) == VAR20 )",
      "break ;",
      "if ( FUN5 ( VAR1 , VAR21 ) == VAR20 )",
      "break ;",
      "VAR3 = accept ( VAR1 , NULL , NULL ) ;",
      "if ( VAR3 == VAR20 )",
      "break ;",
      "VAR22 = recv ( VAR3 , VAR4 , VAR5 - 1 , 0 ) ;",
      "if ( VAR22 == VAR20 || VAR22 == 0 )",
      "break ;",
      "VAR4 [ VAR22 ] = '' ;",
      "VAR23 = atoi ( VAR4 ) ;",
      "while ( 0 ) ;",
      "if ( VAR1 != VAR2 )",
      "FUN6 ( VAR1 ) ;",
      "if ( VAR3 != VAR2 )",
      "FUN6 ( VAR3 ) ;",
      "if ( VAR8 )",
      "FUN7 ( ) ;",
      "if ( VAR23 >= 0 && VAR23 < ( 10 ) )",
      "FUN8 ( VAR24 [ VAR23 ] ) ;",
      "FUN9 ( \"\" ) ;",
      "if ( VAR23 >= 0 && VAR23 < ( 10 ) )",
      "FUN8 ( VAR24 [ VAR23 ] ) ;",
      "FUN9 ( \"\" ) ;"
    ],
    "pair_id": 3201,
    "xfg_id": 3276,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "32",
      "35",
      "41",
      "45",
      "48"
    ],
    "keyLine": "48",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        1
      ],
      [
        1,
        4
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-2400-c/testcases/000/232/560/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_12.c",
    "nodes-line": [
      "    if(globalReturnsTrueOrFalse())\n",
      "        data = (char *)malloc(10*sizeof(char));\n",
      "        data = (char *)malloc((10+1)*sizeof(char));\n",
      "        char source[10+1] = SRC_STRING;\n",
      "        strncpy(data, source, strlen(source) + 1);\n"
    ],
    "nodes-line-sym": [
      "if ( FUN1 ( ) )",
      "VAR1 = ( char * ) malloc ( 10 * sizeof ( char ) ) ;",
      "VAR1 = ( char * ) malloc ( ( 10 + 1 ) * sizeof ( char ) ) ;",
      "char VAR2 [ 10 + 1 ] = VAR3 ;",
      "strncpy ( VAR1 , VAR2 , strlen ( VAR2 ) + 1 ) ;"
    ],
    "pair_id": 4253,
    "xfg_id": 11469,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "104",
      "105",
      "108",
      "110",
      "114",
      "116",
      "118",
      "122"
    ],
    "keyLine": "118",
    "edges-No": [
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        1,
        2
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        7
      ],
      [
        4,
        6
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-7000-c/testcases/000/074/203/CWE124_Buffer_Underwrite__CWE839_rand_14.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(globalFive==5)\n",
      "        data = RAND32();\n",
      "    if(globalFive==5)\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( VAR2 == 5 )",
      "VAR1 = FUN1 ( ) ;",
      "if ( VAR2 == 5 )",
      "int VAR3 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR3 [ VAR1 ] = 1 ;",
      "FUN2 ( VAR3 [ VAR4 ] ) ;"
    ],
    "pair_id": 3307,
    "xfg_id": 9424,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "31",
      "33",
      "36",
      "38",
      "41",
      "50",
      "52",
      "56"
    ],
    "keyLine": "52",
    "edges-No": [
      [
        0,
        2
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        4,
        6
      ],
      [
        4,
        7
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ]
    ],
    "target": 1,
    "filePath": "119-2600-c/testcases/000/232/272/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c",
    "nodes-line": [
      "    CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_unionType myUnion;\n",
      "    data = -1;\n",
      "    myUnion.unionFirst = data;\n",
      "        int data = myUnion.unionSecond;\n",
      "            int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "            if (data >= 0)\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34_unionType VAR1 ;",
      "VAR2 = - 1 ;",
      "VAR1 . VAR3 = VAR2 ;",
      "int VAR2 = VAR1 . VAR4 ;",
      "int * VAR5 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "if ( VAR2 >= 0 )",
      "VAR5 [ VAR2 ] = 1 ;",
      "FUN1 ( VAR5 [ VAR6 ] ) ;"
    ],
    "pair_id": 67,
    "xfg_id": 9425,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "67",
      "68",
      "71",
      "74",
      "78",
      "80",
      "82",
      "84",
      "86"
    ],
    "keyLine": "86",
    "edges-No": [
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        1,
        2
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        4,
        6
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        8
      ],
      [
        7,
        7
      ],
      [
        7,
        8
      ]
    ],
    "target": 0,
    "filePath": "119-7000-c/testcases/000/074/157/CWE124_Buffer_Underwrite__CWE839_negative_16.c",
    "nodes-line": [
      "    data = -1;\n",
      "    while(1)\n",
      "        data = -5;\n",
      "    while(1)\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "while ( 1 )",
      "VAR1 = - 5 ;",
      "while ( 1 )",
      "int VAR2 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR2 [ VAR1 ] = 1 ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "FUN1 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 3796,
    "xfg_id": 11477,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "27",
      "29",
      "33",
      "34",
      "35"
    ],
    "keyLine": "35",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        4
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-3300-c/testcases/000/231/421/CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c",
    "nodes-line": [
      "void CWE121_Stack_Based_Buffer_Overflow__CWE135_22_badSink(void * data)\n",
      "    if(CWE121_Stack_Based_Buffer_Overflow__CWE135_22_badGlobal)\n",
      "            size_t dataLen = strlen((char *)data);\n",
      "            void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));\n",
      "            (void)wcscpy(dest, data);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( void * VAR1 )",
      "if ( VAR2 )",
      "size_t VAR3 = strlen ( ( char * ) VAR1 ) ;",
      "void * VAR4 = ( void * ) FUN2 ( ( VAR3 + 1 ) * sizeof ( wchar_t ) ) ;",
      "( void ) wcscpy ( VAR4 , VAR1 ) ;"
    ],
    "pair_id": 2660,
    "xfg_id": 11490,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "31",
      "32",
      "35",
      "39",
      "42",
      "44",
      "46"
    ],
    "keyLine": "44",
    "edges-No": [
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        1,
        2
      ],
      [
        2,
        6
      ],
      [
        2,
        5
      ],
      [
        3,
        5
      ],
      [
        4,
        4
      ],
      [
        4,
        5
      ],
      [
        5,
        5
      ],
      [
        5,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-2800-c/testcases/000/231/983/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    if(staticTrue)\n",
      "        data = (int *)malloc(10);\n",
      "        int source[10] = {0};\n",
      "        for (i = 0; i < 10; i++)\n",
      "            data[i] = source[i];\n",
      "        printIntLine(data[0]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "if ( VAR2 )",
      "VAR1 = ( int * ) malloc ( 10 ) ;",
      "int VAR3 [ 10 ] = { 0 } ;",
      "for ( VAR4 = 0 ; VAR4 < 10 ; VAR4 ++ )",
      "VAR1 [ VAR4 ] = VAR3 [ VAR4 ] ;",
      "FUN1 ( VAR1 [ 0 ] ) ;"
    ],
    "pair_id": 65,
    "xfg_id": 3299,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "60",
      "63",
      "65",
      "67",
      "69",
      "70",
      "71",
      "72"
    ],
    "keyLine": "65",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        0,
        7
      ],
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        6
      ],
      [
        1,
        7
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ],
      [
        2,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-2800-c/testcases/000/231/935/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c",
    "nodes-line": [
      "    while(1)\n",
      "            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));\n",
      "            structCharVoid->voidSecond = (void *)SRC_STR;\n",
      "            printLine((char *)structCharVoid->voidSecond);\n",
      "            memmove(structCharVoid->charFirst, SRC_STR, sizeof(structCharVoid->charFirst));\n",
      "            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\\0'; /* null terminate the string */\n",
      "            printLine((char *)structCharVoid->charFirst);\n",
      "            printLine((char *)structCharVoid->voidSecond);\n"
    ],
    "nodes-line-sym": [
      "while ( 1 )",
      "VAR1 * VAR2 = ( VAR1 * ) malloc ( sizeof ( VAR1 ) ) ;",
      "VAR2 -> VAR3 = ( void * ) VAR4 ;",
      "FUN1 ( ( char * ) VAR2 -> VAR3 ) ;",
      "memmove ( VAR2 -> VAR5 , VAR4 , sizeof ( VAR2 -> VAR5 ) ) ;",
      "VAR2 -> VAR5 [ ( sizeof ( VAR2 -> VAR5 ) / sizeof ( char ) ) - 1 ] = '' ;",
      "FUN1 ( ( char * ) VAR2 -> VAR5 ) ;",
      "FUN1 ( ( char * ) VAR2 -> VAR3 ) ;"
    ],
    "pair_id": 6767,
    "xfg_id": 9449,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "61",
      "62",
      "64",
      "65"
    ],
    "keyLine": "61",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/065/774/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_33.cpp",
    "nodes-line": [
      "    char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    data = dataBuffer;\n",
      "    memset(data, 'A', 50-1); /* fill with 'A's */\n",
      "    data[50-1] = '\\0'; /* null terminate */\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "VAR2 = VAR1 ;",
      "memset ( VAR2 , '' , 50 - 1 ) ;",
      "VAR2 [ 50 - 1 ] = '' ;"
    ],
    "pair_id": 2790,
    "xfg_id": 11505,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "124",
      "125",
      "128",
      "130",
      "134",
      "141",
      "143",
      "147"
    ],
    "keyLine": "143",
    "edges-No": [
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        1,
        2
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        7
      ],
      [
        4,
        6
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/067/670/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_large_07.cpp",
    "nodes-line": [
      "    data = -1;\n",
      "    if(staticFive==5)\n",
      "        data = 10;\n",
      "    if(staticFive==5)\n",
      "            int * buffer = new int[10];\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( VAR2 == 5 )",
      "VAR1 = 10 ;",
      "if ( VAR2 == 5 )",
      "int * VAR3 = new int [ 10 ] ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR3 [ VAR1 ] = 1 ;",
      "FUN1 ( VAR3 [ VAR4 ] ) ;"
    ],
    "pair_id": 3092,
    "xfg_id": 11509,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "36",
      "37",
      "38",
      "42",
      "43"
    ],
    "keyLine": "36",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/067/138/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_43.cpp",
    "nodes-line": [
      "    char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    data = dataBuffer;\n",
      "    badSource(data);\n",
      "        strcpy(dest, data);\n",
      "        printLine(data);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "VAR2 = VAR1 ;",
      "FUN2 ( VAR2 ) ;",
      "strcpy ( VAR3 , VAR2 ) ;",
      "FUN3 ( VAR2 ) ;"
    ],
    "pair_id": 10156,
    "xfg_id": 3319,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "52",
      "53",
      "55",
      "56",
      "58",
      "59",
      "63",
      "65"
    ],
    "keyLine": "52",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        2
      ],
      [
        4,
        5
      ],
      [
        5,
        7
      ],
      [
        5,
        6
      ]
    ],
    "target": 0,
    "filePath": "119-10100-c/testcases/000/065/580/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_31.c",
    "nodes-line": [
      "    char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    data = dataBuffer;\n",
      "    memset(data, 'A', 50-1); /* fill with 'A's */\n",
      "    data[50-1] = '\\0'; /* null terminate */\n",
      "        char * dataCopy = data;\n",
      "        char * data = dataCopy;\n",
      "            memcpy(dest, data, strlen(data)*sizeof(char));\n",
      "            printLine(data);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "VAR2 = VAR1 ;",
      "memset ( VAR2 , '' , 50 - 1 ) ;",
      "VAR2 [ 50 - 1 ] = '' ;",
      "char * VAR3 = VAR2 ;",
      "char * VAR2 = VAR3 ;",
      "memcpy ( VAR4 , VAR2 , strlen ( VAR2 ) * sizeof ( char ) ) ;",
      "FUN2 ( VAR2 ) ;"
    ],
    "pair_id": 13055,
    "xfg_id": 9463,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "37",
      "40",
      "44"
    ],
    "keyLine": "44",
    "edges-No": [
      [
        0,
        2
      ],
      [
        1,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/232/839/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_43.cpp",
    "nodes-line": [
      "    data = NULL;\n",
      "        char source[100];\n",
      "        memmove(data, source, 100*sizeof(char));\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "char VAR2 [ 100 ] ;",
      "memmove ( VAR1 , VAR2 , 100 * sizeof ( char ) ) ;"
    ],
    "pair_id": 1634,
    "xfg_id": 5370,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "74",
      "80",
      "89",
      "96",
      "98",
      "102"
    ],
    "keyLine": "98",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        1,
        3
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        2,
        5
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/067/625/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_fscanf_10.cpp",
    "nodes-line": [
      "    data = -1;\n",
      "    if(globalFalse)\n",
      "            int * buffer = new int[10];\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( VAR2 )",
      "int * VAR3 = new int [ 10 ] ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR3 [ VAR1 ] = 1 ;",
      "FUN1 ( VAR3 [ VAR4 ] ) ;"
    ],
    "pair_id": 8309,
    "xfg_id": 9470,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "27",
      "30",
      "35",
      "39"
    ],
    "keyLine": "39",
    "edges-No": [
      [
        0,
        4
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-2200-c/testcases/000/232/821/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_09.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    if(GLOBAL_CONST_TRUE)\n",
      "        data = (char *)malloc(50*sizeof(char));\n",
      "        char source[100];\n",
      "        memmove(data, source, 100*sizeof(char));\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "if ( VAR2 )",
      "VAR1 = ( char * ) malloc ( 50 * sizeof ( char ) ) ;",
      "char VAR3 [ 100 ] ;",
      "memmove ( VAR1 , VAR3 , 100 * sizeof ( char ) ) ;"
    ],
    "pair_id": 164,
    "xfg_id": 7423,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "27",
      "32",
      "33",
      "37",
      "39",
      "41"
    ],
    "keyLine": "37",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        6
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        5,
        5
      ],
      [
        6,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-10100-c/testcases/000/065/532/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_31.c",
    "nodes-line": [
      "    char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    data = dataBuffer;\n",
      "        char * dataCopy = data;\n",
      "        char * data = dataCopy;\n",
      "            dataLen = strlen(data);\n",
      "            for (i = 0; i < dataLen; i++)\n",
      "                dest[i] = data[i];\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "VAR2 = VAR1 ;",
      "char * VAR3 = VAR2 ;",
      "char * VAR2 = VAR3 ;",
      "VAR4 = strlen ( VAR2 ) ;",
      "for ( VAR5 = 0 ; VAR5 < VAR4 ; VAR5 ++ )",
      "VAR6 [ VAR5 ] = VAR2 [ VAR5 ] ;"
    ],
    "pair_id": 2061,
    "xfg_id": 11542,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "27",
      "28",
      "31",
      "36",
      "39",
      "43",
      "44",
      "45",
      "46",
      "47",
      "48"
    ],
    "keyLine": "43",
    "edges-No": [
      [
        0,
        5
      ],
      [
        0,
        8
      ],
      [
        1,
        3
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        8
      ],
      [
        4,
        10
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        4,
        7
      ],
      [
        4,
        8
      ],
      [
        4,
        9
      ],
      [
        5,
        6
      ],
      [
        6,
        10
      ],
      [
        6,
        7
      ],
      [
        6,
        8
      ],
      [
        6,
        9
      ],
      [
        7,
        7
      ]
    ],
    "target": 1,
    "filePath": "119-2800-c/testcases/000/232/129/CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    if(globalReturnsTrue())\n",
      "            wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));\n",
      "            data = (void *)dataBadBuffer;\n",
      "    if(globalReturnsTrue())\n",
      "            size_t dataLen = strlen((char *)data);\n",
      "            void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));\n",
      "            if (dest == NULL) {exit(-1);}\n",
      "            (void)wcscpy(dest, data);\n",
      "            printLine((char *)dest);\n",
      "            free(dest);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "if ( FUN1 ( ) )",
      "wchar_t * VAR2 = ( wchar_t * ) malloc ( 50 * sizeof ( wchar_t ) ) ;",
      "VAR1 = ( void * ) VAR2 ;",
      "if ( FUN1 ( ) )",
      "size_t VAR3 = strlen ( ( char * ) VAR1 ) ;",
      "void * VAR4 = ( void * ) calloc ( VAR3 + 1 , sizeof ( wchar_t ) ) ;",
      "if ( VAR4 == NULL ) { FUN2 ( - 1 ) ; }",
      "( void ) wcscpy ( VAR4 , VAR1 ) ;",
      "FUN3 ( ( char * ) VAR4 ) ;",
      "free ( VAR4 ) ;"
    ],
    "pair_id": 2522,
    "xfg_id": 7456,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "32",
      "33",
      "37",
      "39",
      "41"
    ],
    "keyLine": "37",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        5
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ],
      [
        4,
        4
      ],
      [
        5,
        5
      ]
    ],
    "target": 1,
    "filePath": "119-1600-c/testcases/000/233/472/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c",
    "nodes-line": [
      "    data = (char *)malloc(100*sizeof(char));\n",
      "        char * dataCopy = data;\n",
      "        char * data = dataCopy;\n",
      "            dataLen = strlen(data);\n",
      "            for (i = 0; i < dataLen; i++)\n",
      "                dest[i] = data[i];\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "char * VAR2 = VAR1 ;",
      "char * VAR1 = VAR2 ;",
      "VAR3 = strlen ( VAR1 ) ;",
      "for ( VAR4 = 0 ; VAR4 < VAR3 ; VAR4 ++ )",
      "VAR5 [ VAR4 ] = VAR1 [ VAR4 ] ;"
    ],
    "pair_id": 13447,
    "xfg_id": 7463,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "95",
      "97",
      "100",
      "102",
      "104",
      "107",
      "109",
      "111",
      "113"
    ],
    "keyLine": "113",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        5
      ],
      [
        1,
        6
      ],
      [
        2,
        4
      ],
      [
        2,
        8
      ],
      [
        2,
        6
      ],
      [
        3,
        4
      ],
      [
        3,
        3
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        8
      ],
      [
        7,
        8
      ],
      [
        7,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/067/611/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_fgets_74b.cpp",
    "nodes-line": [
      "void goodB2GSink(map<int, int> dataMap)\n",
      "    int data = dataMap[2];\n",
      "        int * buffer = new int[10];\n",
      "        for (i = 0; i < 10; i++)\n",
      "            buffer[i] = 0;\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "            for(i = 0; i < 10; i++)\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( VAR1 < int , int > VAR2 )",
      "int VAR3 = VAR2 [ 2 ] ;",
      "int * VAR4 = new int [ 10 ] ;",
      "for ( VAR5 = 0 ; VAR5 < 10 ; VAR5 ++ )",
      "VAR4 [ VAR5 ] = 0 ;",
      "if ( VAR3 >= 0 && VAR3 < ( 10 ) )",
      "VAR4 [ VAR3 ] = 1 ;",
      "for ( VAR5 = 0 ; VAR5 < 10 ; VAR5 ++ )",
      "FUN2 ( VAR4 [ VAR5 ] ) ;"
    ],
    "pair_id": 2580,
    "xfg_id": 9512,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "164",
      "173",
      "174",
      "175",
      "179",
      "181",
      "183",
      "186",
      "187",
      "189",
      "191",
      "192",
      "193",
      "194",
      "195",
      "197",
      "199",
      "201",
      "203",
      "204",
      "206",
      "209",
      "210",
      "212",
      "215",
      "217",
      "219",
      "220",
      "222",
      "224",
      "226",
      "229",
      "231",
      "249",
      "251",
      "253",
      "255",
      "260"
    ],
    "keyLine": "195",
    "edges-No": [
      [
        0,
        29
      ],
      [
        0,
        31
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        27
      ],
      [
        1,
        27
      ],
      [
        1,
        28
      ],
      [
        1,
        2
      ],
      [
        2,
        29
      ],
      [
        2,
        30
      ],
      [
        2,
        8
      ],
      [
        2,
        27
      ],
      [
        3,
        21
      ],
      [
        3,
        25
      ],
      [
        3,
        24
      ],
      [
        4,
        7
      ],
      [
        4,
        8
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        6,
        31
      ],
      [
        7,
        14
      ],
      [
        7,
        16
      ],
      [
        7,
        18
      ],
      [
        7,
        27
      ],
      [
        7,
        8
      ],
      [
        7,
        28
      ],
      [
        8,
        11
      ],
      [
        8,
        12
      ],
      [
        8,
        13
      ],
      [
        8,
        14
      ],
      [
        8,
        9
      ],
      [
        8,
        10
      ],
      [
        11,
        12
      ],
      [
        12,
        12
      ],
      [
        12,
        13
      ],
      [
        13,
        11
      ],
      [
        14,
        15
      ],
      [
        14,
        16
      ],
      [
        16,
        17
      ],
      [
        16,
        18
      ],
      [
        16,
        19
      ],
      [
        18,
        29
      ],
      [
        18,
        21
      ],
      [
        18,
        30
      ],
      [
        18,
        19
      ],
      [
        19,
        21
      ],
      [
        19,
        22
      ],
      [
        19,
        20
      ],
      [
        21,
        22
      ],
      [
        21,
        24
      ],
      [
        22,
        25
      ],
      [
        22,
        26
      ],
      [
        22,
        23
      ],
      [
        22,
        24
      ],
      [
        25,
        33
      ],
      [
        25,
        34
      ],
      [
        26,
        4
      ],
      [
        27,
        28
      ],
      [
        29,
        30
      ],
      [
        31,
        32
      ],
      [
        33,
        34
      ],
      [
        33,
        37
      ],
      [
        33,
        35
      ],
      [
        34,
        36
      ],
      [
        35,
        35
      ],
      [
        35,
        36
      ]
    ],
    "target": 0,
    "filePath": "119-2600-c/testcases/000/232/348/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_16.c",
    "nodes-line": [
      "    while(1)\n",
      "            SOCKET listenSocket = INVALID_SOCKET;\n",
      "            SOCKET acceptSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                    break;\n",
      "                wsaDataInit = 1;\n",
      "                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (listenSocket == INVALID_SOCKET)\n",
      "                    break;\n",
      "                memset(&service, 0, sizeof(service));\n",
      "                service.sin_family = AF_INET;\n",
      "                service.sin_addr.s_addr = INADDR_ANY;\n",
      "                service.sin_port = htons(TCP_PORT);\n",
      "                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                    break;\n",
      "                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "                    break;\n",
      "                acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "                if (acceptSocket == SOCKET_ERROR)\n",
      "                    break;\n",
      "                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                    break;\n",
      "                inputBuffer[recvResult] = '\\0';\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "            if (listenSocket != INVALID_SOCKET)\n",
      "                CLOSE_SOCKET(listenSocket);\n",
      "            if (acceptSocket != INVALID_SOCKET)\n",
      "                CLOSE_SOCKET(acceptSocket);\n",
      "            if (wsaDataInit)\n",
      "                WSACleanup();\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n",
      "                printLine(\"ERROR: Array index is out-of-bounds\");\n"
    ],
    "nodes-line-sym": [
      "while ( 1 )",
      "SOCKET VAR1 = VAR2 ;",
      "SOCKET VAR3 = VAR2 ;",
      "char VAR4 [ VAR5 ] ;",
      "if ( FUN1 ( FUN2 ( 2 , 2 ) , & VAR6 ) != VAR7 )",
      "break ;",
      "VAR8 = 1 ;",
      "VAR1 = socket ( VAR9 , VAR10 , VAR11 ) ;",
      "if ( VAR1 == VAR2 )",
      "break ;",
      "memset ( & VAR12 , 0 , sizeof ( VAR12 ) ) ;",
      "VAR12 . VAR13 = VAR9 ;",
      "VAR12 . VAR14 . VAR15 = VAR16 ;",
      "VAR12 . VAR17 = FUN3 ( VAR18 ) ;",
      "if ( bind ( VAR1 , ( struct VAR19 * ) & VAR12 , sizeof ( VAR12 ) ) == VAR20 )",
      "break ;",
      "if ( FUN4 ( VAR1 , VAR21 ) == VAR20 )",
      "break ;",
      "VAR3 = accept ( VAR1 , NULL , NULL ) ;",
      "if ( VAR3 == VAR20 )",
      "break ;",
      "VAR22 = recv ( VAR3 , VAR4 , VAR5 - 1 , 0 ) ;",
      "if ( VAR22 == VAR20 || VAR22 == 0 )",
      "break ;",
      "VAR4 [ VAR22 ] = '' ;",
      "VAR23 = atoi ( VAR4 ) ;",
      "while ( 0 ) ;",
      "if ( VAR1 != VAR2 )",
      "FUN5 ( VAR1 ) ;",
      "if ( VAR3 != VAR2 )",
      "FUN5 ( VAR3 ) ;",
      "if ( VAR8 )",
      "FUN6 ( ) ;",
      "if ( VAR23 >= 0 && VAR23 < ( 10 ) )",
      "VAR24 [ VAR23 ] = 1 ;",
      "for ( VAR25 = 0 ; VAR25 < 10 ; VAR25 ++ )",
      "FUN7 ( VAR24 [ VAR25 ] ) ;",
      "FUN8 ( \"\" ) ;"
    ],
    "pair_id": 7688,
    "xfg_id": 3374,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "66",
      "53",
      "55",
      "57",
      "62",
      "63"
    ],
    "keyLine": "66",
    "edges-No": [
      [
        1,
        3
      ],
      [
        2,
        0
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        5
      ],
      [
        5,
        0
      ]
    ],
    "target": 1,
    "filePath": "119-13500-c/testcases/000/000/392/basic-00070-med.c",
    "nodes-line": [
      "    buf[17] = 'A';\n",
      "  jmp_buf env;\n",
      "  char buf[10];\n",
      "  if (setjmp(env) != 0)\n",
      "  flag = 1;\n",
      "  if (flag)\n"
    ],
    "nodes-line-sym": [
      "VAR1 [ 17 ] = '' ;",
      "jmp_buf VAR2 ;",
      "char VAR1 [ 10 ] ;",
      "if ( FUN1 ( VAR2 ) != 0 )",
      "VAR3 = 1 ;",
      "if ( VAR3 )"
    ],
    "pair_id": 7192,
    "xfg_id": 11566,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "28",
      "31",
      "32",
      "33",
      "34",
      "36",
      "44"
    ],
    "keyLine": "31",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        0
      ],
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        2,
        2
      ],
      [
        5,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-400-c/testcases/000/234/949/CWE127_Buffer_Underread__malloc_char_ncpy_17.c",
    "nodes-line": [
      "    for(i = 0; i < 1; i++)\n",
      "            char * dataBuffer = (char *)malloc(100*sizeof(char));\n",
      "            if (dataBuffer == NULL) {exit(-1);}\n",
      "            memset(dataBuffer, 'A', 100-1);\n",
      "            dataBuffer[100-1] = '\\0';\n",
      "            data = dataBuffer - 8;\n",
      "        strncpy(dest, data, strlen(dest));\n"
    ],
    "nodes-line-sym": [
      "for ( VAR1 = 0 ; VAR1 < 1 ; VAR1 ++ )",
      "char * VAR2 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR2 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR2 , '' , 100 - 1 ) ;",
      "VAR2 [ 100 - 1 ] = '' ;",
      "VAR3 = VAR2 - 8 ;",
      "strncpy ( VAR4 , VAR3 , strlen ( VAR4 ) ) ;"
    ],
    "pair_id": 13251,
    "xfg_id": 9527,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "69",
      "71",
      "80",
      "81",
      "83"
    ],
    "keyLine": "83",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        4
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ]
    ],
    "target": 0,
    "filePath": "119-2700-c/testcases/000/232/137/CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c",
    "nodes-line": [
      "static void goodB2G1Sink(void * data)\n",
      "    if(goodB2G1Static)\n",
      "            size_t dataLen = wcslen((wchar_t *)data);\n",
      "            void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));\n",
      "            (void)wcscpy(dest, data);\n"
    ],
    "nodes-line-sym": [
      "static void FUN1 ( void * VAR1 )",
      "if ( VAR2 )",
      "size_t VAR3 = wcslen ( ( wchar_t * ) VAR1 ) ;",
      "void * VAR4 = ( void * ) calloc ( VAR3 + 1 , sizeof ( wchar_t ) ) ;",
      "( void ) wcscpy ( VAR4 , VAR1 ) ;"
    ],
    "pair_id": 9352,
    "xfg_id": 11587,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "91",
      "96",
      "102",
      "103",
      "107"
    ],
    "keyLine": "107",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ]
    ],
    "target": 0,
    "filePath": "119-2700-c/testcases/000/232/136/CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c",
    "nodes-line": [
      "        char * dataGoodBuffer = (char *)malloc(50*sizeof(char));\n",
      "        data = (void *)dataGoodBuffer;\n",
      "        size_t dataLen = strlen((char *)data);\n",
      "        void * dest = (void *)calloc(dataLen+1, 1);\n",
      "        free(dest);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) malloc ( 50 * sizeof ( char ) ) ;",
      "VAR2 = ( void * ) VAR1 ;",
      "size_t VAR3 = strlen ( ( char * ) VAR2 ) ;",
      "void * VAR4 = ( void * ) calloc ( VAR3 + 1 , 1 ) ;",
      "free ( VAR4 ) ;"
    ],
    "pair_id": 7536,
    "xfg_id": 3396,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "33",
      "34",
      "36",
      "37",
      "38",
      "40",
      "44",
      "46",
      "47"
    ],
    "keyLine": "33",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        1,
        1
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        5,
        8
      ]
    ],
    "target": 1,
    "filePath": "119-1600-c/testcases/000/233/507/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_34.c",
    "nodes-line": [
      "    data = (char *)malloc(100*sizeof(char));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "    memset(data, 'A', 100-1); /* fill with 'A's */\n",
      "    data[100-1] = '\\0'; /* null terminate */\n",
      "    myUnion.unionFirst = data;\n",
      "        char * data = myUnion.unionSecond;\n",
      "            memcpy(dest, data, strlen(data)*sizeof(char));\n",
      "            printLine(data);\n",
      "            free(data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR1 , '' , 100 - 1 ) ;",
      "VAR1 [ 100 - 1 ] = '' ;",
      "VAR2 . VAR3 = VAR1 ;",
      "char * VAR1 = VAR2 . VAR4 ;",
      "memcpy ( VAR5 , VAR1 , strlen ( VAR1 ) * sizeof ( char ) ) ;",
      "FUN2 ( VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 1549,
    "xfg_id": 11601,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "27",
      "30",
      "37",
      "42",
      "46"
    ],
    "keyLine": "46",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        1
      ],
      [
        1,
        4
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-2200-c/testcases/000/232/791/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_12.c",
    "nodes-line": [
      "    if(globalReturnsTrueOrFalse())\n",
      "        data = (char *)malloc(50*sizeof(char));\n",
      "        data = (char *)malloc(100*sizeof(char));\n",
      "        char source[100];\n",
      "        memcpy(data, source, 100*sizeof(char));\n"
    ],
    "nodes-line-sym": [
      "if ( FUN1 ( ) )",
      "VAR1 = ( char * ) malloc ( 50 * sizeof ( char ) ) ;",
      "VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "char VAR2 [ 100 ] ;",
      "memcpy ( VAR1 , VAR2 , 100 * sizeof ( char ) ) ;"
    ],
    "pair_id": 12838,
    "xfg_id": 5457,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "68",
      "69",
      "72",
      "76",
      "81",
      "83",
      "85",
      "87"
    ],
    "keyLine": "87",
    "edges-No": [
      [
        0,
        7
      ],
      [
        1,
        1
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ],
      [
        3,
        7
      ],
      [
        4,
        5
      ],
      [
        4,
        7
      ],
      [
        5,
        7
      ],
      [
        6,
        6
      ],
      [
        6,
        7
      ],
      [
        7,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/074/782/CWE124_Buffer_Underwrite__new_char_loop_17.cpp",
    "nodes-line": [
      "    data = NULL;\n",
      "    for(h = 0; h < 1; h++)\n",
      "            char * dataBuffer = new char[100];\n",
      "            data = dataBuffer;\n",
      "        char source[100];\n",
      "        source[100-1] = '\\0'; /* null terminate */\n",
      "        for (i = 0; i < 100; i++)\n",
      "            data[i] = source[i];\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "for ( VAR2 = 0 ; VAR2 < 1 ; VAR2 ++ )",
      "char * VAR3 = new char [ 100 ] ;",
      "VAR1 = VAR3 ;",
      "char VAR4 [ 100 ] ;",
      "VAR4 [ 100 - 1 ] = '' ;",
      "for ( VAR5 = 0 ; VAR5 < 100 ; VAR5 ++ )",
      "VAR1 [ VAR5 ] = VAR4 [ VAR5 ] ;"
    ],
    "pair_id": 6048,
    "xfg_id": 11606,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "36",
      "37",
      "38",
      "42",
      "44"
    ],
    "keyLine": "36",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/065/682/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_43.cpp",
    "nodes-line": [
      "    char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    data = dataBuffer;\n",
      "    badSource(data);\n",
      "        strncat(dest, data, strlen(data));\n",
      "        printLine(data);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "VAR2 = VAR1 ;",
      "FUN2 ( VAR2 ) ;",
      "strncat ( VAR3 , VAR2 , strlen ( VAR2 ) ) ;",
      "FUN3 ( VAR2 ) ;"
    ],
    "pair_id": 13821,
    "xfg_id": 5467,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "74",
      "75",
      "78",
      "80",
      "83",
      "92",
      "95",
      "97",
      "99"
    ],
    "keyLine": "99",
    "edges-No": [
      [
        0,
        7
      ],
      [
        0,
        8
      ],
      [
        1,
        3
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ],
      [
        4,
        7
      ],
      [
        4,
        8
      ],
      [
        5,
        7
      ],
      [
        5,
        6
      ],
      [
        6,
        8
      ],
      [
        7,
        8
      ]
    ],
    "target": 0,
    "filePath": "119-6400-c/testcases/000/075/661/CWE126_Buffer_Overread__CWE129_fgets_16.c",
    "nodes-line": [
      "    data = -1;\n",
      "    while(1)\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n",
      "            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n",
      "                data = atoi(inputBuffer);\n",
      "    while(1)\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                printIntLine(buffer[data]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "while ( 1 )",
      "char VAR2 [ VAR3 ] = \"\" ;",
      "if ( fgets ( VAR2 , VAR3 , stdin ) != NULL )",
      "VAR1 = atoi ( VAR2 ) ;",
      "while ( 1 )",
      "int VAR4 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "FUN1 ( VAR4 [ VAR1 ] ) ;"
    ],
    "pair_id": 6447,
    "xfg_id": 7517,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "54",
      "58"
    ],
    "keyLine": "58",
    "edges-No": [
      [
        0,
        1
      ]
    ],
    "target": 0,
    "filePath": "119-13500-c/testcases/000/000/314/basic-00050-ok.c",
    "nodes-line": [
      "  char src[10];\n",
      "  src[10 - 1] = '\\0';\n"
    ],
    "nodes-line-sym": [
      "char VAR1 [ 10 ] ;",
      "VAR1 [ 10 - 1 ] = '' ;"
    ],
    "pair_id": 150,
    "xfg_id": 7520,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "59",
      "60",
      "64",
      "71"
    ],
    "keyLine": "59",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        1
      ],
      [
        1,
        1
      ],
      [
        2,
        3
      ]
    ],
    "target": 0,
    "filePath": "119-300-c/testcases/000/235/065/CWE127_Buffer_Underread__malloc_wchar_t_memmove_01.c",
    "nodes-line": [
      "        wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));\n",
      "        if (dataBuffer == NULL) {exit(-1);}\n",
      "        data = dataBuffer;\n",
      "        memmove(dest, data, 100*sizeof(wchar_t));\n"
    ],
    "nodes-line-sym": [
      "wchar_t * VAR1 = ( wchar_t * ) malloc ( 100 * sizeof ( wchar_t ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "VAR2 = VAR1 ;",
      "memmove ( VAR3 , VAR2 , 100 * sizeof ( wchar_t ) ) ;"
    ],
    "pair_id": 1576,
    "xfg_id": 7524,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "131",
      "104",
      "106",
      "109",
      "113",
      "120",
      "122",
      "124",
      "126"
    ],
    "keyLine": "106",
    "edges-No": [
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        4
      ],
      [
        2,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        5,
        6
      ],
      [
        5,
        0
      ],
      [
        5,
        7
      ],
      [
        6,
        8
      ],
      [
        7,
        7
      ],
      [
        7,
        8
      ]
    ],
    "target": 0,
    "filePath": "119-12500-c/testcases/000/062/564/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c",
    "nodes-line": [
      "            printLine(\"ERROR: Array index is out-of-bounds\");\n",
      "        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n",
      "        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n",
      "            data = atoi(inputBuffer);\n",
      "            printLine(\"fgets() failed.\");\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "            for(i = 0; i < 10; i++)\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "FUN1 ( \"\" ) ;",
      "char VAR1 [ VAR2 ] = \"\" ;",
      "if ( fgets ( VAR1 , VAR2 , stdin ) != NULL )",
      "VAR3 = atoi ( VAR1 ) ;",
      "FUN1 ( \"\" ) ;",
      "if ( VAR3 >= 0 && VAR3 < ( 10 ) )",
      "VAR4 [ VAR3 ] = 1 ;",
      "for ( VAR5 = 0 ; VAR5 < 10 ; VAR5 ++ )",
      "FUN2 ( VAR4 [ VAR5 ] ) ;"
    ],
    "pair_id": 3688,
    "xfg_id": 5479,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "34",
      "37",
      "39"
    ],
    "keyLine": "39",
    "edges-No": [
      [
        0,
        2
      ],
      [
        1,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/233/136/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_43.cpp",
    "nodes-line": [
      "    data = NULL;\n",
      "        int source[100] = {0}; /* fill with 0's */\n",
      "        memmove(data, source, 100*sizeof(int));\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "int VAR2 [ 100 ] = { 0 } ;",
      "memmove ( VAR1 , VAR2 , 100 * sizeof ( int ) ) ;"
    ],
    "pair_id": 11050,
    "xfg_id": 5480,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "27",
      "28",
      "31",
      "33",
      "37",
      "40",
      "42",
      "46",
      "48",
      "50",
      "52"
    ],
    "keyLine": "52",
    "edges-No": [
      [
        0,
        8
      ],
      [
        0,
        7
      ],
      [
        1,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        8
      ],
      [
        2,
        7
      ],
      [
        3,
        3
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        7
      ],
      [
        4,
        8
      ],
      [
        4,
        10
      ],
      [
        4,
        6
      ],
      [
        5,
        5
      ],
      [
        5,
        6
      ],
      [
        6,
        10
      ],
      [
        7,
        8
      ],
      [
        7,
        9
      ],
      [
        8,
        10
      ],
      [
        9,
        9
      ],
      [
        9,
        10
      ]
    ],
    "target": 1,
    "filePath": "119-2600-c/testcases/000/232/307/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_17.c",
    "nodes-line": [
      "    data = -1;\n",
      "    for(i = 0; i < 1; i++)\n",
      "        data = 10;\n",
      "    for(j = 0; j < 1; j++)\n",
      "            int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "            for (i = 0; i < 10; i++)\n",
      "                buffer[i] = 0;\n",
      "            if (data >= 0)\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "for ( VAR2 = 0 ; VAR2 < 1 ; VAR2 ++ )",
      "VAR1 = 10 ;",
      "for ( VAR3 = 0 ; VAR3 < 1 ; VAR3 ++ )",
      "int * VAR4 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "for ( VAR2 = 0 ; VAR2 < 10 ; VAR2 ++ )",
      "VAR4 [ VAR2 ] = 0 ;",
      "if ( VAR1 >= 0 )",
      "VAR4 [ VAR1 ] = 1 ;",
      "for ( VAR2 = 0 ; VAR2 < 10 ; VAR2 ++ )",
      "FUN1 ( VAR4 [ VAR2 ] ) ;"
    ],
    "pair_id": 2933,
    "xfg_id": 7530,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "54",
      "59",
      "61",
      "64"
    ],
    "keyLine": "64",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ]
    ],
    "target": 0,
    "filePath": "119-1000-c/testcases/000/234/225/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c",
    "nodes-line": [
      "    twoIntsStruct * *dataPtr1 = &data;\n",
      "        twoIntsStruct * data = *dataPtr1;\n",
      "        data = (twoIntsStruct *)malloc(sizeof(*data));\n",
      "        data->intTwo = 2;\n"
    ],
    "nodes-line-sym": [
      "VAR1 * * VAR2 = & VAR3 ;",
      "VAR1 * VAR3 = * VAR2 ;",
      "VAR3 = ( VAR1 * ) malloc ( sizeof ( * VAR3 ) ) ;",
      "VAR3 -> VAR4 = 2 ;"
    ],
    "pair_id": 11810,
    "xfg_id": 7533,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "84",
      "87",
      "88",
      "89",
      "91",
      "93",
      "95",
      "96"
    ],
    "keyLine": "87",
    "edges-No": [
      [
        0,
        7
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        1,
        7
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        6
      ],
      [
        2,
        2
      ],
      [
        3,
        7
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ]
    ],
    "target": 0,
    "filePath": "119-1000-c/testcases/000/234/267/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_13.c",
    "nodes-line": [
      "    if(GLOBAL_CONST_FIVE==5)\n",
      "            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));\n",
      "            if (structCharVoid == NULL) {exit(-1);}\n",
      "            structCharVoid->voidSecond = (void *)SRC_STR;\n",
      "            printWLine((wchar_t *)structCharVoid->voidSecond);\n",
      "            memmove(structCharVoid->charFirst, SRC_STR, sizeof(structCharVoid->charFirst));\n",
      "            printWLine((wchar_t *)structCharVoid->charFirst);\n",
      "            printWLine((wchar_t *)structCharVoid->voidSecond);\n"
    ],
    "nodes-line-sym": [
      "if ( VAR1 == 5 )",
      "VAR2 * VAR3 = ( VAR2 * ) malloc ( sizeof ( VAR2 ) ) ;",
      "if ( VAR3 == NULL ) { FUN1 ( - 1 ) ; }",
      "VAR3 -> VAR4 = ( void * ) VAR5 ;",
      "FUN2 ( ( wchar_t * ) VAR3 -> VAR4 ) ;",
      "memmove ( VAR3 -> VAR6 , VAR5 , sizeof ( VAR3 -> VAR6 ) ) ;",
      "FUN2 ( ( wchar_t * ) VAR3 -> VAR6 ) ;",
      "FUN2 ( ( wchar_t * ) VAR3 -> VAR4 ) ;"
    ],
    "pair_id": 916,
    "xfg_id": 3461,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "27",
      "30",
      "31",
      "32",
      "33",
      "35",
      "43"
    ],
    "keyLine": "30",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        2
      ],
      [
        2,
        2
      ],
      [
        5,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-400-c/testcases/000/234/935/CWE127_Buffer_Underread__malloc_char_ncpy_03.c",
    "nodes-line": [
      "    if(5==5)\n",
      "            char * dataBuffer = (char *)malloc(100*sizeof(char));\n",
      "            if (dataBuffer == NULL) {exit(-1);}\n",
      "            memset(dataBuffer, 'A', 100-1);\n",
      "            dataBuffer[100-1] = '\\0';\n",
      "            data = dataBuffer - 8;\n",
      "        strncpy(dest, data, strlen(dest));\n"
    ],
    "nodes-line-sym": [
      "if ( 5 == 5 )",
      "char * VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR1 , '' , 100 - 1 ) ;",
      "VAR1 [ 100 - 1 ] = '' ;",
      "VAR2 = VAR1 - 8 ;",
      "strncpy ( VAR3 , VAR2 , strlen ( VAR3 ) ) ;"
    ],
    "pair_id": 13034,
    "xfg_id": 11656,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "28",
      "29",
      "32",
      "35",
      "39",
      "41",
      "42",
      "48",
      "50",
      "52"
    ],
    "keyLine": "50",
    "edges-No": [
      [
        0,
        8
      ],
      [
        0,
        9
      ],
      [
        1,
        2
      ],
      [
        1,
        1
      ],
      [
        2,
        8
      ],
      [
        2,
        9
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        8
      ],
      [
        4,
        4
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        5,
        6
      ],
      [
        6,
        5
      ],
      [
        6,
        8
      ],
      [
        7,
        7
      ],
      [
        7,
        8
      ],
      [
        8,
        8
      ],
      [
        8,
        9
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/068/592/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_17.cpp",
    "nodes-line": [
      "    data = NULL;\n",
      "    for(i = 0; i < 1; i++)\n",
      "        data = new TwoIntsClass[50];\n",
      "        TwoIntsClass source[100];\n",
      "            for (i = 0; i < 100; i++)\n",
      "                source[i].intOne = 0;\n",
      "                source[i].intTwo = 0;\n",
      "            for (i = 0; i < 100; i++)\n",
      "                data[i] = source[i];\n",
      "            printIntLine(data[0].intOne);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "for ( VAR2 = 0 ; VAR2 < 1 ; VAR2 ++ )",
      "VAR1 = new VAR3 [ 50 ] ;",
      "TwoIntsClass VAR4 [ 100 ] ;",
      "for ( VAR2 = 0 ; VAR2 < 100 ; VAR2 ++ )",
      "VAR4 [ VAR2 ] . VAR5 = 0 ;",
      "VAR4 [ VAR2 ] . VAR6 = 0 ;",
      "for ( VAR2 = 0 ; VAR2 < 100 ; VAR2 ++ )",
      "VAR1 [ VAR2 ] = VAR4 [ VAR2 ] ;",
      "FUN1 ( VAR1 [ 0 ] . VAR5 ) ;"
    ],
    "pair_id": 11245,
    "xfg_id": 7565,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "27",
      "30",
      "36",
      "38",
      "42",
      "45",
      "47",
      "51"
    ],
    "keyLine": "47",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        1
      ],
      [
        1,
        5
      ],
      [
        1,
        6
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        7
      ],
      [
        4,
        6
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ]
    ],
    "target": 1,
    "filePath": "119-12400-c/testcases/000/062/671/CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c",
    "nodes-line": [
      "    if(globalReturnsTrueOrFalse())\n",
      "        data = 10;\n",
      "        data = 7;\n",
      "    if(globalReturnsTrueOrFalse())\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0)\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "if ( FUN1 ( ) )",
      "VAR1 = 10 ;",
      "VAR1 = 7 ;",
      "if ( FUN1 ( ) )",
      "int VAR2 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 )",
      "VAR2 [ VAR1 ] = 1 ;",
      "FUN2 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 6883,
    "xfg_id": 9639,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "27",
      "30",
      "36",
      "38",
      "42",
      "45",
      "47",
      "51",
      "53",
      "55",
      "57"
    ],
    "keyLine": "57",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        1
      ],
      [
        1,
        7
      ],
      [
        1,
        8
      ],
      [
        2,
        7
      ],
      [
        2,
        8
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        7
      ],
      [
        4,
        8
      ],
      [
        4,
        10
      ],
      [
        4,
        6
      ],
      [
        5,
        5
      ],
      [
        5,
        6
      ],
      [
        6,
        10
      ],
      [
        7,
        8
      ],
      [
        7,
        9
      ],
      [
        8,
        10
      ],
      [
        9,
        10
      ],
      [
        9,
        9
      ]
    ],
    "target": 1,
    "filePath": "119-2600-c/testcases/000/232/302/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_12.c",
    "nodes-line": [
      "    if(globalReturnsTrueOrFalse())\n",
      "        data = 10;\n",
      "        data = 7;\n",
      "    if(globalReturnsTrueOrFalse())\n",
      "            int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "            for (i = 0; i < 10; i++)\n",
      "                buffer[i] = 0;\n",
      "            if (data >= 0)\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "if ( FUN1 ( ) )",
      "VAR1 = 10 ;",
      "VAR1 = 7 ;",
      "if ( FUN1 ( ) )",
      "int * VAR2 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "VAR2 [ VAR3 ] = 0 ;",
      "if ( VAR1 >= 0 )",
      "VAR2 [ VAR1 ] = 1 ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "FUN2 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 7953,
    "xfg_id": 3500,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "37",
      "40",
      "41",
      "45"
    ],
    "keyLine": "45",
    "edges-No": [
      [
        0,
        0
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ]
    ],
    "target": 1,
    "filePath": "119-2900-c/testcases/000/231/900/CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_17.c",
    "nodes-line": [
      "    for(j = 0; j < 1; j++)\n",
      "            charVoid structCharVoid;\n",
      "            structCharVoid.voidSecond = (void *)SRC_STR;\n",
      "            memmove(structCharVoid.charFirst, SRC_STR, sizeof(structCharVoid));\n"
    ],
    "nodes-line-sym": [
      "for ( VAR1 = 0 ; VAR1 < 1 ; VAR1 ++ )",
      "charVoid VAR2 ;",
      "VAR2 . VAR3 = ( void * ) VAR4 ;",
      "memmove ( VAR2 . VAR5 , VAR4 , sizeof ( VAR2 ) ) ;"
    ],
    "pair_id": 10175,
    "xfg_id": 9647,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "27",
      "29",
      "33",
      "34",
      "35",
      "36",
      "37",
      "38"
    ],
    "keyLine": "33",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        5
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        6
      ],
      [
        1,
        7
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        4,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-2700-c/testcases/000/232/138/CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c",
    "nodes-line": [
      "void CWE122_Heap_Based_Buffer_Overflow__CWE135_22_badSink(void * data)\n",
      "    if(CWE122_Heap_Based_Buffer_Overflow__CWE135_22_badGlobal)\n",
      "            size_t dataLen = strlen((char *)data);\n",
      "            void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));\n",
      "            if (dest == NULL) {exit(-1);}\n",
      "            (void)wcscpy(dest, data);\n",
      "            printLine((char *)dest);\n",
      "            free(dest);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( void * VAR1 )",
      "if ( VAR2 )",
      "size_t VAR3 = strlen ( ( char * ) VAR1 ) ;",
      "void * VAR4 = ( void * ) calloc ( VAR3 + 1 , sizeof ( wchar_t ) ) ;",
      "if ( VAR4 == NULL ) { FUN2 ( - 1 ) ; }",
      "( void ) wcscpy ( VAR4 , VAR1 ) ;",
      "FUN3 ( ( char * ) VAR4 ) ;",
      "free ( VAR4 ) ;"
    ],
    "pair_id": 1702,
    "xfg_id": 9655,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "60",
      "61",
      "63",
      "64",
      "65",
      "67",
      "71",
      "72",
      "73"
    ],
    "keyLine": "60",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        1
      ],
      [
        4,
        5
      ],
      [
        5,
        7
      ],
      [
        5,
        8
      ],
      [
        5,
        6
      ]
    ],
    "target": 0,
    "filePath": "119-1100-c/testcases/000/234/036/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_34.c",
    "nodes-line": [
      "    data = (char *)malloc(100*sizeof(char));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "    memset(data, 'A', 50-1); /* fill with 'A's */\n",
      "    data[50-1] = '\\0'; /* null terminate */\n",
      "    myUnion.unionFirst = data;\n",
      "        char * data = myUnion.unionSecond;\n",
      "            strcpy(dest, data);\n",
      "            printLine(data);\n",
      "            free(data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR1 , '' , 50 - 1 ) ;",
      "VAR1 [ 50 - 1 ] = '' ;",
      "VAR2 . VAR3 = VAR1 ;",
      "char * VAR1 = VAR2 . VAR4 ;",
      "strcpy ( VAR5 , VAR1 ) ;",
      "FUN2 ( VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 9339,
    "xfg_id": 9677,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "151",
      "160",
      "161",
      "162",
      "166",
      "173",
      "174",
      "182",
      "186",
      "190",
      "191",
      "196",
      "197",
      "204",
      "206",
      "229",
      "231",
      "235"
    ],
    "keyLine": "204",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        1,
        2
      ],
      [
        2,
        6
      ],
      [
        3,
        13
      ],
      [
        3,
        11
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        5,
        7
      ],
      [
        5,
        8
      ],
      [
        5,
        9
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ],
      [
        8,
        10
      ],
      [
        9,
        11
      ],
      [
        9,
        10
      ],
      [
        10,
        11
      ],
      [
        10,
        12
      ],
      [
        11,
        12
      ],
      [
        12,
        13
      ],
      [
        12,
        14
      ],
      [
        13,
        15
      ],
      [
        13,
        16
      ],
      [
        14,
        4
      ],
      [
        15,
        17
      ],
      [
        15,
        16
      ]
    ],
    "target": 0,
    "filePath": "119-6200-c/testcases/000/075/805/CWE126_Buffer_Overread__CWE129_listen_socket_16.c",
    "nodes-line": [
      "    while(1)\n",
      "            SOCKET listenSocket = INVALID_SOCKET;\n",
      "            SOCKET acceptSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (listenSocket == INVALID_SOCKET)\n",
      "                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "                acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "                if (acceptSocket == SOCKET_ERROR)\n",
      "                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "            if (data >= 0 && data < (10))\n",
      "                printIntLine(buffer[data]);\n",
      "                printLine(\"ERROR: Array index is out-of-bounds\");\n"
    ],
    "nodes-line-sym": [
      "while ( 1 )",
      "SOCKET VAR1 = VAR2 ;",
      "SOCKET VAR3 = VAR2 ;",
      "char VAR4 [ VAR5 ] ;",
      "if ( FUN1 ( FUN2 ( 2 , 2 ) , & VAR6 ) != VAR7 )",
      "VAR1 = socket ( VAR8 , VAR9 , VAR10 ) ;",
      "if ( VAR1 == VAR2 )",
      "if ( bind ( VAR1 , ( struct VAR11 * ) & VAR12 , sizeof ( VAR12 ) ) == VAR13 )",
      "if ( FUN3 ( VAR1 , VAR14 ) == VAR13 )",
      "VAR3 = accept ( VAR1 , NULL , NULL ) ;",
      "if ( VAR3 == VAR13 )",
      "VAR15 = recv ( VAR3 , VAR4 , VAR5 - 1 , 0 ) ;",
      "if ( VAR15 == VAR13 || VAR15 == 0 )",
      "VAR16 = atoi ( VAR4 ) ;",
      "while ( 0 ) ;",
      "if ( VAR16 >= 0 && VAR16 < ( 10 ) )",
      "FUN4 ( VAR17 [ VAR16 ] ) ;",
      "FUN5 ( \"\" ) ;"
    ],
    "pair_id": 10605,
    "xfg_id": 9678,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "50",
      "53",
      "56",
      "58",
      "60",
      "62"
    ],
    "keyLine": "62",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        1,
        3
      ],
      [
        1,
        5
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        4
      ],
      [
        4,
        5
      ]
    ],
    "target": 1,
    "filePath": "119-12500-c/testcases/000/062/556/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68b.c",
    "nodes-line": [
      "    int data = CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68_badData;\n",
      "        int buffer[10] = { 0 };\n",
      "        if (data >= 0)\n",
      "            buffer[data] = 1;\n",
      "            for(i = 0; i < 10; i++)\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "int VAR1 = VAR2 ;",
      "int VAR3 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 )",
      "VAR3 [ VAR1 ] = 1 ;",
      "for ( VAR4 = 0 ; VAR4 < 10 ; VAR4 ++ )",
      "FUN1 ( VAR3 [ VAR4 ] ) ;"
    ],
    "pair_id": 248,
    "xfg_id": 3544,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "34",
      "36",
      "39",
      "41",
      "44",
      "46",
      "48",
      "52",
      "54",
      "56",
      "58"
    ],
    "keyLine": "58",
    "edges-No": [
      [
        0,
        2
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        7
      ],
      [
        3,
        8
      ],
      [
        4,
        6
      ],
      [
        4,
        10
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        5,
        5
      ],
      [
        6,
        10
      ],
      [
        7,
        9
      ],
      [
        7,
        8
      ],
      [
        8,
        10
      ],
      [
        9,
        9
      ],
      [
        9,
        10
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/067/639/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_fscanf_34.cpp",
    "nodes-line": [
      "    unionType myUnion;\n",
      "    data = -1;\n",
      "    myUnion.unionFirst = data;\n",
      "        int data = myUnion.unionSecond;\n",
      "            int * buffer = new int[10];\n",
      "            for (i = 0; i < 10; i++)\n",
      "                buffer[i] = 0;\n",
      "            if (data >= 0)\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "unionType VAR1 ;",
      "VAR2 = - 1 ;",
      "VAR1 . VAR3 = VAR2 ;",
      "int VAR2 = VAR1 . VAR4 ;",
      "int * VAR5 = new int [ 10 ] ;",
      "for ( VAR6 = 0 ; VAR6 < 10 ; VAR6 ++ )",
      "VAR5 [ VAR6 ] = 0 ;",
      "if ( VAR2 >= 0 )",
      "VAR5 [ VAR2 ] = 1 ;",
      "for ( VAR6 = 0 ; VAR6 < 10 ; VAR6 ++ )",
      "FUN1 ( VAR5 [ VAR6 ] ) ;"
    ],
    "pair_id": 1588,
    "xfg_id": 5604,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "35",
      "36",
      "37",
      "38",
      "39",
      "41",
      "43",
      "44"
    ],
    "keyLine": "35",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        1,
        1
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ]
    ],
    "target": 1,
    "filePath": "119-1000-c/testcases/000/234/227/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_34.c",
    "nodes-line": [
      "    data = (twoIntsStruct *)malloc(sizeof(data));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "    data->intOne = 1;\n",
      "    data->intTwo = 2;\n",
      "    myUnion.unionFirst = data;\n",
      "        twoIntsStruct * data = myUnion.unionSecond;\n",
      "        printStructLine(data);\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( VAR2 * ) malloc ( sizeof ( VAR1 ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "VAR1 -> VAR3 = 1 ;",
      "VAR1 -> VAR4 = 2 ;",
      "VAR5 . VAR6 = VAR1 ;",
      "VAR2 * VAR1 = VAR5 . VAR7 ;",
      "FUN2 ( VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 9399,
    "xfg_id": 3559,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "28",
      "32",
      "41"
    ],
    "keyLine": "32",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        3
      ]
    ],
    "target": 1,
    "filePath": "119-1600-c/testcases/000/233/465/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_13.c",
    "nodes-line": [
      "    data = (char *)malloc(100*sizeof(char));\n",
      "    if(GLOBAL_CONST_FIVE==5)\n",
      "        data[100-1] = '\\0'; /* null terminate */\n",
      "            dest[i] = data[i];\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR2 == 5 )",
      "VAR1 [ 100 - 1 ] = '' ;",
      "VAR3 [ VAR4 ] = VAR1 [ VAR4 ] ;"
    ],
    "pair_id": 5124,
    "xfg_id": 9715,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "33",
      "34",
      "36",
      "37",
      "38",
      "40",
      "44",
      "46",
      "48",
      "51",
      "52"
    ],
    "keyLine": "33",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        1,
        1
      ],
      [
        3,
        8
      ],
      [
        4,
        5
      ],
      [
        5,
        8
      ],
      [
        5,
        9
      ],
      [
        5,
        6
      ],
      [
        5,
        10
      ],
      [
        6,
        7
      ],
      [
        7,
        8
      ],
      [
        7,
        7
      ],
      [
        8,
        8
      ]
    ],
    "target": 1,
    "filePath": "119-1600-c/testcases/000/233/475/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_34.c",
    "nodes-line": [
      "    data = (char *)malloc(100*sizeof(char));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "    memset(data, 'A', 100-1); /* fill with 'A's */\n",
      "    data[100-1] = '\\0'; /* null terminate */\n",
      "    myUnion.unionFirst = data;\n",
      "        char * data = myUnion.unionSecond;\n",
      "            dataLen = strlen(data);\n",
      "            for (i = 0; i < dataLen; i++)\n",
      "                dest[i] = data[i];\n",
      "            printLine(data);\n",
      "            free(data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR1 , '' , 100 - 1 ) ;",
      "VAR1 [ 100 - 1 ] = '' ;",
      "VAR2 . VAR3 = VAR1 ;",
      "char * VAR1 = VAR2 . VAR4 ;",
      "VAR5 = strlen ( VAR1 ) ;",
      "for ( VAR6 = 0 ; VAR6 < VAR5 ; VAR6 ++ )",
      "VAR7 [ VAR6 ] = VAR1 [ VAR6 ] ;",
      "FUN2 ( VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 3866,
    "xfg_id": 3572,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "25",
      "28",
      "29",
      "34",
      "35",
      "36"
    ],
    "keyLine": "28",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        2
      ],
      [
        2,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-2800-c/testcases/000/232/087/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_02.c",
    "nodes-line": [
      "    if(1)\n",
      "        data = (int *)malloc(10);\n",
      "        if (data == NULL) {exit(-1);}\n",
      "        memmove(data, source, 10*sizeof(int));\n",
      "        printIntLine(data[0]);\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "if ( 1 )",
      "VAR1 = ( int * ) malloc ( 10 ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memmove ( VAR1 , VAR2 , 10 * sizeof ( int ) ) ;",
      "FUN2 ( VAR1 [ 0 ] ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 6059,
    "xfg_id": 3582,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "84",
      "87",
      "89",
      "93"
    ],
    "keyLine": "93",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ]
    ],
    "target": 0,
    "filePath": "119-1000-c/testcases/000/234/267/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_13.c",
    "nodes-line": [
      "    if(GLOBAL_CONST_FIVE==5)\n",
      "            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));\n",
      "            structCharVoid->voidSecond = (void *)SRC_STR;\n",
      "            memmove(structCharVoid->charFirst, SRC_STR, sizeof(structCharVoid->charFirst));\n"
    ],
    "nodes-line-sym": [
      "if ( VAR1 == 5 )",
      "VAR2 * VAR3 = ( VAR2 * ) malloc ( sizeof ( VAR2 ) ) ;",
      "VAR3 -> VAR4 = ( void * ) VAR5 ;",
      "memmove ( VAR3 -> VAR6 , VAR5 , sizeof ( VAR3 -> VAR6 ) ) ;"
    ],
    "pair_id": 916,
    "xfg_id": 7679,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "370",
      "400",
      "402",
      "410",
      "414",
      "419",
      "420",
      "426",
      "432",
      "437",
      "442",
      "445",
      "456",
      "462",
      "476",
      "479",
      "486",
      "492",
      "498",
      "505",
      "509",
      "532",
      "538",
      "541",
      "542",
      "546",
      "547",
      "555",
      "556",
      "558",
      "561",
      "562",
      "563",
      "566",
      "567",
      "568",
      "576",
      "577",
      "578",
      "580",
      "582",
      "584",
      "586",
      "588",
      "589",
      "592",
      "593",
      "599"
    ],
    "keyLine": "555",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        0,
        7
      ],
      [
        0,
        8
      ],
      [
        0,
        9
      ],
      [
        0,
        10
      ],
      [
        0,
        11
      ],
      [
        0,
        36
      ],
      [
        0,
        12
      ],
      [
        1,
        12
      ],
      [
        1,
        13
      ],
      [
        2,
        5
      ],
      [
        3,
        4
      ],
      [
        4,
        6
      ],
      [
        5,
        22
      ],
      [
        6,
        7
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ],
      [
        9,
        10
      ],
      [
        10,
        14
      ],
      [
        11,
        12
      ],
      [
        11,
        13
      ],
      [
        12,
        13
      ],
      [
        13,
        16
      ],
      [
        13,
        17
      ],
      [
        13,
        18
      ],
      [
        13,
        14
      ],
      [
        13,
        15
      ],
      [
        14,
        17
      ],
      [
        15,
        16
      ],
      [
        16,
        19
      ],
      [
        16,
        17
      ],
      [
        17,
        18
      ],
      [
        17,
        20
      ],
      [
        18,
        21
      ],
      [
        18,
        19
      ],
      [
        18,
        20
      ],
      [
        19,
        30
      ],
      [
        19,
        32
      ],
      [
        19,
        21
      ],
      [
        20,
        25
      ],
      [
        20,
        29
      ],
      [
        20,
        30
      ],
      [
        20,
        31
      ],
      [
        20,
        32
      ],
      [
        20,
        21
      ],
      [
        20,
        23
      ],
      [
        21,
        22
      ],
      [
        21,
        27
      ],
      [
        22,
        25
      ],
      [
        22,
        23
      ],
      [
        23,
        24
      ],
      [
        24,
        27
      ],
      [
        25,
        26
      ],
      [
        26,
        27
      ],
      [
        27,
        36
      ],
      [
        27,
        28
      ],
      [
        27,
        29
      ],
      [
        27,
        30
      ],
      [
        27,
        31
      ],
      [
        27,
        32
      ],
      [
        27,
        33
      ],
      [
        27,
        34
      ],
      [
        27,
        35
      ],
      [
        31,
        36
      ],
      [
        31,
        39
      ],
      [
        31,
        40
      ],
      [
        31,
        47
      ],
      [
        32,
        33
      ],
      [
        33,
        43
      ],
      [
        33,
        44
      ],
      [
        36,
        37
      ],
      [
        36,
        38
      ],
      [
        36,
        39
      ],
      [
        39,
        41
      ],
      [
        39,
        42
      ],
      [
        39,
        43
      ],
      [
        39,
        40
      ],
      [
        43,
        45
      ],
      [
        43,
        46
      ],
      [
        43,
        44
      ],
      [
        43,
        47
      ]
    ],
    "target": 1,
    "filePath": "119-12600-c/testcases/000/001/291/sig-bad.c",
    "nodes-line": [
      "switch (type) {\n",
      "u_long origTTL, exptime, signtime, timetilexp, now;\n",
      "u_int temp;\n",
      "                cp1 = cp; \n",
      "cp1 += 2;\n",
      "alg = temp/256;       /* save alg */\n",
      "cp1 += 2;             /* skip over alg and labels */ \n",
      "cp1 += 4;\n",
      "cp1 += 4;\n",
      "cp1 += 4; \n",
      "cp1 += 2;\n",
      "now = time(NULL);/* Get current time in GMT/UTC */\n",
      "if (signtime > now) {\n",
      "if (exptime <= now) {\n",
      "cp = cp1 - 18;\n",
      "cp1 = (u_char *)data;\n",
      "cp1 += 18;\n",
      "     n = dn_expand(msg, eom, cp+18, (char *)cp1, (sizeof data) - 18);\n",
      "if (n < 0) {\n",
      "cp1 += strlen((char*)cp1)+1;\n",
      "n = dlen - (NS_SIG_SIGNER + n);\n",
      "if (n > (int)(sizeof data) - (cp1 - (u_char *)data)) {\n",
      "switch (alg) {\n",
      "      if (n < NS_MD5RSA_MIN_SIZE || n > NS_MD5RSA_MAX_SIZE)\n",
      "hp->rcode = FORMERR;\n",
      "if (n != NS_DSA_SIG_SIZE)\n",
      "hp->rcode = FORMERR;\n",
      "if (hp->rcode == FORMERR)\n",
      "return (-1);\n",
      "printf (\"memcpying n=%u bytes \\n\", (unsigned int) n);\n",
      "memcpy(cp1, cp, n);\n",
      "cp += n;\n",
      "cp1 += n;\n",
      "n = cp1 - (u_char *)data;\n",
      "cp1 = (u_char *)data;\n",
      "break;\n",
      "if (cp > eom) {\n",
      "hp->rcode = FORMERR;\n",
      "return (-1);\n",
      "if ((u_int)(cp - rdatap) != dlen) {\n",
      "  printf(\"encoded rdata length is %u, but actual length was %u\",\n",
      "  hp->rcode = FORMERR;\n",
      "  return (-1);\n",
      "if (n > MAXDATA) {\n",
      "  printf(\"update type %d: %d bytes is too much data\",\n",
      "  hp->rcode = FORMERR;\n",
      "  return (-1);\n",
      "return (cp - rrp);\n"
    ],
    "nodes-line-sym": [
      "switch ( VAR1 ) {",
      "u_long VAR2 , VAR3 , VAR4 , VAR5 , VAR6 ;",
      "u_int VAR7 ;",
      "VAR8 = VAR9 ;",
      "VAR8 += 2 ;",
      "VAR10 = VAR7 / 256 ;",
      "VAR8 += 2 ;",
      "VAR8 += 4 ;",
      "VAR8 += 4 ;",
      "VAR8 += 4 ;",
      "VAR8 += 2 ;",
      "VAR6 = time ( NULL ) ;",
      "if ( VAR4 > VAR6 ) {",
      "if ( VAR3 <= VAR6 ) {",
      "VAR9 = VAR8 - 18 ;",
      "VAR8 = ( VAR11 * ) VAR12 ;",
      "VAR8 += 18 ;",
      "VAR13 = FUN1 ( VAR14 , VAR15 , VAR9 + 18 , ( char * ) VAR8 , ( sizeof VAR12 ) - 18 ) ;",
      "if ( VAR13 < 0 ) {",
      "VAR8 += strlen ( ( char * ) VAR8 ) + 1 ;",
      "VAR13 = VAR16 - ( VAR17 + VAR13 ) ;",
      "if ( VAR13 > ( int ) ( sizeof VAR12 ) - ( VAR8 - ( VAR11 * ) VAR12 ) ) {",
      "switch ( VAR10 ) {",
      "if ( VAR13 < VAR18 || VAR13 > VAR19 )",
      "VAR20 -> VAR21 = VAR22 ;",
      "if ( VAR13 != VAR23 )",
      "VAR20 -> VAR21 = VAR22 ;",
      "if ( VAR20 -> VAR21 == VAR22 )",
      "return ( - 1 ) ;",
      "printf ( \"\" , ( unsigned int ) VAR13 ) ;",
      "memcpy ( VAR8 , VAR9 , VAR13 ) ;",
      "VAR9 += VAR13 ;",
      "VAR8 += VAR13 ;",
      "VAR13 = VAR8 - ( VAR11 * ) VAR12 ;",
      "VAR8 = ( VAR11 * ) VAR12 ;",
      "break ;",
      "if ( VAR9 > VAR15 ) {",
      "VAR20 -> VAR21 = VAR22 ;",
      "return ( - 1 ) ;",
      "if ( ( VAR24 ) ( VAR9 - VAR25 ) != VAR16 ) {",
      "printf ( \"\" ,",
      "VAR20 -> VAR21 = VAR22 ;",
      "return ( - 1 ) ;",
      "if ( VAR13 > VAR26 ) {",
      "printf ( \"\" ,",
      "VAR20 -> VAR21 = VAR22 ;",
      "return ( - 1 ) ;",
      "return ( VAR9 - VAR27 ) ;"
    ],
    "pair_id": 746,
    "xfg_id": 11777,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "104",
      "105",
      "108",
      "110",
      "114",
      "116",
      "118",
      "120",
      "122"
    ],
    "keyLine": "122",
    "edges-No": [
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        1,
        2
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        8
      ],
      [
        4,
        6
      ],
      [
        5,
        7
      ],
      [
        5,
        6
      ],
      [
        6,
        8
      ],
      [
        7,
        7
      ],
      [
        7,
        8
      ]
    ],
    "target": 0,
    "filePath": "119-7000-c/testcases/000/074/203/CWE124_Buffer_Underwrite__CWE839_rand_14.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(globalFive==5)\n",
      "        data = RAND32();\n",
      "    if(globalFive==5)\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( VAR2 == 5 )",
      "VAR1 = FUN1 ( ) ;",
      "if ( VAR2 == 5 )",
      "int VAR3 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR3 [ VAR1 ] = 1 ;",
      "for ( VAR4 = 0 ; VAR4 < 10 ; VAR4 ++ )",
      "FUN2 ( VAR3 [ VAR4 ] ) ;"
    ],
    "pair_id": 3307,
    "xfg_id": 5639,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "27",
      "30",
      "31",
      "32",
      "33",
      "35",
      "44"
    ],
    "keyLine": "30",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        2
      ],
      [
        2,
        2
      ],
      [
        5,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-500-c/testcases/000/234/816/CWE127_Buffer_Underread__malloc_char_cpy_16.c",
    "nodes-line": [
      "    while(1)\n",
      "            char * dataBuffer = (char *)malloc(100*sizeof(char));\n",
      "            if (dataBuffer == NULL) {exit(-1);}\n",
      "            memset(dataBuffer, 'A', 100-1);\n",
      "            dataBuffer[100-1] = '\\0';\n",
      "            data = dataBuffer - 8;\n",
      "        strcpy(dest, data);\n"
    ],
    "nodes-line-sym": [
      "while ( 1 )",
      "char * VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR1 , '' , 100 - 1 ) ;",
      "VAR1 [ 100 - 1 ] = '' ;",
      "VAR2 = VAR1 - 8 ;",
      "strcpy ( VAR3 , VAR2 ) ;"
    ],
    "pair_id": 11867,
    "xfg_id": 3594,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "174",
      "175",
      "178",
      "183",
      "186",
      "190",
      "191",
      "195"
    ],
    "keyLine": "195",
    "edges-No": [
      [
        0,
        5
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ],
      [
        3,
        5
      ],
      [
        4,
        7
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-2800-c/testcases/000/232/126/CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    if(staticReturnsTrue())\n",
      "            char * dataGoodBuffer = (char *)malloc(50*sizeof(char));\n",
      "            data = (void *)dataGoodBuffer;\n",
      "    if(staticReturnsTrue())\n",
      "            size_t dataLen = strlen((char *)data);\n",
      "            void * dest = (void *)calloc(dataLen+1, 1);\n",
      "            free(dest);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "if ( FUN1 ( ) )",
      "char * VAR2 = ( char * ) malloc ( 50 * sizeof ( char ) ) ;",
      "VAR1 = ( void * ) VAR2 ;",
      "if ( FUN1 ( ) )",
      "size_t VAR3 = strlen ( ( char * ) VAR1 ) ;",
      "void * VAR4 = ( void * ) calloc ( VAR3 + 1 , 1 ) ;",
      "free ( VAR4 ) ;"
    ],
    "pair_id": 6408,
    "xfg_id": 5645,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "191",
      "192",
      "193",
      "197",
      "199",
      "201",
      "204",
      "205",
      "207",
      "209",
      "210",
      "211",
      "212",
      "213",
      "215",
      "217",
      "219",
      "221",
      "222",
      "224",
      "227",
      "228",
      "230",
      "233",
      "235",
      "237",
      "238",
      "240",
      "242",
      "244",
      "247",
      "249",
      "253",
      "255",
      "259",
      "261",
      "265"
    ],
    "keyLine": "204",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        27
      ],
      [
        0,
        26
      ],
      [
        1,
        28
      ],
      [
        1,
        29
      ],
      [
        1,
        7
      ],
      [
        1,
        26
      ],
      [
        2,
        23
      ],
      [
        2,
        20
      ],
      [
        2,
        24
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        3,
        4
      ],
      [
        5,
        30
      ],
      [
        6,
        27
      ],
      [
        6,
        13
      ],
      [
        6,
        17
      ],
      [
        6,
        15
      ],
      [
        6,
        7
      ],
      [
        6,
        26
      ],
      [
        7,
        9
      ],
      [
        7,
        10
      ],
      [
        7,
        11
      ],
      [
        7,
        12
      ],
      [
        7,
        13
      ],
      [
        7,
        8
      ],
      [
        10,
        11
      ],
      [
        11,
        11
      ],
      [
        11,
        12
      ],
      [
        12,
        10
      ],
      [
        13,
        15
      ],
      [
        13,
        14
      ],
      [
        15,
        16
      ],
      [
        15,
        17
      ],
      [
        15,
        18
      ],
      [
        17,
        28
      ],
      [
        17,
        20
      ],
      [
        17,
        29
      ],
      [
        17,
        18
      ],
      [
        18,
        19
      ],
      [
        18,
        20
      ],
      [
        18,
        21
      ],
      [
        20,
        23
      ],
      [
        20,
        21
      ],
      [
        21,
        23
      ],
      [
        21,
        24
      ],
      [
        21,
        25
      ],
      [
        21,
        22
      ],
      [
        24,
        32
      ],
      [
        25,
        3
      ],
      [
        26,
        27
      ],
      [
        28,
        29
      ],
      [
        30,
        31
      ],
      [
        32,
        33
      ],
      [
        33,
        34
      ],
      [
        33,
        35
      ],
      [
        34,
        36
      ],
      [
        34,
        35
      ]
    ],
    "target": 0,
    "filePath": "119-6200-c/testcases/000/075/813/CWE126_Buffer_Overread__CWE129_listen_socket_34.c",
    "nodes-line": [
      "        SOCKET listenSocket = INVALID_SOCKET;\n",
      "        SOCKET acceptSocket = INVALID_SOCKET;\n",
      "        char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                break;\n",
      "            wsaDataInit = 1;\n",
      "            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "            if (listenSocket == INVALID_SOCKET)\n",
      "                break;\n",
      "            memset(&service, 0, sizeof(service));\n",
      "            service.sin_family = AF_INET;\n",
      "            service.sin_addr.s_addr = INADDR_ANY;\n",
      "            service.sin_port = htons(TCP_PORT);\n",
      "            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                break;\n",
      "            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "                break;\n",
      "            acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "            if (acceptSocket == SOCKET_ERROR)\n",
      "                break;\n",
      "            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                break;\n",
      "            inputBuffer[recvResult] = '\\0';\n",
      "            data = atoi(inputBuffer);\n",
      "        while (0);\n",
      "        if (listenSocket != INVALID_SOCKET)\n",
      "            CLOSE_SOCKET(listenSocket);\n",
      "        if (acceptSocket != INVALID_SOCKET)\n",
      "            CLOSE_SOCKET(acceptSocket);\n",
      "        if (wsaDataInit)\n",
      "            WSACleanup();\n",
      "    myUnion.unionFirst = data;\n",
      "        int data = myUnion.unionSecond;\n",
      "            if (data >= 0 && data < (10))\n",
      "                printIntLine(buffer[data]);\n",
      "                printLine(\"ERROR: Array index is out-of-bounds\");\n"
    ],
    "nodes-line-sym": [
      "SOCKET VAR1 = VAR2 ;",
      "SOCKET VAR3 = VAR2 ;",
      "char VAR4 [ VAR5 ] ;",
      "if ( FUN1 ( FUN2 ( 2 , 2 ) , & VAR6 ) != VAR7 )",
      "break ;",
      "VAR8 = 1 ;",
      "VAR1 = socket ( VAR9 , VAR10 , VAR11 ) ;",
      "if ( VAR1 == VAR2 )",
      "break ;",
      "memset ( & VAR12 , 0 , sizeof ( VAR12 ) ) ;",
      "VAR12 . VAR13 = VAR9 ;",
      "VAR12 . VAR14 . VAR15 = VAR16 ;",
      "VAR12 . VAR17 = FUN3 ( VAR18 ) ;",
      "if ( bind ( VAR1 , ( struct VAR19 * ) & VAR12 , sizeof ( VAR12 ) ) == VAR20 )",
      "break ;",
      "if ( FUN4 ( VAR1 , VAR21 ) == VAR20 )",
      "break ;",
      "VAR3 = accept ( VAR1 , NULL , NULL ) ;",
      "if ( VAR3 == VAR20 )",
      "break ;",
      "VAR22 = recv ( VAR3 , VAR4 , VAR5 - 1 , 0 ) ;",
      "if ( VAR22 == VAR20 || VAR22 == 0 )",
      "break ;",
      "VAR4 [ VAR22 ] = '' ;",
      "VAR23 = atoi ( VAR4 ) ;",
      "while ( 0 ) ;",
      "if ( VAR1 != VAR2 )",
      "FUN5 ( VAR1 ) ;",
      "if ( VAR3 != VAR2 )",
      "FUN5 ( VAR3 ) ;",
      "if ( VAR8 )",
      "FUN6 ( ) ;",
      "VAR24 . VAR25 = VAR23 ;",
      "int VAR23 = VAR24 . VAR26 ;",
      "if ( VAR23 >= 0 && VAR23 < ( 10 ) )",
      "FUN7 ( VAR27 [ VAR23 ] ) ;",
      "FUN8 ( \"\" ) ;"
    ],
    "pair_id": 1718,
    "xfg_id": 7697,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "130",
      "134",
      "136",
      "138",
      "141",
      "143",
      "145",
      "147"
    ],
    "keyLine": "147",
    "edges-No": [
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        1,
        3
      ],
      [
        1,
        7
      ],
      [
        1,
        5
      ],
      [
        2,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        7
      ],
      [
        4,
        6
      ],
      [
        4,
        5
      ],
      [
        5,
        7
      ],
      [
        6,
        6
      ],
      [
        6,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/067/554/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_connect_socket_62a.cpp",
    "nodes-line": [
      "    data = -1;\n",
      "        int * buffer = new int[10];\n",
      "        for (i = 0; i < 10; i++)\n",
      "            buffer[i] = 0;\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "            for(i = 0; i < 10; i++)\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "int * VAR2 = new int [ 10 ] ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "VAR2 [ VAR3 ] = 0 ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR2 [ VAR1 ] = 1 ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "FUN1 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 469,
    "xfg_id": 9749,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "36",
      "38",
      "39",
      "41",
      "44"
    ],
    "keyLine": "44",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/067/972/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memmove_31.cpp",
    "nodes-line": [
      "    data = new char[10];\n",
      "        char * dataCopy = data;\n",
      "        char * data = dataCopy;\n",
      "            char source[10+1] = SRC_STRING;\n",
      "            memmove(data, source, (strlen(source) + 1) * sizeof(char));\n"
    ],
    "nodes-line-sym": [
      "VAR1 = new char [ 10 ] ;",
      "char * VAR2 = VAR1 ;",
      "char * VAR1 = VAR2 ;",
      "char VAR3 [ 10 + 1 ] = VAR4 ;",
      "memmove ( VAR1 , VAR3 , ( strlen ( VAR3 ) + 1 ) * sizeof ( char ) ) ;"
    ],
    "pair_id": 1577,
    "xfg_id": 9752,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "56",
      "60"
    ],
    "keyLine": "60",
    "edges-No": [
      [
        0,
        1
      ]
    ],
    "target": 0,
    "filePath": "119-13700-c/testcases/000/000/154/basic-00010-ok.c",
    "nodes-line": [
      "  buf = (char *) malloc(10 * sizeof(char));\n",
      "  buf[9] = 'A';\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( char * ) malloc ( 10 * sizeof ( char ) ) ;",
      "VAR1 [ 9 ] = '' ;"
    ],
    "pair_id": 4272,
    "xfg_id": 7713,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "92",
      "94",
      "97",
      "107",
      "109",
      "113"
    ],
    "keyLine": "97",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ]
    ],
    "target": 0,
    "filePath": "119-6400-c/testcases/000/075/646/CWE126_Buffer_Overread__CWE129_fgets_01.c",
    "nodes-line": [
      "        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n",
      "        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n",
      "            data = atoi(inputBuffer);\n",
      "        if (data >= 0 && data < (10))\n",
      "            printIntLine(buffer[data]);\n",
      "            printLine(\"ERROR: Array index is out-of-bounds\");\n"
    ],
    "nodes-line-sym": [
      "char VAR1 [ VAR2 ] = \"\" ;",
      "if ( fgets ( VAR1 , VAR2 , stdin ) != NULL )",
      "VAR3 = atoi ( VAR1 ) ;",
      "if ( VAR3 >= 0 && VAR3 < ( 10 ) )",
      "FUN1 ( VAR4 [ VAR3 ] ) ;",
      "FUN2 ( \"\" ) ;"
    ],
    "pair_id": 6762,
    "xfg_id": 7716,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "30",
      "33",
      "37",
      "43",
      "47",
      "57"
    ],
    "keyLine": "57",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        1,
        2
      ],
      [
        2,
        5
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/074/873/CWE124_Buffer_Underwrite__new_char_memmove_12.cpp",
    "nodes-line": [
      "    if(globalReturnsTrueOrFalse())\n",
      "            char * dataBuffer = new char[100];\n",
      "            data = dataBuffer - 8;\n",
      "            char * dataBuffer = new char[100];\n",
      "            data = dataBuffer;\n",
      "        data[100-1] = '\\0';\n"
    ],
    "nodes-line-sym": [
      "if ( FUN1 ( ) )",
      "char * VAR1 = new char [ 100 ] ;",
      "VAR2 = VAR1 - 8 ;",
      "char * VAR1 = new char [ 100 ] ;",
      "VAR2 = VAR1 ;",
      "VAR2 [ 100 - 1 ] = '' ;"
    ],
    "pair_id": 12337,
    "xfg_id": 3626,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "105",
      "106",
      "109",
      "116",
      "118",
      "122"
    ],
    "keyLine": "118",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        5
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ]
    ],
    "target": 0,
    "filePath": "119-8300-c/testcases/000/070/577/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_61a.c",
    "nodes-line": [
      "    data = -1;\n",
      "    data = CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_61b_goodB2GSource(data);\n",
      "        int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "VAR1 = FUN1 ( VAR1 ) ;",
      "int * VAR2 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR2 [ VAR1 ] = 1 ;",
      "FUN2 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 804,
    "xfg_id": 9783,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "79",
      "80",
      "81",
      "84"
    ],
    "keyLine": "84",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ]
    ],
    "target": 0,
    "filePath": "119-8900-c/testcases/000/067/069/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_06.c",
    "nodes-line": [
      "    char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    data = dataBuffer;\n",
      "    if(STATIC_CONST_FIVE==5)\n",
      "        memset(data, 'A', 50-1); /* fill with 'A's */\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "VAR2 = VAR1 ;",
      "if ( VAR3 == 5 )",
      "memset ( VAR2 , '' , 50 - 1 ) ;"
    ],
    "pair_id": 1259,
    "xfg_id": 5688,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "27",
      "30",
      "32",
      "36",
      "39",
      "41",
      "45",
      "47",
      "49",
      "51"
    ],
    "keyLine": "51",
    "edges-No": [
      [
        0,
        7
      ],
      [
        0,
        8
      ],
      [
        1,
        2
      ],
      [
        2,
        7
      ],
      [
        2,
        8
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        7
      ],
      [
        4,
        10
      ],
      [
        4,
        6
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        5,
        5
      ],
      [
        6,
        10
      ],
      [
        7,
        9
      ],
      [
        7,
        8
      ],
      [
        8,
        10
      ],
      [
        9,
        9
      ],
      [
        9,
        10
      ]
    ],
    "target": 1,
    "filePath": "119-2600-c/testcases/000/232/293/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_03.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(5==5)\n",
      "        data = 10;\n",
      "    if(5==5)\n",
      "            int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "            for (i = 0; i < 10; i++)\n",
      "                buffer[i] = 0;\n",
      "            if (data >= 0)\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( 5 == 5 )",
      "VAR1 = 10 ;",
      "if ( 5 == 5 )",
      "int * VAR2 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "VAR2 [ VAR3 ] = 0 ;",
      "if ( VAR1 >= 0 )",
      "VAR2 [ VAR1 ] = 1 ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "FUN1 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 9604,
    "xfg_id": 5696,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "35",
      "36",
      "37",
      "38",
      "40",
      "42",
      "43"
    ],
    "keyLine": "35",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        1,
        1
      ],
      [
        2,
        5
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-1100-c/testcases/000/234/161/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_34.c",
    "nodes-line": [
      "    data = (double *)malloc(sizeof(data));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "    *data = 1.7E300;\n",
      "    myUnion.unionFirst = data;\n",
      "        double * data = myUnion.unionSecond;\n",
      "        printDoubleLine(*data);\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( double * ) malloc ( sizeof ( VAR1 ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "* VAR1 = 1 . 7E300 ;",
      "VAR2 . VAR3 = VAR1 ;",
      "double * VAR1 = VAR2 . VAR4 ;",
      "FUN2 ( * VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 6659,
    "xfg_id": 9797,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "57",
      "59",
      "60",
      "64",
      "68",
      "70"
    ],
    "keyLine": "70",
    "edges-No": [
      [
        0,
        5
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ],
      [
        2,
        2
      ],
      [
        3,
        5
      ],
      [
        4,
        5
      ]
    ],
    "target": 0,
    "filePath": "119-11900-c/testcases/000/063/248/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_17.c",
    "nodes-line": [
      "    char * data;\n",
      "    char dataGoodBuffer[10+1];\n",
      "    for(h = 0; h < 1; h++)\n",
      "        data = dataGoodBuffer;\n",
      "        char source[10+1] = SRC_STRING;\n",
      "        strcpy(data, source);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 ;",
      "char VAR2 [ 10 + 1 ] ;",
      "for ( VAR3 = 0 ; VAR3 < 1 ; VAR3 ++ )",
      "VAR1 = VAR2 ;",
      "char VAR4 [ 10 + 1 ] = VAR5 ;",
      "strcpy ( VAR1 , VAR4 ) ;"
    ],
    "pair_id": 7537,
    "xfg_id": 3655,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "59",
      "63",
      "65",
      "66",
      "69",
      "71",
      "73",
      "75"
    ],
    "keyLine": "75",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        7
      ],
      [
        4,
        7
      ],
      [
        4,
        5
      ],
      [
        5,
        7
      ],
      [
        6,
        6
      ],
      [
        6,
        7
      ],
      [
        7,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-7300-c/testcases/000/073/800/CWE124_Buffer_Underwrite__char_alloca_loop_31.c",
    "nodes-line": [
      "    char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    data = dataBuffer;\n",
      "        char * dataCopy = data;\n",
      "        char * data = dataCopy;\n",
      "            char source[100];\n",
      "            source[100-1] = '\\0'; /* null terminate */\n",
      "            for (i = 0; i < 100; i++)\n",
      "                data[i] = source[i];\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "VAR2 = VAR1 ;",
      "char * VAR3 = VAR2 ;",
      "char * VAR2 = VAR3 ;",
      "char VAR4 [ 100 ] ;",
      "VAR4 [ 100 - 1 ] = '' ;",
      "for ( VAR5 = 0 ; VAR5 < 100 ; VAR5 ++ )",
      "VAR2 [ VAR5 ] = VAR4 [ VAR5 ] ;"
    ],
    "pair_id": 6927,
    "xfg_id": 3665,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "81",
      "83",
      "86",
      "88",
      "90",
      "94"
    ],
    "keyLine": "90",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        4
      ],
      [
        2,
        5
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ]
    ],
    "target": 0,
    "filePath": "119-12400-c/testcases/000/062/651/CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_67b.c",
    "nodes-line": [
      "void CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_67b_goodB2GSink(CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_67_structType myStruct)\n",
      "    int data = myStruct.structFirst;\n",
      "        int buffer[10] = { 0 };\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_67_structType VAR1 )",
      "int VAR2 = VAR1 . VAR3 ;",
      "int VAR4 [ 10 ] = { 0 } ;",
      "if ( VAR2 >= 0 && VAR2 < ( 10 ) )",
      "VAR4 [ VAR2 ] = 1 ;",
      "FUN2 ( VAR4 [ VAR5 ] ) ;"
    ],
    "pair_id": 9061,
    "xfg_id": 7762,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "102",
      "103",
      "107",
      "109",
      "113",
      "116",
      "118",
      "120",
      "122"
    ],
    "keyLine": "122",
    "edges-No": [
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        1,
        2
      ],
      [
        1,
        1
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        3
      ],
      [
        4,
        8
      ],
      [
        4,
        6
      ],
      [
        5,
        7
      ],
      [
        5,
        6
      ],
      [
        6,
        8
      ],
      [
        7,
        7
      ],
      [
        7,
        8
      ]
    ],
    "target": 0,
    "filePath": "119-7000-c/testcases/000/074/158/CWE124_Buffer_Underwrite__CWE839_negative_17.c",
    "nodes-line": [
      "    data = -1;\n",
      "    for(h = 0; h < 1; h++)\n",
      "        data = 7;\n",
      "    for(j = 0; j < 1; j++)\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data < 10)\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "for ( VAR2 = 0 ; VAR2 < 1 ; VAR2 ++ )",
      "VAR1 = 7 ;",
      "for ( VAR3 = 0 ; VAR3 < 1 ; VAR3 ++ )",
      "int VAR4 [ 10 ] = { 0 } ;",
      "if ( VAR1 < 10 )",
      "VAR4 [ VAR1 ] = 1 ;",
      "for ( VAR5 = 0 ; VAR5 < 10 ; VAR5 ++ )",
      "FUN1 ( VAR4 [ VAR5 ] ) ;"
    ],
    "pair_id": 4984,
    "xfg_id": 9825,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "118",
      "119",
      "122",
      "124",
      "128",
      "136",
      "138",
      "142"
    ],
    "keyLine": "138",
    "edges-No": [
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        1,
        2
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        6
      ],
      [
        4,
        7
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-2500-c/testcases/000/232/383/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_09.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(GLOBAL_CONST_TRUE)\n",
      "        data = RAND32();\n",
      "    if(GLOBAL_CONST_TRUE)\n",
      "            int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( VAR2 )",
      "VAR1 = FUN1 ( ) ;",
      "if ( VAR2 )",
      "int * VAR3 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR3 [ VAR1 ] = 1 ;",
      "FUN2 ( VAR3 [ VAR4 ] ) ;"
    ],
    "pair_id": 12753,
    "xfg_id": 3681,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "29",
      "30",
      "35",
      "36",
      "37"
    ],
    "keyLine": "29",
    "edges-No": [
      [
        0,
        0
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        2
      ],
      [
        2,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-2800-c/testcases/000/232/028/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c",
    "nodes-line": [
      "    for(i = 0; i < 1; i++)\n",
      "        data = (int *)malloc(10);\n",
      "        if (data == NULL) {exit(-1);}\n",
      "        memcpy(data, source, 10*sizeof(int));\n",
      "        printIntLine(data[0]);\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "for ( VAR1 = 0 ; VAR1 < 1 ; VAR1 ++ )",
      "VAR2 = ( int * ) malloc ( 10 ) ;",
      "if ( VAR2 == NULL ) { FUN1 ( - 1 ) ; }",
      "memcpy ( VAR2 , VAR3 , 10 * sizeof ( int ) ) ;",
      "FUN2 ( VAR2 [ 0 ] ) ;",
      "free ( VAR2 ) ;"
    ],
    "pair_id": 2453,
    "xfg_id": 7785,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "86",
      "89",
      "91",
      "93",
      "95",
      "97",
      "98"
    ],
    "keyLine": "91",
    "edges-No": [
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        6
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ]
    ],
    "target": 0,
    "filePath": "119-1000-c/testcases/000/234/250/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_14.c",
    "nodes-line": [
      "    if(globalFive==5)\n",
      "            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));\n",
      "            structCharVoid->voidSecond = (void *)SRC_STR;\n",
      "            printWLine((wchar_t *)structCharVoid->voidSecond);\n",
      "            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(structCharVoid->charFirst));\n",
      "            printWLine((wchar_t *)structCharVoid->charFirst);\n",
      "            printWLine((wchar_t *)structCharVoid->voidSecond);\n"
    ],
    "nodes-line-sym": [
      "if ( VAR1 == 5 )",
      "VAR2 * VAR3 = ( VAR2 * ) malloc ( sizeof ( VAR2 ) ) ;",
      "VAR3 -> VAR4 = ( void * ) VAR5 ;",
      "FUN1 ( ( wchar_t * ) VAR3 -> VAR4 ) ;",
      "memcpy ( VAR3 -> VAR6 , VAR5 , sizeof ( VAR3 -> VAR6 ) ) ;",
      "FUN1 ( ( wchar_t * ) VAR3 -> VAR6 ) ;",
      "FUN1 ( ( wchar_t * ) VAR3 -> VAR4 ) ;"
    ],
    "pair_id": 2433,
    "xfg_id": 7788,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "29",
      "32",
      "34",
      "37",
      "41",
      "58",
      "60",
      "62",
      "64",
      "69",
      "79",
      "81",
      "83",
      "85",
      "90"
    ],
    "keyLine": "34",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        4
      ],
      [
        2,
        3
      ],
      [
        3,
        11
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        10
      ],
      [
        5,
        6
      ],
      [
        5,
        9
      ],
      [
        5,
        7
      ],
      [
        6,
        8
      ],
      [
        7,
        8
      ],
      [
        7,
        7
      ],
      [
        10,
        11
      ],
      [
        10,
        14
      ],
      [
        10,
        12
      ],
      [
        11,
        13
      ],
      [
        12,
        12
      ],
      [
        12,
        13
      ]
    ],
    "target": 1,
    "filePath": "119-7500-c/testcases/000/073/609/CWE124_Buffer_Underwrite__CWE839_fgets_12.c",
    "nodes-line": [
      "    if(globalReturnsTrueOrFalse())\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n",
      "            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n",
      "                data = atoi(inputBuffer);\n",
      "                printLine(\"fgets() failed.\");\n",
      "            if (data < 10)\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n",
      "                printLine(\"ERROR: Array index is negative.\");\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n",
      "                printLine(\"ERROR: Array index is out-of-bounds\");\n"
    ],
    "nodes-line-sym": [
      "if ( FUN1 ( ) )",
      "char VAR1 [ VAR2 ] = \"\" ;",
      "if ( fgets ( VAR1 , VAR2 , stdin ) != NULL )",
      "VAR3 = atoi ( VAR1 ) ;",
      "FUN2 ( \"\" ) ;",
      "if ( VAR3 < 10 )",
      "VAR4 [ VAR3 ] = 1 ;",
      "for ( VAR5 = 0 ; VAR5 < 10 ; VAR5 ++ )",
      "FUN3 ( VAR4 [ VAR5 ] ) ;",
      "FUN2 ( \"\" ) ;",
      "if ( VAR3 >= 0 && VAR3 < ( 10 ) )",
      "VAR4 [ VAR3 ] = 1 ;",
      "for ( VAR5 = 0 ; VAR5 < 10 ; VAR5 ++ )",
      "FUN3 ( VAR4 [ VAR5 ] ) ;",
      "FUN2 ( \"\" ) ;"
    ],
    "pair_id": 10741,
    "xfg_id": 11891,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "70",
      "75",
      "77",
      "81",
      "84",
      "87",
      "90",
      "92"
    ],
    "keyLine": "92",
    "edges-No": [
      [
        0,
        3
      ],
      [
        1,
        2
      ],
      [
        2,
        7
      ],
      [
        3,
        7
      ],
      [
        4,
        5
      ],
      [
        4,
        7
      ],
      [
        5,
        6
      ],
      [
        6,
        6
      ],
      [
        6,
        7
      ],
      [
        7,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/076/543/CWE126_Buffer_Overread__new_char_loop_32.cpp",
    "nodes-line": [
      "    char * *dataPtr2 = &data;\n",
      "        data = new char[100];\n",
      "        data[100-1] = '\\0'; /* null terminate */\n",
      "        char * data = *dataPtr2;\n",
      "            char dest[100];\n",
      "            destLen = strlen(dest);\n",
      "            for (i = 0; i < destLen; i++)\n",
      "                dest[i] = data[i];\n"
    ],
    "nodes-line-sym": [
      "char * * VAR1 = & VAR2 ;",
      "VAR2 = new char [ 100 ] ;",
      "VAR2 [ 100 - 1 ] = '' ;",
      "char * VAR2 = * VAR1 ;",
      "char VAR3 [ 100 ] ;",
      "VAR4 = strlen ( VAR3 ) ;",
      "for ( VAR5 = 0 ; VAR5 < VAR4 ; VAR5 ++ )",
      "VAR3 [ VAR5 ] = VAR2 [ VAR5 ] ;"
    ],
    "pair_id": 3744,
    "xfg_id": 5748,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "91",
      "95",
      "97",
      "101"
    ],
    "keyLine": "101",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ]
    ],
    "target": 0,
    "filePath": "119-1000-c/testcases/000/234/269/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_15.c",
    "nodes-line": [
      "    switch(6)\n",
      "        charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));\n",
      "        structCharVoid->voidSecond = (void *)SRC_STR;\n",
      "        memmove(structCharVoid->charFirst, SRC_STR, sizeof(structCharVoid->charFirst));\n"
    ],
    "nodes-line-sym": [
      "switch ( 6 )",
      "VAR1 * VAR2 = ( VAR1 * ) malloc ( sizeof ( VAR1 ) ) ;",
      "VAR2 -> VAR3 = ( void * ) VAR4 ;",
      "memmove ( VAR2 -> VAR5 , VAR4 , sizeof ( VAR2 -> VAR5 ) ) ;"
    ],
    "pair_id": 4251,
    "xfg_id": 3703,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "157",
      "158",
      "166",
      "171",
      "175",
      "180",
      "181",
      "182",
      "183",
      "184",
      "185"
    ],
    "keyLine": "180",
    "edges-No": [
      [
        0,
        5
      ],
      [
        0,
        8
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ],
      [
        3,
        5
      ],
      [
        3,
        8
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        4,
        7
      ],
      [
        4,
        8
      ],
      [
        4,
        9
      ],
      [
        4,
        10
      ],
      [
        5,
        6
      ],
      [
        6,
        9
      ],
      [
        6,
        10
      ],
      [
        6,
        7
      ],
      [
        6,
        8
      ],
      [
        7,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-2700-c/testcases/000/232/133/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    switch(5)\n",
      "        char * dataGoodBuffer = (char *)malloc(50*sizeof(char));\n",
      "        data = (void *)dataGoodBuffer;\n",
      "    switch(7)\n",
      "        size_t dataLen = strlen((char *)data);\n",
      "        void * dest = (void *)calloc(dataLen+1, 1);\n",
      "        if (dest == NULL) {exit(-1);}\n",
      "        (void)strcpy(dest, data);\n",
      "        printLine((char *)dest);\n",
      "        free(dest);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "switch ( 5 )",
      "char * VAR2 = ( char * ) malloc ( 50 * sizeof ( char ) ) ;",
      "VAR1 = ( void * ) VAR2 ;",
      "switch ( 7 )",
      "size_t VAR3 = strlen ( ( char * ) VAR1 ) ;",
      "void * VAR4 = ( void * ) calloc ( VAR3 + 1 , 1 ) ;",
      "if ( VAR4 == NULL ) { FUN1 ( - 1 ) ; }",
      "( void ) strcpy ( VAR4 , VAR1 ) ;",
      "FUN2 ( ( char * ) VAR4 ) ;",
      "free ( VAR4 ) ;"
    ],
    "pair_id": 4230,
    "xfg_id": 7819,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "83",
      "85",
      "88",
      "90",
      "92",
      "94",
      "96"
    ],
    "keyLine": "96",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        6
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        6
      ],
      [
        5,
        6
      ],
      [
        5,
        5
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/073/641/CWE124_Buffer_Underwrite__CWE839_fgets_74b.cpp",
    "nodes-line": [
      "void goodB2GSink(map<int, int> dataMap)\n",
      "    int data = dataMap[2];\n",
      "        int buffer[10] = { 0 };\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "            for(i = 0; i < 10; i++)\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( VAR1 < int , int > VAR2 )",
      "int VAR3 = VAR2 [ 2 ] ;",
      "int VAR4 [ 10 ] = { 0 } ;",
      "if ( VAR3 >= 0 && VAR3 < ( 10 ) )",
      "VAR4 [ VAR3 ] = 1 ;",
      "for ( VAR5 = 0 ; VAR5 < 10 ; VAR5 ++ )",
      "FUN2 ( VAR4 [ VAR5 ] ) ;"
    ],
    "pair_id": 1017,
    "xfg_id": 5772,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "23",
      "27",
      "30",
      "33",
      "35"
    ],
    "keyLine": "35",
    "edges-No": [
      [
        0,
        4
      ],
      [
        1,
        4
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-5700-c/testcases/000/076/832/CWE126_Buffer_Overread__wchar_t_alloca_loop_41.c",
    "nodes-line": [
      "void CWE126_Buffer_Overread__wchar_t_alloca_loop_41_badSink(wchar_t * data)\n",
      "        wchar_t dest[100];\n",
      "        destLen = wcslen(dest);\n",
      "        for (i = 0; i < destLen; i++)\n",
      "            dest[i] = data[i];\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( wchar_t * VAR1 )",
      "wchar_t VAR2 [ 100 ] ;",
      "VAR3 = wcslen ( VAR2 ) ;",
      "for ( VAR4 = 0 ; VAR4 < VAR3 ; VAR4 ++ )",
      "VAR2 [ VAR4 ] = VAR1 [ VAR4 ] ;"
    ],
    "pair_id": 4381,
    "xfg_id": 5783,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "31",
      "32",
      "35",
      "39",
      "42"
    ],
    "keyLine": "42",
    "edges-No": [
      [
        0,
        4
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-2400-c/testcases/000/232/493/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_11.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    if(globalReturnsTrue())\n",
      "        data = (char *)malloc(10*sizeof(char));\n",
      "        char source[10+1] = SRC_STRING;\n",
      "        memcpy(data, source, (strlen(source) + 1) * sizeof(char));\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "if ( FUN1 ( ) )",
      "VAR1 = ( char * ) malloc ( 10 * sizeof ( char ) ) ;",
      "char VAR2 [ 10 + 1 ] = VAR3 ;",
      "memcpy ( VAR1 , VAR2 , ( strlen ( VAR2 ) + 1 ) * sizeof ( char ) ) ;"
    ],
    "pair_id": 9595,
    "xfg_id": 3735,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "28",
      "29",
      "32",
      "34",
      "37",
      "45",
      "48",
      "51",
      "53"
    ],
    "keyLine": "53",
    "edges-No": [
      [
        0,
        7
      ],
      [
        0,
        8
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ],
      [
        4,
        7
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        8
      ],
      [
        7,
        8
      ]
    ],
    "target": 1,
    "filePath": "119-6400-c/testcases/000/075/655/CWE126_Buffer_Overread__CWE129_fgets_10.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(globalTrue)\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n",
      "            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n",
      "                data = atoi(inputBuffer);\n",
      "    if(globalTrue)\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0)\n",
      "                printIntLine(buffer[data]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( VAR2 )",
      "char VAR3 [ VAR4 ] = \"\" ;",
      "if ( fgets ( VAR3 , VAR4 , stdin ) != NULL )",
      "VAR1 = atoi ( VAR3 ) ;",
      "if ( VAR2 )",
      "int VAR5 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 )",
      "FUN1 ( VAR5 [ VAR1 ] ) ;"
    ],
    "pair_id": 66,
    "xfg_id": 11938,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "512",
      "526",
      "529",
      "531",
      "532",
      "533",
      "534",
      "535",
      "536",
      "537",
      "538",
      "540",
      "542",
      "464",
      "488",
      "490",
      "491",
      "493",
      "494",
      "496",
      "498",
      "499",
      "501",
      "502",
      "504",
      "505",
      "507",
      "510"
    ],
    "keyLine": "464",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        11
      ],
      [
        2,
        2
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        6,
        8
      ],
      [
        6,
        7
      ],
      [
        8,
        9
      ],
      [
        8,
        10
      ],
      [
        11,
        12
      ],
      [
        13,
        14
      ],
      [
        13,
        16
      ],
      [
        13,
        18
      ],
      [
        14,
        19
      ],
      [
        14,
        15
      ],
      [
        14,
        17
      ],
      [
        17,
        17
      ],
      [
        17,
        18
      ],
      [
        18,
        20
      ],
      [
        18,
        21
      ],
      [
        18,
        18
      ],
      [
        19,
        0
      ],
      [
        21,
        22
      ],
      [
        21,
        23
      ],
      [
        23,
        24
      ],
      [
        23,
        25
      ],
      [
        25,
        26
      ],
      [
        25,
        27
      ],
      [
        27,
        2
      ],
      [
        27,
        3
      ],
      [
        27,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-12600-c/testcases/000/001/293/nxt-bad.c",
    "nodes-line": [
      "  len += 10;\n",
      "  len += comp_size;\n",
      "    *p++ = *comp_dn2++;\n",
      "  PUTLONG(1 << 24, p);             /* bitmap - set NXT type*/\n",
      "  p += 4;\n",
      "  PUTLONG(0, p);\n",
      "  p += 4;\n",
      "  PUTLONG(0, p);\n",
      "  p += 4;\n",
      "  PUTLONG(0, p);\n",
      "  p += 4;\n",
      "  len += 16;\n",
      "  return (len);\n",
      "  comp_dn = (unsigned char *) malloc(200*sizeof(unsigned char));\n",
      "  comp_size = dn_comp((const char *) exp_dn, comp_dn, 200, dnptrs, lastdnptr);\n",
      "  printf(\"comp_size = %d\\n\", comp_size);\n",
      "  printf(\"exp_dn = %s, comp_dn = %s\\n\", exp_dn, (char *) comp_dn);\n",
      "  for(i=0; i<comp_size; i++) \n",
      "    *p++ = *comp_dn++;\n",
      "  len += comp_size;\n",
      "  PUTSHORT(30, p); /* type = T_NXT = 30 */\n",
      "  p += 2;    \n",
      "  PUTSHORT(255, p);   /* class = C_ANY = 255*/\n",
      "  p += 2;\n",
      "  PUTLONG(255, p);  /* ttl */\n",
      "  p += 4;\n",
      "  PUTSHORT(16, p); /* dlen = len of everything starting with the covered byte \n",
      "  p += 2;\n"
    ],
    "nodes-line-sym": [
      "VAR1 += 10 ;",
      "VAR1 += VAR2 ;",
      "* VAR3 ++ = * VAR4 ++ ;",
      "FUN1 ( 1 << 24 , VAR3 ) ;",
      "VAR3 += 4 ;",
      "FUN1 ( 0 , VAR3 ) ;",
      "VAR3 += 4 ;",
      "FUN1 ( 0 , VAR3 ) ;",
      "VAR3 += 4 ;",
      "FUN1 ( 0 , VAR3 ) ;",
      "VAR3 += 4 ;",
      "VAR1 += 16 ;",
      "return ( VAR1 ) ;",
      "VAR5 = ( unsigned char * ) malloc ( 200 * sizeof ( unsigned char ) ) ;",
      "VAR2 = FUN2 ( ( const char * ) VAR6 , VAR5 , 200 , VAR7 , VAR8 ) ;",
      "printf ( \"\" , VAR2 ) ;",
      "printf ( \"\" , VAR6 , ( char * ) VAR5 ) ;",
      "for ( VAR9 = 0 ; VAR9 < VAR2 ; VAR9 ++ )",
      "* VAR3 ++ = * VAR5 ++ ;",
      "VAR1 += VAR2 ;",
      "FUN3 ( 30 , VAR3 ) ;",
      "VAR3 += 2 ;",
      "FUN3 ( 255 , VAR3 ) ;",
      "VAR3 += 2 ;",
      "FUN1 ( 255 , VAR3 ) ;",
      "VAR3 += 4 ;",
      "FUN3 ( 16 , VAR3 ) ; / * VAR10 = len of everything starting with the covered VAR11",
      "VAR3 += 2 ;"
    ],
    "pair_id": 7814,
    "xfg_id": 5796,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "35",
      "37",
      "38"
    ],
    "keyLine": "37",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        2
      ]
    ],
    "target": 0,
    "filePath": "119-4200-c/testcases/000/149/068/gets2-good.c",
    "nodes-line": [
      "char buf[MAXSIZE];\n",
      "if(fgets(buf, sizeof buf, stdin))/* FIX */\n",
      "printf(\"result: %s\\n\", buf);\n"
    ],
    "nodes-line-sym": [
      "char VAR1 [ VAR2 ] ;",
      "if ( fgets ( VAR1 , sizeof VAR1 , stdin ) )",
      "printf ( \"\" , VAR1 ) ;"
    ],
    "pair_id": 7677,
    "xfg_id": 5800,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "161",
      "162",
      "165",
      "170",
      "173",
      "177",
      "178",
      "182"
    ],
    "keyLine": "182",
    "edges-No": [
      [
        0,
        5
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        3
      ],
      [
        3,
        5
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        4,
        7
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-2700-c/testcases/000/232/131/CWE122_Heap_Based_Buffer_Overflow__CWE135_13.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    if(GLOBAL_CONST_FIVE==5)\n",
      "            char * dataGoodBuffer = (char *)malloc(50*sizeof(char));\n",
      "            data = (void *)dataGoodBuffer;\n",
      "    if(GLOBAL_CONST_FIVE==5)\n",
      "            size_t dataLen = strlen((char *)data);\n",
      "            void * dest = (void *)calloc(dataLen+1, 1);\n",
      "            free(dest);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "if ( VAR2 == 5 )",
      "char * VAR3 = ( char * ) malloc ( 50 * sizeof ( char ) ) ;",
      "VAR1 = ( void * ) VAR3 ;",
      "if ( VAR2 == 5 )",
      "size_t VAR4 = strlen ( ( char * ) VAR1 ) ;",
      "void * VAR5 = ( void * ) calloc ( VAR4 + 1 , 1 ) ;",
      "free ( VAR5 ) ;"
    ],
    "pair_id": 2945,
    "xfg_id": 9903,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "49",
      "58",
      "59",
      "63",
      "65",
      "67",
      "70",
      "71",
      "73",
      "75",
      "76",
      "77",
      "78",
      "79",
      "81",
      "85",
      "86",
      "88",
      "91",
      "93",
      "95",
      "96",
      "98",
      "101",
      "103",
      "116",
      "118",
      "120",
      "122",
      "127"
    ],
    "keyLine": "70",
    "edges-No": [
      [
        0,
        21
      ],
      [
        0,
        23
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        1,
        21
      ],
      [
        1,
        22
      ],
      [
        1,
        7
      ],
      [
        2,
        18
      ],
      [
        2,
        19
      ],
      [
        2,
        15
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        5,
        23
      ],
      [
        6,
        21
      ],
      [
        6,
        22
      ],
      [
        6,
        15
      ],
      [
        6,
        7
      ],
      [
        6,
        13
      ],
      [
        7,
        8
      ],
      [
        7,
        9
      ],
      [
        7,
        10
      ],
      [
        7,
        11
      ],
      [
        7,
        12
      ],
      [
        7,
        13
      ],
      [
        10,
        11
      ],
      [
        11,
        11
      ],
      [
        11,
        12
      ],
      [
        12,
        10
      ],
      [
        13,
        14
      ],
      [
        13,
        15
      ],
      [
        13,
        16
      ],
      [
        15,
        18
      ],
      [
        15,
        16
      ],
      [
        16,
        17
      ],
      [
        16,
        18
      ],
      [
        16,
        19
      ],
      [
        16,
        20
      ],
      [
        19,
        25
      ],
      [
        19,
        26
      ],
      [
        20,
        3
      ],
      [
        21,
        22
      ],
      [
        23,
        24
      ],
      [
        25,
        27
      ],
      [
        25,
        26
      ],
      [
        25,
        29
      ],
      [
        26,
        28
      ],
      [
        27,
        27
      ],
      [
        27,
        28
      ]
    ],
    "target": 1,
    "filePath": "119-12500-c/testcases/000/062/531/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_16.c",
    "nodes-line": [
      "    while(1)\n",
      "            SOCKET connectSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                    break;\n",
      "                wsaDataInit = 1;\n",
      "                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (connectSocket == INVALID_SOCKET)\n",
      "                    break;\n",
      "                memset(&service, 0, sizeof(service));\n",
      "                service.sin_family = AF_INET;\n",
      "                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n",
      "                service.sin_port = htons(TCP_PORT);\n",
      "                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                    break;\n",
      "                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                    break;\n",
      "                inputBuffer[recvResult] = '\\0';\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "            if (connectSocket != INVALID_SOCKET)\n",
      "                CLOSE_SOCKET(connectSocket);\n",
      "            if (wsaDataInit)\n",
      "                WSACleanup();\n",
      "            if (data >= 0)\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n",
      "                printLine(\"ERROR: Array index is negative.\");\n"
    ],
    "nodes-line-sym": [
      "while ( 1 )",
      "SOCKET VAR1 = VAR2 ;",
      "char VAR3 [ VAR4 ] ;",
      "if ( FUN1 ( FUN2 ( 2 , 2 ) , & VAR5 ) != VAR6 )",
      "break ;",
      "VAR7 = 1 ;",
      "VAR1 = socket ( VAR8 , VAR9 , VAR10 ) ;",
      "if ( VAR1 == VAR2 )",
      "break ;",
      "memset ( & VAR11 , 0 , sizeof ( VAR11 ) ) ;",
      "VAR11 . VAR12 = VAR8 ;",
      "VAR11 . VAR13 . VAR14 = inet_addr ( VAR15 ) ;",
      "VAR11 . VAR16 = FUN3 ( VAR17 ) ;",
      "if ( connect ( VAR1 , ( struct VAR18 * ) & VAR11 , sizeof ( VAR11 ) ) == VAR19 )",
      "break ;",
      "VAR20 = recv ( VAR1 , VAR3 , VAR4 - 1 , 0 ) ;",
      "if ( VAR20 == VAR19 || VAR20 == 0 )",
      "break ;",
      "VAR3 [ VAR20 ] = '' ;",
      "VAR21 = atoi ( VAR3 ) ;",
      "while ( 0 ) ;",
      "if ( VAR1 != VAR2 )",
      "FUN4 ( VAR1 ) ;",
      "if ( VAR7 )",
      "FUN5 ( ) ;",
      "if ( VAR21 >= 0 )",
      "VAR22 [ VAR21 ] = 1 ;",
      "for ( VAR23 = 0 ; VAR23 < 10 ; VAR23 ++ )",
      "FUN6 ( VAR22 [ VAR23 ] ) ;",
      "FUN7 ( \"\" ) ;"
    ],
    "pair_id": 426,
    "xfg_id": 11953,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "35",
      "38",
      "39",
      "40",
      "42",
      "44",
      "45",
      "46",
      "47",
      "48"
    ],
    "keyLine": "38",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        0,
        7
      ],
      [
        0,
        8
      ],
      [
        0,
        9
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        6
      ],
      [
        1,
        7
      ],
      [
        1,
        8
      ],
      [
        1,
        9
      ],
      [
        2,
        2
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        3,
        8
      ]
    ],
    "target": 1,
    "filePath": "119-2900-c/testcases/000/231/903/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_02.c",
    "nodes-line": [
      "    if(1)\n",
      "            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));\n",
      "            if (structCharVoid == NULL) {exit(-1);}\n",
      "            structCharVoid->voidSecond = (void *)SRC_STR;\n",
      "            printLine((char *)structCharVoid->voidSecond);\n",
      "            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));\n",
      "            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\\0'; /* null terminate the string */\n",
      "            printLine((char *)structCharVoid->charFirst);\n",
      "            printLine((char *)structCharVoid->voidSecond);\n",
      "            free(structCharVoid);\n"
    ],
    "nodes-line-sym": [
      "if ( 1 )",
      "VAR1 * VAR2 = ( VAR1 * ) malloc ( sizeof ( VAR1 ) ) ;",
      "if ( VAR2 == NULL ) { FUN1 ( - 1 ) ; }",
      "VAR2 -> VAR3 = ( void * ) VAR4 ;",
      "FUN2 ( ( char * ) VAR2 -> VAR3 ) ;",
      "memcpy ( VAR2 -> VAR5 , VAR4 , sizeof ( * VAR2 ) ) ;",
      "VAR2 -> VAR5 [ ( sizeof ( VAR2 -> VAR5 ) / sizeof ( char ) ) - 1 ] = '' ;",
      "FUN2 ( ( char * ) VAR2 -> VAR5 ) ;",
      "FUN2 ( ( char * ) VAR2 -> VAR3 ) ;",
      "free ( VAR2 ) ;"
    ],
    "pair_id": 3985,
    "xfg_id": 5811,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "35",
      "38",
      "40",
      "42",
      "44",
      "45",
      "46",
      "47"
    ],
    "keyLine": "40",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        0,
        7
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        6
      ],
      [
        1,
        7
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ],
      [
        2,
        7
      ]
    ],
    "target": 1,
    "filePath": "119-2800-c/testcases/000/231/935/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c",
    "nodes-line": [
      "    while(1)\n",
      "            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));\n",
      "            structCharVoid->voidSecond = (void *)SRC_STR;\n",
      "            printLine((char *)structCharVoid->voidSecond);\n",
      "            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));\n",
      "            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\\0'; /* null terminate the string */\n",
      "            printLine((char *)structCharVoid->charFirst);\n",
      "            printLine((char *)structCharVoid->voidSecond);\n"
    ],
    "nodes-line-sym": [
      "while ( 1 )",
      "VAR1 * VAR2 = ( VAR1 * ) malloc ( sizeof ( VAR1 ) ) ;",
      "VAR2 -> VAR3 = ( void * ) VAR4 ;",
      "FUN1 ( ( char * ) VAR2 -> VAR3 ) ;",
      "memmove ( VAR2 -> VAR5 , VAR4 , sizeof ( * VAR2 ) ) ;",
      "VAR2 -> VAR5 [ ( sizeof ( VAR2 -> VAR5 ) / sizeof ( char ) ) - 1 ] = '' ;",
      "FUN1 ( ( char * ) VAR2 -> VAR5 ) ;",
      "FUN1 ( ( char * ) VAR2 -> VAR3 ) ;"
    ],
    "pair_id": 6767,
    "xfg_id": 5817,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "27",
      "28",
      "32",
      "41"
    ],
    "keyLine": "32",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-10200-c/testcases/000/065/514/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c",
    "nodes-line": [
      "    char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    data = dataBuffer;\n",
      "    if(5==5)\n",
      "        data[100-1] = '\\0'; /* null terminate */\n",
      "            dest[i] = data[i];\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "VAR2 = VAR1 ;",
      "if ( 5 == 5 )",
      "VAR2 [ 100 - 1 ] = '' ;",
      "VAR3 [ VAR4 ] = VAR2 [ VAR4 ] ;"
    ],
    "pair_id": 13289,
    "xfg_id": 11964,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "168",
      "169",
      "178",
      "180",
      "183",
      "186",
      "188"
    ],
    "keyLine": "188",
    "edges-No": [
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        1,
        2
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        4,
        6
      ],
      [
        5,
        6
      ]
    ],
    "target": 0,
    "filePath": "119-5500-c/testcases/000/077/105/CWE127_Buffer_Underread__CWE839_fgets_08.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(staticReturnsFalse())\n",
      "        data = 7;\n",
      "    if(staticReturnsTrue())\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data < 10)\n",
      "                printIntLine(buffer[data]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( FUN1 ( ) )",
      "VAR1 = 7 ;",
      "if ( FUN2 ( ) )",
      "int VAR2 [ 10 ] = { 0 } ;",
      "if ( VAR1 < 10 )",
      "FUN3 ( VAR2 [ VAR1 ] ) ;"
    ],
    "pair_id": 808,
    "xfg_id": 11966,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "42",
      "43",
      "44",
      "48",
      "49"
    ],
    "keyLine": "42",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/065/778/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_43.cpp",
    "nodes-line": [
      "    char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    data = dataBuffer;\n",
      "    badSource(data);\n",
      "        SNPRINTF(dest, strlen(data), \"%s\", data);\n",
      "        printLine(data);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "VAR2 = VAR1 ;",
      "FUN2 ( VAR2 ) ;",
      "FUN3 ( VAR3 , strlen ( VAR2 ) , \"\" , VAR2 ) ;",
      "FUN4 ( VAR2 ) ;"
    ],
    "pair_id": 4747,
    "xfg_id": 3776,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "27",
      "31",
      "32",
      "37",
      "38",
      "39"
    ],
    "keyLine": "26",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        1
      ]
    ],
    "target": 1,
    "filePath": "119-1200-c/testcases/000/234/026/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_13.c",
    "nodes-line": [
      "    data = (char *)malloc(100*sizeof(char));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "        memset(data, 'A', 100-1); /* fill with 'A's */\n",
      "        data[100-1] = '\\0'; /* null terminate */\n",
      "        strcpy(dest, data);\n",
      "        printLine(data);\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR1 , '' , 100 - 1 ) ;",
      "VAR1 [ 100 - 1 ] = '' ;",
      "strcpy ( VAR2 , VAR1 ) ;",
      "FUN2 ( VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 2135,
    "xfg_id": 7874,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "94",
      "96",
      "99",
      "106",
      "108",
      "112"
    ],
    "keyLine": "108",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        5
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ]
    ],
    "target": 0,
    "filePath": "119-cpp/testcases/000/067/606/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_fgets_66b.cpp",
    "nodes-line": [
      "void goodB2GSink(int dataArray[])\n",
      "    int data = dataArray[2];\n",
      "        int * buffer = new int[10];\n",
      "        if (data >= 0 && data < (10))\n",
      "            buffer[data] = 1;\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( int VAR1 [ ] )",
      "int VAR2 = VAR1 [ 2 ] ;",
      "int * VAR3 = new int [ 10 ] ;",
      "if ( VAR2 >= 0 && VAR2 < ( 10 ) )",
      "VAR3 [ VAR2 ] = 1 ;",
      "FUN2 ( VAR3 [ VAR4 ] ) ;"
    ],
    "pair_id": 1999,
    "xfg_id": 5837,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "59",
      "67",
      "69",
      "71",
      "73",
      "75",
      "76"
    ],
    "keyLine": "69",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        6
      ],
      [
        2,
        4
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ],
      [
        2,
        3
      ]
    ],
    "target": 0,
    "filePath": "119-1000-c/testcases/000/234/263/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_09.c",
    "nodes-line": [
      "    if(GLOBAL_CONST_FALSE)\n",
      "            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));\n",
      "            structCharVoid->voidSecond = (void *)SRC_STR;\n",
      "            printWLine((wchar_t *)structCharVoid->voidSecond);\n",
      "            memmove(structCharVoid->charFirst, SRC_STR, sizeof(structCharVoid->charFirst));\n",
      "            printWLine((wchar_t *)structCharVoid->charFirst);\n",
      "            printWLine((wchar_t *)structCharVoid->voidSecond);\n"
    ],
    "nodes-line-sym": [
      "if ( VAR1 )",
      "VAR2 * VAR3 = ( VAR2 * ) malloc ( sizeof ( VAR2 ) ) ;",
      "VAR3 -> VAR4 = ( void * ) VAR5 ;",
      "FUN1 ( ( wchar_t * ) VAR3 -> VAR4 ) ;",
      "memmove ( VAR3 -> VAR6 , VAR5 , sizeof ( VAR3 -> VAR6 ) ) ;",
      "FUN1 ( ( wchar_t * ) VAR3 -> VAR6 ) ;",
      "FUN1 ( ( wchar_t * ) VAR3 -> VAR4 ) ;"
    ],
    "pair_id": 502,
    "xfg_id": 11982,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "76",
      "79",
      "80",
      "81",
      "83",
      "85",
      "87",
      "88",
      "89"
    ],
    "keyLine": "79",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        0,
        7
      ],
      [
        0,
        8
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        6
      ],
      [
        1,
        7
      ],
      [
        1,
        8
      ],
      [
        2,
        2
      ],
      [
        3,
        7
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ]
    ],
    "target": 0,
    "filePath": "119-1000-c/testcases/000/234/248/CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_12.c",
    "nodes-line": [
      "    if(globalReturnsTrueOrFalse())\n",
      "            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));\n",
      "            if (structCharVoid == NULL) {exit(-1);}\n",
      "            structCharVoid->voidSecond = (void *)SRC_STR;\n",
      "            printWLine((wchar_t *)structCharVoid->voidSecond);\n",
      "            memcpy(structCharVoid->charFirst, SRC_STR, sizeof(structCharVoid->charFirst));\n",
      "            printWLine((wchar_t *)structCharVoid->charFirst);\n",
      "            printWLine((wchar_t *)structCharVoid->voidSecond);\n",
      "            free(structCharVoid);\n"
    ],
    "nodes-line-sym": [
      "if ( FUN1 ( ) )",
      "VAR1 * VAR2 = ( VAR1 * ) malloc ( sizeof ( VAR1 ) ) ;",
      "if ( VAR2 == NULL ) { FUN2 ( - 1 ) ; }",
      "VAR2 -> VAR3 = ( void * ) VAR4 ;",
      "FUN3 ( ( wchar_t * ) VAR2 -> VAR3 ) ;",
      "memcpy ( VAR2 -> VAR5 , VAR4 , sizeof ( VAR2 -> VAR5 ) ) ;",
      "FUN3 ( ( wchar_t * ) VAR2 -> VAR5 ) ;",
      "FUN3 ( ( wchar_t * ) VAR2 -> VAR3 ) ;",
      "free ( VAR2 ) ;"
    ],
    "pair_id": 2693,
    "xfg_id": 7891,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "129",
      "114",
      "115",
      "119",
      "121",
      "124",
      "127"
    ],
    "keyLine": "129",
    "edges-No": [
      [
        1,
        0
      ],
      [
        1,
        6
      ],
      [
        2,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        0
      ],
      [
        3,
        6
      ],
      [
        4,
        4
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        5,
        0
      ],
      [
        6,
        0
      ]
    ],
    "target": 0,
    "filePath": "119-6400-c/testcases/000/075/662/CWE126_Buffer_Overread__CWE129_fgets_17.c",
    "nodes-line": [
      "                printIntLine(buffer[data]);\n",
      "    data = -1;\n",
      "    for(h = 0; h < 1; h++)\n",
      "        data = 7;\n",
      "    for(j = 0; j < 1; j++)\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0)\n"
    ],
    "nodes-line-sym": [
      "FUN1 ( VAR1 [ VAR2 ] ) ;",
      "VAR2 = - 1 ;",
      "for ( VAR3 = 0 ; VAR3 < 1 ; VAR3 ++ )",
      "VAR2 = 7 ;",
      "for ( VAR4 = 0 ; VAR4 < 1 ; VAR4 ++ )",
      "int VAR1 [ 10 ] = { 0 } ;",
      "if ( VAR2 >= 0 )"
    ],
    "pair_id": 1709,
    "xfg_id": 11989,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "68",
      "71",
      "74",
      "57",
      "59",
      "62",
      "63"
    ],
    "keyLine": "74",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        3,
        1
      ],
      [
        4,
        2
      ],
      [
        5,
        0
      ],
      [
        5,
        6
      ],
      [
        6,
        0
      ]
    ],
    "target": 0,
    "filePath": "119-13000-c/testcases/000/000/826/basic-00178-ok.c",
    "nodes-line": [
      "  else if (pid != -1)\n",
      "    if (WIFEXITED(child_status))\n",
      "        buf[9] = 'A';\n",
      "  int child_status;\n",
      "  char buf[10];\n",
      "  pid = fork();\n",
      "  if (pid == 0)\n"
    ],
    "nodes-line-sym": [
      "else if ( VAR1 != - 1 )",
      "if ( FUN1 ( VAR2 ) )",
      "VAR3 [ 9 ] = '' ;",
      "int VAR2 ;",
      "char VAR3 [ 10 ] ;",
      "VAR1 = FUN2 ( ) ;",
      "if ( VAR1 == 0 )"
    ],
    "pair_id": 5685,
    "xfg_id": 3798,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "162",
      "171",
      "172",
      "173",
      "177",
      "179",
      "181",
      "184",
      "185",
      "187",
      "189",
      "190",
      "191",
      "192",
      "193",
      "195",
      "197",
      "199",
      "201",
      "202",
      "204",
      "207",
      "208",
      "210",
      "213",
      "215",
      "217",
      "218",
      "220",
      "222",
      "224",
      "227",
      "229",
      "251",
      "253",
      "255",
      "257",
      "262"
    ],
    "keyLine": "184",
    "edges-No": [
      [
        0,
        31
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        27
      ],
      [
        0,
        29
      ],
      [
        1,
        27
      ],
      [
        1,
        28
      ],
      [
        1,
        2
      ],
      [
        2,
        30
      ],
      [
        2,
        8
      ],
      [
        2,
        27
      ],
      [
        2,
        29
      ],
      [
        3,
        25
      ],
      [
        3,
        24
      ],
      [
        3,
        21
      ],
      [
        4,
        7
      ],
      [
        4,
        8
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        6,
        31
      ],
      [
        7,
        14
      ],
      [
        7,
        8
      ],
      [
        7,
        16
      ],
      [
        7,
        18
      ],
      [
        7,
        27
      ],
      [
        7,
        28
      ],
      [
        8,
        13
      ],
      [
        8,
        14
      ],
      [
        8,
        9
      ],
      [
        8,
        10
      ],
      [
        8,
        11
      ],
      [
        8,
        12
      ],
      [
        11,
        12
      ],
      [
        12,
        13
      ],
      [
        12,
        12
      ],
      [
        13,
        11
      ],
      [
        14,
        15
      ],
      [
        14,
        16
      ],
      [
        16,
        18
      ],
      [
        16,
        19
      ],
      [
        16,
        17
      ],
      [
        18,
        30
      ],
      [
        18,
        19
      ],
      [
        18,
        29
      ],
      [
        18,
        21
      ],
      [
        19,
        22
      ],
      [
        19,
        20
      ],
      [
        19,
        21
      ],
      [
        21,
        22
      ],
      [
        21,
        24
      ],
      [
        22,
        26
      ],
      [
        22,
        23
      ],
      [
        22,
        24
      ],
      [
        22,
        25
      ],
      [
        25,
        33
      ],
      [
        25,
        34
      ],
      [
        26,
        4
      ],
      [
        27,
        28
      ],
      [
        29,
        30
      ],
      [
        31,
        32
      ],
      [
        33,
        34
      ],
      [
        33,
        37
      ],
      [
        33,
        35
      ],
      [
        34,
        36
      ],
      [
        35,
        36
      ],
      [
        35,
        35
      ]
    ],
    "target": 0,
    "filePath": "119-2600-c/testcases/000/232/343/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_11.c",
    "nodes-line": [
      "    if(globalReturnsTrue())\n",
      "            SOCKET listenSocket = INVALID_SOCKET;\n",
      "            SOCKET acceptSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                    break;\n",
      "                wsaDataInit = 1;\n",
      "                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (listenSocket == INVALID_SOCKET)\n",
      "                    break;\n",
      "                memset(&service, 0, sizeof(service));\n",
      "                service.sin_family = AF_INET;\n",
      "                service.sin_addr.s_addr = INADDR_ANY;\n",
      "                service.sin_port = htons(TCP_PORT);\n",
      "                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                    break;\n",
      "                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "                    break;\n",
      "                acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "                if (acceptSocket == SOCKET_ERROR)\n",
      "                    break;\n",
      "                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                    break;\n",
      "                inputBuffer[recvResult] = '\\0';\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "            if (listenSocket != INVALID_SOCKET)\n",
      "                CLOSE_SOCKET(listenSocket);\n",
      "            if (acceptSocket != INVALID_SOCKET)\n",
      "                CLOSE_SOCKET(acceptSocket);\n",
      "            if (wsaDataInit)\n",
      "                WSACleanup();\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n",
      "                printLine(\"ERROR: Array index is out-of-bounds\");\n"
    ],
    "nodes-line-sym": [
      "if ( FUN1 ( ) )",
      "SOCKET VAR1 = VAR2 ;",
      "SOCKET VAR3 = VAR2 ;",
      "char VAR4 [ VAR5 ] ;",
      "if ( FUN2 ( FUN3 ( 2 , 2 ) , & VAR6 ) != VAR7 )",
      "break ;",
      "VAR8 = 1 ;",
      "VAR1 = socket ( VAR9 , VAR10 , VAR11 ) ;",
      "if ( VAR1 == VAR2 )",
      "break ;",
      "memset ( & VAR12 , 0 , sizeof ( VAR12 ) ) ;",
      "VAR12 . VAR13 = VAR9 ;",
      "VAR12 . VAR14 . VAR15 = VAR16 ;",
      "VAR12 . VAR17 = FUN4 ( VAR18 ) ;",
      "if ( bind ( VAR1 , ( struct VAR19 * ) & VAR12 , sizeof ( VAR12 ) ) == VAR20 )",
      "break ;",
      "if ( FUN5 ( VAR1 , VAR21 ) == VAR20 )",
      "break ;",
      "VAR3 = accept ( VAR1 , NULL , NULL ) ;",
      "if ( VAR3 == VAR20 )",
      "break ;",
      "VAR22 = recv ( VAR3 , VAR4 , VAR5 - 1 , 0 ) ;",
      "if ( VAR22 == VAR20 || VAR22 == 0 )",
      "break ;",
      "VAR4 [ VAR22 ] = '' ;",
      "VAR23 = atoi ( VAR4 ) ;",
      "while ( 0 ) ;",
      "if ( VAR1 != VAR2 )",
      "FUN6 ( VAR1 ) ;",
      "if ( VAR3 != VAR2 )",
      "FUN6 ( VAR3 ) ;",
      "if ( VAR8 )",
      "FUN7 ( ) ;",
      "if ( VAR23 >= 0 && VAR23 < ( 10 ) )",
      "VAR24 [ VAR23 ] = 1 ;",
      "for ( VAR25 = 0 ; VAR25 < 10 ; VAR25 ++ )",
      "FUN8 ( VAR24 [ VAR25 ] ) ;",
      "FUN9 ( \"\" ) ;"
    ],
    "pair_id": 93,
    "xfg_id": 7894,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "353",
      "355",
      "407",
      "408",
      "415",
      "426",
      "434",
      "445",
      "456",
      "470",
      "474",
      "476",
      "478",
      "480",
      "482",
      "483",
      "486",
      "487",
      "493"
    ],
    "keyLine": "474",
    "edges-No": [
      [
        0,
        9
      ],
      [
        0,
        1
      ],
      [
        1,
        9
      ],
      [
        2,
        8
      ],
      [
        2,
        5
      ],
      [
        3,
        7
      ],
      [
        4,
        6
      ],
      [
        4,
        8
      ],
      [
        4,
        7
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        7
      ],
      [
        7,
        8
      ],
      [
        7,
        9
      ],
      [
        8,
        10
      ],
      [
        8,
        11
      ],
      [
        8,
        18
      ],
      [
        8,
        9
      ],
      [
        9,
        10
      ],
      [
        10,
        13
      ],
      [
        10,
        14
      ],
      [
        10,
        11
      ],
      [
        10,
        12
      ],
      [
        14,
        15
      ],
      [
        14,
        18
      ],
      [
        14,
        16
      ],
      [
        14,
        17
      ]
    ],
    "target": 0,
    "filePath": "119-12600-c/testcases/000/001/294/nxt-ok.c",
    "nodes-line": [
      "switch (type) {\n",
      "  if (dlen != INT32SZ) {\n",
      "cp += n;\n",
      "n1 = strlen((char *)data) + 1;\n",
      "n2 = dlen - n;\n",
      "if ((*cp & 0x01) == 0) {\n",
      "if (n2 < 4 || n2 > 16) {\n",
      "if (n2 > sizeof data - n1) \n",
      "cp += n2;\n",
      "if (cp > eom) {\n",
      "if ((u_int)(cp - rdatap) != dlen) {\n",
      "  printf(\"encoded rdata length is %u, but actual length was %u\",\n",
      "  hp->rcode = FORMERR;\n",
      "  return (-1);\n",
      "if (n > MAXDATA) {\n",
      "  printf(\"update type %d: %d bytes is too much data\",\n",
      "  hp->rcode = FORMERR;\n",
      "  return (-1);\n",
      "return (cp - rrp);\n"
    ],
    "nodes-line-sym": [
      "switch ( VAR1 ) {",
      "if ( VAR2 != VAR3 ) {",
      "VAR4 += VAR5 ;",
      "VAR6 = strlen ( ( char * ) VAR7 ) + 1 ;",
      "VAR8 = VAR2 - VAR5 ;",
      "if ( ( * VAR4 & 0x01 ) == 0 ) {",
      "if ( VAR8 < 4 || VAR8 > 16 ) {",
      "if ( VAR8 > sizeof VAR7 - VAR6 )",
      "VAR4 += VAR8 ;",
      "if ( VAR4 > VAR9 ) {",
      "if ( ( VAR10 ) ( VAR4 - VAR11 ) != VAR2 ) {",
      "printf ( \"\" ,",
      "VAR12 -> VAR13 = VAR14 ;",
      "return ( - 1 ) ;",
      "if ( VAR5 > VAR15 ) {",
      "printf ( \"\" ,",
      "VAR12 -> VAR13 = VAR14 ;",
      "return ( - 1 ) ;",
      "return ( VAR4 - VAR16 ) ;"
    ],
    "pair_id": 7814,
    "xfg_id": 11990,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "27",
      "30",
      "32",
      "36",
      "39",
      "41",
      "43",
      "45"
    ],
    "keyLine": "45",
    "edges-No": [
      [
        0,
        6
      ],
      [
        0,
        5
      ],
      [
        1,
        2
      ],
      [
        2,
        6
      ],
      [
        2,
        5
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        6
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        8
      ],
      [
        7,
        7
      ],
      [
        7,
        8
      ]
    ],
    "target": 1,
    "filePath": "119-12300-c/testcases/000/062/757/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(1)\n",
      "        data = RAND32();\n",
      "    if(1)\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0)\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( 1 )",
      "VAR1 = FUN1 ( ) ;",
      "if ( 1 )",
      "int VAR2 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 )",
      "VAR2 [ VAR1 ] = 1 ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "FUN2 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 149,
    "xfg_id": 5847,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "66",
      "67",
      "69",
      "70",
      "71"
    ],
    "keyLine": "66",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ]
    ],
    "target": 0,
    "filePath": "119-8900-c/testcases/000/067/139/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_44.c",
    "nodes-line": [
      "    char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    data = dataBuffer;\n",
      "    memset(data, 'A', 50-1); /* fill with 'A's */\n",
      "    data[50-1] = '\\0'; /* null terminate */\n",
      "    funcPtr(data);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "VAR2 = VAR1 ;",
      "memset ( VAR2 , '' , 50 - 1 ) ;",
      "VAR2 [ 50 - 1 ] = '' ;",
      "FUN2 ( VAR2 ) ;"
    ],
    "pair_id": 318,
    "xfg_id": 3797,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "162",
      "165",
      "166",
      "167",
      "168",
      "170",
      "177",
      "178",
      "179",
      "180",
      "181",
      "182"
    ],
    "keyLine": "165",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        2
      ],
      [
        5,
        6
      ],
      [
        5,
        9
      ],
      [
        6,
        7
      ],
      [
        7,
        8
      ],
      [
        7,
        9
      ],
      [
        7,
        10
      ],
      [
        7,
        11
      ],
      [
        8,
        8
      ]
    ],
    "target": 0,
    "filePath": "119-2800-c/testcases/000/232/128/CWE122_Heap_Based_Buffer_Overflow__CWE135_10.c",
    "nodes-line": [
      "    if(globalTrue)\n",
      "            char * dataGoodBuffer = (char *)malloc(50*sizeof(char));\n",
      "            if (dataGoodBuffer == NULL) {exit(-1);}\n",
      "            memset(dataGoodBuffer, 'A', 50-1);\n",
      "            dataGoodBuffer[50-1] = '\\0';\n",
      "            data = (void *)dataGoodBuffer;\n",
      "            size_t dataLen = strlen((char *)data);\n",
      "            void * dest = (void *)calloc(dataLen+1, 1);\n",
      "            if (dest == NULL) {exit(-1);}\n",
      "            (void)strcpy(dest, data);\n",
      "            printLine((char *)dest);\n",
      "            free(dest);\n"
    ],
    "nodes-line-sym": [
      "if ( VAR1 )",
      "char * VAR2 = ( char * ) malloc ( 50 * sizeof ( char ) ) ;",
      "if ( VAR2 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR2 , '' , 50 - 1 ) ;",
      "VAR2 [ 50 - 1 ] = '' ;",
      "VAR3 = ( void * ) VAR2 ;",
      "size_t VAR4 = strlen ( ( char * ) VAR3 ) ;",
      "void * VAR5 = ( void * ) calloc ( VAR4 + 1 , 1 ) ;",
      "if ( VAR5 == NULL ) { FUN1 ( - 1 ) ; }",
      "( void ) strcpy ( VAR5 , VAR3 ) ;",
      "FUN2 ( ( char * ) VAR5 ) ;",
      "free ( VAR5 ) ;"
    ],
    "pair_id": 688,
    "xfg_id": 3806,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "27",
      "31",
      "32",
      "37",
      "38",
      "43",
      "45",
      "47",
      "50",
      "51"
    ],
    "keyLine": "26",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        0,
        8
      ],
      [
        0,
        9
      ],
      [
        0,
        10
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        1
      ],
      [
        3,
        8
      ],
      [
        5,
        8
      ],
      [
        6,
        7
      ],
      [
        7,
        7
      ],
      [
        7,
        8
      ],
      [
        8,
        8
      ]
    ],
    "target": 1,
    "filePath": "119-1600-c/testcases/000/233/464/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_12.c",
    "nodes-line": [
      "    data = (char *)malloc(100*sizeof(char));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "        memset(data, 'A', 100-1); /* fill with 'A's */\n",
      "        data[100-1] = '\\0'; /* null terminate */\n",
      "        memset(data, 'A', 50-1); /* fill with 'A's */\n",
      "        data[50-1] = '\\0'; /* null terminate */\n",
      "        dataLen = strlen(data);\n",
      "        for (i = 0; i < dataLen; i++)\n",
      "            dest[i] = data[i];\n",
      "        printLine(data);\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR1 , '' , 100 - 1 ) ;",
      "VAR1 [ 100 - 1 ] = '' ;",
      "memset ( VAR1 , '' , 50 - 1 ) ;",
      "VAR1 [ 50 - 1 ] = '' ;",
      "VAR2 = strlen ( VAR1 ) ;",
      "for ( VAR3 = 0 ; VAR3 < VAR2 ; VAR3 ++ )",
      "VAR4 [ VAR3 ] = VAR1 [ VAR3 ] ;",
      "FUN2 ( VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 12721,
    "xfg_id": 7924,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "130",
      "131",
      "135",
      "90",
      "93",
      "98",
      "103",
      "106",
      "108",
      "109",
      "120",
      "122"
    ],
    "keyLine": "135",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        2
      ],
      [
        3,
        0
      ],
      [
        3,
        5
      ],
      [
        3,
        1
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        3,
        8
      ],
      [
        3,
        9
      ],
      [
        4,
        2
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        5,
        8
      ],
      [
        5,
        9
      ],
      [
        6,
        7
      ],
      [
        7,
        8
      ],
      [
        8,
        1
      ],
      [
        8,
        9
      ],
      [
        9,
        10
      ],
      [
        10,
        11
      ],
      [
        11,
        0
      ],
      [
        11,
        1
      ],
      [
        11,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-12600-c/testcases/000/001/295/iquery-bad.c",
    "nodes-line": [
      "fname = (char *)msg + HFIXEDSZ;\n",
      "alen = (char *)*cpp - fname;\n",
      "memcpy(anbuf, fname, alen);\n",
      "req_iquery(HEADER *hp, u_char **cpp, u_char *eom, int *buflenp, u_char *msg)\n",
      "char anbuf[2], *data, *fname;\n",
      "if ((n = dn_skipname(*cpp, eom)) < 0) {\n",
      "*cpp += n;\n",
      "*cpp += INT32SZ;/* ttl */\n",
      "*cpp += dlen;\n",
      "if (*cpp != eom) {\n",
      "switch (type) {\n",
      "  if (something == 0) \n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( char * ) VAR2 + VAR3 ;",
      "VAR4 = ( char * ) * VAR5 - VAR1 ;",
      "memcpy ( VAR6 , VAR1 , VAR4 ) ;",
      "FUN1 ( VAR7 * VAR8 , VAR9 * * VAR5 , VAR9 * VAR10 , int * VAR11 , VAR9 * VAR2 )",
      "char VAR6 [ 2 ] , * VAR12 , * VAR1 ;",
      "if ( ( VAR13 = FUN2 ( * VAR5 , VAR10 ) ) < 0 ) {",
      "* VAR5 += VAR13 ;",
      "* VAR5 += VAR14 ;",
      "* VAR5 += VAR15 ;",
      "if ( * VAR5 != VAR10 ) {",
      "switch ( VAR16 ) {",
      "if ( VAR17 == 0 )"
    ],
    "pair_id": 13184,
    "xfg_id": 7933,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "57",
      "61"
    ],
    "keyLine": "61",
    "edges-No": [
      [
        0,
        1
      ]
    ],
    "target": 1,
    "filePath": "119-13600-c/testcases/000/000/219/basic-00027-large.c",
    "nodes-line": [
      "  my_struct array_buf[5];\n",
      "  array_buf[4].buf[4105] = 'A';\n"
    ],
    "nodes-line-sym": [
      "my_struct VAR1 [ 5 ] ;",
      "VAR1 [ 4 ] . VAR2 [ 4105 ] = '' ;"
    ],
    "pair_id": 3343,
    "xfg_id": 9981,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "61",
      "62",
      "63",
      "65",
      "66",
      "68",
      "74",
      "75"
    ],
    "keyLine": "61",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-7400-c/testcases/000/073/763/CWE124_Buffer_Underwrite__char_alloca_cpy_34.c",
    "nodes-line": [
      "    char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    memset(dataBuffer, 'A', 100-1);\n",
      "    dataBuffer[100-1] = '\\0';\n",
      "    data = dataBuffer;\n",
      "    myUnion.unionFirst = data;\n",
      "        char * data = myUnion.unionSecond;\n",
      "            strcpy(data, source);\n",
      "            printLine(data);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "memset ( VAR1 , '' , 100 - 1 ) ;",
      "VAR1 [ 100 - 1 ] = '' ;",
      "VAR2 = VAR1 ;",
      "VAR3 . VAR4 = VAR2 ;",
      "char * VAR2 = VAR3 . VAR5 ;",
      "strcpy ( VAR2 , VAR6 ) ;",
      "FUN2 ( VAR2 ) ;"
    ],
    "pair_id": 4606,
    "xfg_id": 5903,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "32",
      "35",
      "38",
      "40"
    ],
    "keyLine": "40",
    "edges-No": [
      [
        0,
        4
      ],
      [
        0,
        3
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-6300-c/testcases/000/075/696/CWE126_Buffer_Overread__CWE129_fscanf_03.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(5==5)\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0)\n",
      "                printIntLine(buffer[data]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( 5 == 5 )",
      "int VAR2 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 )",
      "FUN1 ( VAR2 [ VAR1 ] ) ;"
    ],
    "pair_id": 4286,
    "xfg_id": 7957,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "61",
      "62",
      "65",
      "68",
      "71",
      "73",
      "75"
    ],
    "keyLine": "75",
    "edges-No": [
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        1,
        2
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ],
      [
        3,
        5
      ],
      [
        3,
        4
      ],
      [
        4,
        6
      ],
      [
        5,
        6
      ]
    ],
    "target": 0,
    "filePath": "119-5000-c/testcases/000/077/657/CWE127_Buffer_Underread__CWE839_negative_16.c",
    "nodes-line": [
      "    data = -1;\n",
      "    while(1)\n",
      "        data = -5;\n",
      "    while(1)\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                printIntLine(buffer[data]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "while ( 1 )",
      "VAR1 = - 5 ;",
      "while ( 1 )",
      "int VAR2 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "FUN1 ( VAR2 [ VAR1 ] ) ;"
    ],
    "pair_id": 10502,
    "xfg_id": 3864,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "30",
      "31",
      "35",
      "42",
      "47",
      "48",
      "49"
    ],
    "keyLine": "49",
    "edges-No": [
      [
        0,
        6
      ],
      [
        0,
        4
      ],
      [
        1,
        2
      ],
      [
        2,
        6
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-3300-c/testcases/000/231/416/CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    switch(6)\n",
      "        data = (void *)WIDE_STRING;\n",
      "    switch(7)\n",
      "        size_t dataLen = strlen((char *)data);\n",
      "        void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));\n",
      "        (void)wcscpy(dest, data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "switch ( 6 )",
      "VAR1 = ( void * ) VAR2 ;",
      "switch ( 7 )",
      "size_t VAR3 = strlen ( ( char * ) VAR1 ) ;",
      "void * VAR4 = ( void * ) FUN1 ( ( VAR3 + 1 ) * sizeof ( wchar_t ) ) ;",
      "( void ) wcscpy ( VAR4 , VAR1 ) ;"
    ],
    "pair_id": 4552,
    "xfg_id": 5916,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "27",
      "29",
      "30",
      "32",
      "33",
      "37",
      "38"
    ],
    "keyLine": "26",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        4
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ]
    ],
    "target": 1,
    "filePath": "119-8900-c/testcases/000/067/084/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_31.c",
    "nodes-line": [
      "    char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    data = dataBuffer;\n",
      "    memset(data, 'A', 100-1); /* fill with 'A's */\n",
      "    data[100-1] = '\\0'; /* null terminate */\n",
      "        char * dataCopy = data;\n",
      "        char * data = dataCopy;\n",
      "            strcat(dest, data);\n",
      "            printLine(data);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "VAR2 = VAR1 ;",
      "memset ( VAR2 , '' , 100 - 1 ) ;",
      "VAR2 [ 100 - 1 ] = '' ;",
      "char * VAR3 = VAR2 ;",
      "char * VAR2 = VAR3 ;",
      "strcat ( VAR4 , VAR2 ) ;",
      "FUN2 ( VAR2 ) ;"
    ],
    "pair_id": 8870,
    "xfg_id": 10015,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "32",
      "36",
      "39",
      "41",
      "45",
      "47",
      "49",
      "51"
    ],
    "keyLine": "51",
    "edges-No": [
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        5
      ],
      [
        2,
        8
      ],
      [
        2,
        4
      ],
      [
        2,
        6
      ],
      [
        3,
        4
      ],
      [
        3,
        3
      ],
      [
        4,
        8
      ],
      [
        5,
        7
      ],
      [
        5,
        6
      ],
      [
        6,
        8
      ],
      [
        7,
        7
      ],
      [
        7,
        8
      ]
    ],
    "target": 1,
    "filePath": "119-2600-c/testcases/000/232/250/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_02.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(1)\n",
      "            int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "            for (i = 0; i < 10; i++)\n",
      "                buffer[i] = 0;\n",
      "            if (data >= 0)\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( 1 )",
      "int * VAR2 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "VAR2 [ VAR3 ] = 0 ;",
      "if ( VAR1 >= 0 )",
      "VAR2 [ VAR1 ] = 1 ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "FUN1 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 4236,
    "xfg_id": 10019,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "48",
      "51"
    ],
    "keyLine": "48",
    "edges-No": [
      [
        0,
        1
      ]
    ],
    "target": 1,
    "filePath": "119-11600-c/testcases/000/063/603/CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_12.c",
    "nodes-line": [
      "        wchar_t source[10+1] = SRC_STRING;\n",
      "        wcsncpy(data, source, wcslen(source) + 1);\n"
    ],
    "nodes-line-sym": [
      "wchar_t VAR1 [ 10 + 1 ] = VAR2 ;",
      "wcsncpy ( VAR3 , VAR1 , wcslen ( VAR1 ) + 1 ) ;"
    ],
    "pair_id": 306,
    "xfg_id": 12072,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "59",
      "61",
      "64",
      "65",
      "66",
      "67",
      "68",
      "69"
    ],
    "keyLine": "64",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        1,
        5
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        4,
        4
      ]
    ],
    "target": 0,
    "filePath": "119-2700-c/testcases/000/232/157/CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c",
    "nodes-line": [
      "void CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_goodB2GSink(void * dataArray[])\n",
      "    void * data = dataArray[2];\n",
      "        size_t dataLen = wcslen((wchar_t *)data);\n",
      "        void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));\n",
      "        if (dest == NULL) {exit(-1);}\n",
      "        (void)wcscpy(dest, data);\n",
      "        printWLine((wchar_t *)dest);\n",
      "        free(dest);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( void * VAR1 [ ] )",
      "void * VAR2 = VAR1 [ 2 ] ;",
      "size_t VAR3 = wcslen ( ( wchar_t * ) VAR2 ) ;",
      "void * VAR4 = ( void * ) calloc ( VAR3 + 1 , sizeof ( wchar_t ) ) ;",
      "if ( VAR4 == NULL ) { FUN2 ( - 1 ) ; }",
      "( void ) wcscpy ( VAR4 , VAR2 ) ;",
      "FUN3 ( ( wchar_t * ) VAR4 ) ;",
      "free ( VAR4 ) ;"
    ],
    "pair_id": 410,
    "xfg_id": 10026,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "31",
      "32",
      "35",
      "40",
      "42",
      "45",
      "47"
    ],
    "keyLine": "47",
    "edges-No": [
      [
        0,
        6
      ],
      [
        1,
        2
      ],
      [
        2,
        6
      ],
      [
        3,
        4
      ],
      [
        3,
        6
      ],
      [
        4,
        5
      ],
      [
        5,
        5
      ],
      [
        5,
        6
      ],
      [
        6,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-2300-c/testcases/000/232/630/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_16.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    while(1)\n",
      "        data = (wchar_t *)malloc(10*sizeof(wchar_t));\n",
      "        wchar_t source[10+1] = SRC_STRING;\n",
      "        sourceLen = wcslen(source);\n",
      "        for (i = 0; i < sourceLen + 1; i++)\n",
      "            data[i] = source[i];\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "while ( 1 )",
      "VAR1 = ( wchar_t * ) malloc ( 10 * sizeof ( wchar_t ) ) ;",
      "wchar_t VAR2 [ 10 + 1 ] = VAR3 ;",
      "VAR4 = wcslen ( VAR2 ) ;",
      "for ( VAR5 = 0 ; VAR5 < VAR4 + 1 ; VAR5 ++ )",
      "VAR1 [ VAR5 ] = VAR2 [ VAR5 ] ;"
    ],
    "pair_id": 9132,
    "xfg_id": 5932,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "30",
      "33",
      "39",
      "43",
      "47"
    ],
    "keyLine": "47",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        4
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/068/395/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_char_memmove_12.cpp",
    "nodes-line": [
      "    if(globalReturnsTrueOrFalse())\n",
      "        data = new char[50];\n",
      "        data = new char[100];\n",
      "        char source[100];\n",
      "        memmove(data, source, 100*sizeof(char));\n"
    ],
    "nodes-line-sym": [
      "if ( FUN1 ( ) )",
      "VAR1 = new char [ 50 ] ;",
      "VAR1 = new char [ 100 ] ;",
      "char VAR2 [ 100 ] ;",
      "memmove ( VAR1 , VAR2 , 100 * sizeof ( char ) ) ;"
    ],
    "pair_id": 13808,
    "xfg_id": 8004,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "27",
      "31",
      "32",
      "36",
      "37"
    ],
    "keyLine": "31",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        0
      ],
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        2
      ]
    ],
    "target": 1,
    "filePath": "119-1000-c/testcases/000/234/187/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_17.c",
    "nodes-line": [
      "    for(i = 0; i < 1; i++)\n",
      "        data = (int64_t *)malloc(sizeof(data));\n",
      "        if (data == NULL) {exit(-1);}\n",
      "    printLongLongLine(*data);\n",
      "    free(data);\n"
    ],
    "nodes-line-sym": [
      "for ( VAR1 = 0 ; VAR1 < 1 ; VAR1 ++ )",
      "VAR2 = ( VAR3 * ) malloc ( sizeof ( VAR2 ) ) ;",
      "if ( VAR2 == NULL ) { FUN1 ( - 1 ) ; }",
      "FUN2 ( * VAR2 ) ;",
      "free ( VAR2 ) ;"
    ],
    "pair_id": 4748,
    "xfg_id": 10055,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "25",
      "28",
      "29",
      "38",
      "40",
      "41"
    ],
    "keyLine": "28",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        2
      ],
      [
        3,
        4
      ],
      [
        3,
        3
      ]
    ],
    "target": 1,
    "filePath": "119-2800-c/testcases/000/231/994/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c",
    "nodes-line": [
      "    while(1)\n",
      "        data = (int *)malloc(10);\n",
      "        if (data == NULL) {exit(-1);}\n",
      "            data[i] = source[i];\n",
      "        printIntLine(data[0]);\n",
      "        free(data);\n"
    ],
    "nodes-line-sym": [
      "while ( 1 )",
      "VAR1 = ( int * ) malloc ( 10 ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "VAR1 [ VAR2 ] = VAR3 [ VAR2 ] ;",
      "FUN2 ( VAR1 [ 0 ] ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 7475,
    "xfg_id": 10062,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "136",
      "140",
      "142",
      "145",
      "149",
      "164",
      "166",
      "170"
    ],
    "keyLine": "142",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        5,
        7
      ],
      [
        5,
        6
      ]
    ],
    "target": 0,
    "filePath": "119-6400-c/testcases/000/075/660/CWE126_Buffer_Overread__CWE129_fgets_15.c",
    "nodes-line": [
      "    switch(6)\n",
      "        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n",
      "        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n",
      "            data = atoi(inputBuffer);\n",
      "            printLine(\"fgets() failed.\");\n",
      "        if (data >= 0 && data < (10))\n",
      "            printIntLine(buffer[data]);\n",
      "            printLine(\"ERROR: Array index is out-of-bounds\");\n"
    ],
    "nodes-line-sym": [
      "switch ( 6 )",
      "char VAR1 [ VAR2 ] = \"\" ;",
      "if ( fgets ( VAR1 , VAR2 , stdin ) != NULL )",
      "VAR3 = atoi ( VAR1 ) ;",
      "FUN1 ( \"\" ) ;",
      "if ( VAR3 >= 0 && VAR3 < ( 10 ) )",
      "FUN2 ( VAR4 [ VAR3 ] ) ;",
      "FUN1 ( \"\" ) ;"
    ],
    "pair_id": 9809,
    "xfg_id": 3924,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "100",
      "102",
      "105",
      "113",
      "114",
      "118",
      "120",
      "124"
    ],
    "keyLine": "105",
    "edges-No": [
      [
        0,
        2
      ],
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        6
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-5500-c/testcases/000/077/118/CWE127_Buffer_Underread__CWE839_fgets_31.c",
    "nodes-line": [
      "        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n",
      "        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n",
      "            data = atoi(inputBuffer);\n",
      "        int dataCopy = data;\n",
      "        int data = dataCopy;\n",
      "            if (data >= 0 && data < (10))\n",
      "                printIntLine(buffer[data]);\n",
      "                printLine(\"ERROR: Array index is out-of-bounds\");\n"
    ],
    "nodes-line-sym": [
      "char VAR1 [ VAR2 ] = \"\" ;",
      "if ( fgets ( VAR1 , VAR2 , stdin ) != NULL )",
      "VAR3 = atoi ( VAR1 ) ;",
      "int VAR4 = VAR3 ;",
      "int VAR3 = VAR4 ;",
      "if ( VAR3 >= 0 && VAR3 < ( 10 ) )",
      "FUN1 ( VAR5 [ VAR3 ] ) ;",
      "FUN2 ( \"\" ) ;"
    ],
    "pair_id": 6020,
    "xfg_id": 12123,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "36",
      "39",
      "40",
      "41",
      "43",
      "45",
      "46",
      "47",
      "48"
    ],
    "keyLine": "39",
    "edges-No": [
      [
        0,
        0
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        0,
        7
      ],
      [
        0,
        8
      ],
      [
        1,
        8
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        6
      ],
      [
        1,
        7
      ],
      [
        2,
        2
      ],
      [
        3,
        8
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ]
    ],
    "target": 1,
    "filePath": "119-2800-c/testcases/000/231/936/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_17.c",
    "nodes-line": [
      "    for(j = 0; j < 1; j++)\n",
      "            charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));\n",
      "            if (structCharVoid == NULL) {exit(-1);}\n",
      "            structCharVoid->voidSecond = (void *)SRC_STR;\n",
      "            printLine((char *)structCharVoid->voidSecond);\n",
      "            memmove(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));\n",
      "            structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\\0'; /* null terminate the string */\n",
      "            printLine((char *)structCharVoid->charFirst);\n",
      "            printLine((char *)structCharVoid->voidSecond);\n"
    ],
    "nodes-line-sym": [
      "for ( VAR1 = 0 ; VAR1 < 1 ; VAR1 ++ )",
      "VAR2 * VAR3 = ( VAR2 * ) malloc ( sizeof ( VAR2 ) ) ;",
      "if ( VAR3 == NULL ) { FUN1 ( - 1 ) ; }",
      "VAR3 -> VAR4 = ( void * ) VAR5 ;",
      "FUN2 ( ( char * ) VAR3 -> VAR4 ) ;",
      "memmove ( VAR3 -> VAR6 , VAR5 , sizeof ( * VAR3 ) ) ;",
      "VAR3 -> VAR6 [ ( sizeof ( VAR3 -> VAR6 ) / sizeof ( char ) ) - 1 ] = '' ;",
      "FUN2 ( ( char * ) VAR3 -> VAR6 ) ;",
      "FUN2 ( ( char * ) VAR3 -> VAR4 ) ;"
    ],
    "pair_id": 7380,
    "xfg_id": 12126,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "30",
      "35",
      "38",
      "40",
      "44",
      "46",
      "48",
      "50"
    ],
    "keyLine": "50",
    "edges-No": [
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        1,
        7
      ],
      [
        1,
        3
      ],
      [
        1,
        5
      ],
      [
        2,
        3
      ],
      [
        2,
        2
      ],
      [
        3,
        7
      ],
      [
        4,
        6
      ],
      [
        4,
        5
      ],
      [
        5,
        7
      ],
      [
        6,
        6
      ],
      [
        6,
        7
      ]
    ],
    "target": 1,
    "filePath": "119-2600-c/testcases/000/232/308/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_18.c",
    "nodes-line": [
      "    data = 10;\n",
      "        int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "        for (i = 0; i < 10; i++)\n",
      "            buffer[i] = 0;\n",
      "        if (data >= 0)\n",
      "            buffer[data] = 1;\n",
      "            for(i = 0; i < 10; i++)\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = 10 ;",
      "int * VAR2 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "VAR2 [ VAR3 ] = 0 ;",
      "if ( VAR1 >= 0 )",
      "VAR2 [ VAR1 ] = 1 ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "FUN1 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 4369,
    "xfg_id": 5984,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "74",
      "75",
      "78",
      "80",
      "84",
      "92",
      "94",
      "98"
    ],
    "keyLine": "94",
    "edges-No": [
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        1,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        5
      ],
      [
        2,
        6
      ],
      [
        3,
        3
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        7
      ],
      [
        4,
        6
      ],
      [
        5,
        6
      ],
      [
        6,
        7
      ]
    ],
    "target": 0,
    "filePath": "119-2500-c/testcases/000/232/391/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c",
    "nodes-line": [
      "    data = -1;\n",
      "    for(i = 0; i < 1; i++)\n",
      "        data = RAND32();\n",
      "    for(k = 0; k < 1; k++)\n",
      "            int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "for ( VAR2 = 0 ; VAR2 < 1 ; VAR2 ++ )",
      "VAR1 = FUN1 ( ) ;",
      "for ( VAR3 = 0 ; VAR3 < 1 ; VAR3 ++ )",
      "int * VAR4 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR4 [ VAR1 ] = 1 ;",
      "FUN2 ( VAR4 [ VAR2 ] ) ;"
    ],
    "pair_id": 6901,
    "xfg_id": 3941,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "27",
      "30",
      "31",
      "32",
      "33",
      "35",
      "43"
    ],
    "keyLine": "30",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        2
      ],
      [
        2,
        2
      ],
      [
        5,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-500-c/testcases/000/234/809/CWE127_Buffer_Underread__malloc_char_cpy_09.c",
    "nodes-line": [
      "    if(GLOBAL_CONST_TRUE)\n",
      "            char * dataBuffer = (char *)malloc(100*sizeof(char));\n",
      "            if (dataBuffer == NULL) {exit(-1);}\n",
      "            memset(dataBuffer, 'A', 100-1);\n",
      "            dataBuffer[100-1] = '\\0';\n",
      "            data = dataBuffer - 8;\n",
      "        strcpy(dest, data);\n"
    ],
    "nodes-line-sym": [
      "if ( VAR1 )",
      "char * VAR2 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR2 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR2 , '' , 100 - 1 ) ;",
      "VAR2 [ 100 - 1 ] = '' ;",
      "VAR3 = VAR2 - 8 ;",
      "strcpy ( VAR4 , VAR3 ) ;"
    ],
    "pair_id": 2157,
    "xfg_id": 3951,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "40",
      "41",
      "42",
      "44",
      "49",
      "50",
      "51"
    ],
    "keyLine": "40",
    "edges-No": [
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        1
      ],
      [
        2,
        3
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-2400-c/testcases/000/232/572/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_34.c",
    "nodes-line": [
      "    data = (char *)malloc(10*sizeof(char));\n",
      "    if (data == NULL) {exit(-1);}\n",
      "    myUnion.unionFirst = data;\n",
      "        char * data = myUnion.unionSecond;\n",
      "            strncpy(data, source, strlen(source) + 1);\n",
      "            printLine(data);\n",
      "            free(data);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = ( char * ) malloc ( 10 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "VAR2 . VAR3 = VAR1 ;",
      "char * VAR1 = VAR2 . VAR4 ;",
      "strncpy ( VAR1 , VAR5 , strlen ( VAR5 ) + 1 ) ;",
      "FUN2 ( VAR1 ) ;",
      "free ( VAR1 ) ;"
    ],
    "pair_id": 13284,
    "xfg_id": 12147,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "34",
      "35",
      "38",
      "41",
      "44"
    ],
    "keyLine": "44",
    "edges-No": [
      [
        0,
        4
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/067/953/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_memmove_02.cpp",
    "nodes-line": [
      "    data = NULL;\n",
      "    if(1)\n",
      "        data = new char[10];\n",
      "        char source[10+1] = SRC_STRING;\n",
      "        memmove(data, source, (strlen(source) + 1) * sizeof(char));\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "if ( 1 )",
      "VAR1 = new char [ 10 ] ;",
      "char VAR2 [ 10 + 1 ] = VAR3 ;",
      "memmove ( VAR1 , VAR2 , ( strlen ( VAR2 ) + 1 ) * sizeof ( char ) ) ;"
    ],
    "pair_id": 4005,
    "xfg_id": 8060,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "27",
      "30",
      "31",
      "32",
      "33",
      "35",
      "43"
    ],
    "keyLine": "30",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        2
      ],
      [
        2,
        2
      ],
      [
        5,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-500-c/testcases/000/234/875/CWE127_Buffer_Underread__malloc_char_memcpy_09.c",
    "nodes-line": [
      "    if(GLOBAL_CONST_TRUE)\n",
      "            char * dataBuffer = (char *)malloc(100*sizeof(char));\n",
      "            if (dataBuffer == NULL) {exit(-1);}\n",
      "            memset(dataBuffer, 'A', 100-1);\n",
      "            dataBuffer[100-1] = '\\0';\n",
      "            data = dataBuffer - 8;\n",
      "        memcpy(dest, data, 100*sizeof(char));\n"
    ],
    "nodes-line-sym": [
      "if ( VAR1 )",
      "char * VAR2 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR2 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR2 , '' , 100 - 1 ) ;",
      "VAR2 [ 100 - 1 ] = '' ;",
      "VAR3 = VAR2 - 8 ;",
      "memcpy ( VAR4 , VAR3 , 100 * sizeof ( char ) ) ;"
    ],
    "pair_id": 1235,
    "xfg_id": 12156,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "27",
      "30",
      "31",
      "32",
      "33",
      "35",
      "44"
    ],
    "keyLine": "30",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        0,
        5
      ],
      [
        0,
        1
      ],
      [
        0,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        5
      ],
      [
        1,
        2
      ],
      [
        2,
        2
      ],
      [
        5,
        6
      ]
    ],
    "target": 1,
    "filePath": "119-400-c/testcases/000/234/915/CWE127_Buffer_Underread__malloc_char_memmove_16.c",
    "nodes-line": [
      "    while(1)\n",
      "            char * dataBuffer = (char *)malloc(100*sizeof(char));\n",
      "            if (dataBuffer == NULL) {exit(-1);}\n",
      "            memset(dataBuffer, 'A', 100-1);\n",
      "            dataBuffer[100-1] = '\\0';\n",
      "            data = dataBuffer - 8;\n",
      "        memmove(dest, data, 100*sizeof(char));\n"
    ],
    "nodes-line-sym": [
      "while ( 1 )",
      "char * VAR1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ;",
      "if ( VAR1 == NULL ) { FUN1 ( - 1 ) ; }",
      "memset ( VAR1 , '' , 100 - 1 ) ;",
      "VAR1 [ 100 - 1 ] = '' ;",
      "VAR2 = VAR1 - 8 ;",
      "memmove ( VAR3 , VAR2 , 100 * sizeof ( char ) ) ;"
    ],
    "pair_id": 13172,
    "xfg_id": 6017,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "53",
      "56",
      "57",
      "60",
      "61"
    ],
    "keyLine": "60",
    "edges-No": [
      [
        0,
        3
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        4,
        2
      ],
      [
        4,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-13000-c/testcases/000/000/897/basic-00196-min.c",
    "nodes-line": [
      "  char buf[10];\n",
      "  loop_counter = 0;\n",
      "  while(++loop_counter)\n",
      "    buf[loop_counter] = 'A';\n",
      "    if (loop_counter >= 10) break;\n"
    ],
    "nodes-line-sym": [
      "char VAR1 [ 10 ] ;",
      "VAR2 = 0 ;",
      "while ( ++ VAR2 )",
      "VAR1 [ VAR2 ] = '' ;",
      "if ( VAR2 >= 10 ) break ;"
    ],
    "pair_id": 11001,
    "xfg_id": 6018,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "60",
      "61",
      "63",
      "64",
      "65",
      "67",
      "71",
      "73"
    ],
    "keyLine": "60",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        1,
        2
      ],
      [
        4,
        5
      ],
      [
        5,
        7
      ],
      [
        5,
        6
      ]
    ],
    "target": 0,
    "filePath": "119-10100-c/testcases/000/065/583/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_34.c",
    "nodes-line": [
      "    char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n",
      "    data = dataBuffer;\n",
      "    memset(data, 'A', 50-1); /* fill with 'A's */\n",
      "    data[50-1] = '\\0'; /* null terminate */\n",
      "    myUnion.unionFirst = data;\n",
      "        char * data = myUnion.unionSecond;\n",
      "            memcpy(dest, data, strlen(data)*sizeof(char));\n",
      "            printLine(data);\n"
    ],
    "nodes-line-sym": [
      "char * VAR1 = ( char * ) FUN1 ( 100 * sizeof ( char ) ) ;",
      "VAR2 = VAR1 ;",
      "memset ( VAR2 , '' , 50 - 1 ) ;",
      "VAR2 [ 50 - 1 ] = '' ;",
      "VAR3 . VAR4 = VAR2 ;",
      "char * VAR2 = VAR3 . VAR5 ;",
      "memcpy ( VAR6 , VAR2 , strlen ( VAR2 ) * sizeof ( char ) ) ;",
      "FUN2 ( VAR2 ) ;"
    ],
    "pair_id": 9748,
    "xfg_id": 8086,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "30",
      "31",
      "34",
      "36",
      "40",
      "41",
      "42",
      "43"
    ],
    "keyLine": "40",
    "edges-No": [
      [
        0,
        4
      ],
      [
        0,
        6
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        2,
        6
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        3,
        6
      ],
      [
        3,
        7
      ],
      [
        4,
        5
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ]
    ],
    "target": 1,
    "filePath": "119-3300-c/testcases/000/231/411/CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    if(globalTrue)\n",
      "        data = (void *)WIDE_STRING;\n",
      "    if(globalTrue)\n",
      "            size_t dataLen = strlen((char *)data);\n",
      "            void * dest = (void *)ALLOCA((dataLen+1) * sizeof(wchar_t));\n",
      "            (void)wcscpy(dest, data);\n",
      "            printLine((char *)dest);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "if ( VAR2 )",
      "VAR1 = ( void * ) VAR3 ;",
      "if ( VAR2 )",
      "size_t VAR4 = strlen ( ( char * ) VAR1 ) ;",
      "void * VAR5 = ( void * ) FUN1 ( ( VAR4 + 1 ) * sizeof ( wchar_t ) ) ;",
      "( void ) wcscpy ( VAR5 , VAR1 ) ;",
      "FUN2 ( ( char * ) VAR5 ) ;"
    ],
    "pair_id": 259,
    "xfg_id": 10135,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "154",
      "155",
      "164",
      "165",
      "169",
      "176",
      "177",
      "185",
      "191",
      "192",
      "199",
      "201",
      "214",
      "223",
      "225",
      "227",
      "231"
    ],
    "keyLine": "227",
    "edges-No": [
      [
        0,
        14
      ],
      [
        0,
        15
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        6
      ],
      [
        3,
        10
      ],
      [
        3,
        8
      ],
      [
        4,
        5
      ],
      [
        4,
        6
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        5,
        8
      ],
      [
        6,
        7
      ],
      [
        7,
        9
      ],
      [
        7,
        8
      ],
      [
        8,
        9
      ],
      [
        9,
        11
      ],
      [
        9,
        10
      ],
      [
        10,
        14
      ],
      [
        10,
        15
      ],
      [
        11,
        4
      ],
      [
        12,
        14
      ],
      [
        12,
        13
      ],
      [
        13,
        15
      ],
      [
        13,
        16
      ],
      [
        14,
        15
      ],
      [
        15,
        16
      ]
    ],
    "target": 0,
    "filePath": "119-7500-c/testcases/000/073/557/CWE124_Buffer_Underwrite__CWE839_connect_socket_08.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(staticReturnsTrue())\n",
      "            SOCKET connectSocket = INVALID_SOCKET;\n",
      "            char inputBuffer[CHAR_ARRAY_SIZE];\n",
      "                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "                if (connectSocket == INVALID_SOCKET)\n",
      "                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n",
      "                if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "                data = atoi(inputBuffer);\n",
      "            while (0);\n",
      "    if(staticReturnsFalse())\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0 && data < (10))\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( FUN1 ( ) )",
      "SOCKET VAR2 = VAR3 ;",
      "char VAR4 [ VAR5 ] ;",
      "if ( FUN2 ( FUN3 ( 2 , 2 ) , & VAR6 ) != VAR7 )",
      "VAR2 = socket ( VAR8 , VAR9 , VAR10 ) ;",
      "if ( VAR2 == VAR3 )",
      "if ( connect ( VAR2 , ( struct VAR11 * ) & VAR12 , sizeof ( VAR12 ) ) == VAR13 )",
      "VAR14 = recv ( VAR2 , VAR4 , VAR5 - 1 , 0 ) ;",
      "if ( VAR14 == VAR13 || VAR14 == 0 )",
      "VAR1 = atoi ( VAR4 ) ;",
      "while ( 0 ) ;",
      "if ( FUN4 ( ) )",
      "int VAR15 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 && VAR1 < ( 10 ) )",
      "VAR15 [ VAR1 ] = 1 ;",
      "FUN5 ( VAR15 [ VAR16 ] ) ;"
    ],
    "pair_id": 4144,
    "xfg_id": 10140,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "53",
      "55",
      "57",
      "60"
    ],
    "keyLine": "60",
    "edges-No": [
      [
        0,
        3
      ],
      [
        1,
        2
      ],
      [
        2,
        3
      ]
    ],
    "target": 0,
    "filePath": "119-13500-c/testcases/000/000/350/basic-00059-ok.c",
    "nodes-line": [
      "  char buf[10];\n",
      "  flag = 1;\n",
      "  if (flag)\n",
      "    buf[9] = 'A';\n"
    ],
    "nodes-line-sym": [
      "char VAR1 [ 10 ] ;",
      "VAR2 = 1 ;",
      "if ( VAR2 )",
      "VAR1 [ 9 ] = '' ;"
    ],
    "pair_id": 253,
    "xfg_id": 8101,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "25",
      "27",
      "31",
      "34",
      "36",
      "40",
      "42",
      "44",
      "46"
    ],
    "keyLine": "46",
    "edges-No": [
      [
        0,
        5
      ],
      [
        0,
        6
      ],
      [
        1,
        3
      ],
      [
        1,
        5
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        2,
        6
      ],
      [
        2,
        8
      ],
      [
        3,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        8
      ],
      [
        7,
        7
      ],
      [
        7,
        8
      ]
    ],
    "target": 1,
    "filePath": "119-2600-c/testcases/000/232/352/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22b.c",
    "nodes-line": [
      "void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_badSink(int data)\n",
      "    if(CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22_badGlobal)\n",
      "            int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "            for (i = 0; i < 10; i++)\n",
      "                buffer[i] = 0;\n",
      "            if (data >= 0)\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( int VAR1 )",
      "if ( VAR2 )",
      "int * VAR3 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "for ( VAR4 = 0 ; VAR4 < 10 ; VAR4 ++ )",
      "VAR3 [ VAR4 ] = 0 ;",
      "if ( VAR1 >= 0 )",
      "VAR3 [ VAR1 ] = 1 ;",
      "for ( VAR4 = 0 ; VAR4 < 10 ; VAR4 ++ )",
      "FUN2 ( VAR3 [ VAR4 ] ) ;"
    ],
    "pair_id": 195,
    "xfg_id": 6066,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "28",
      "30",
      "31",
      "33",
      "36",
      "38"
    ],
    "keyLine": "38",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        2,
        5
      ],
      [
        3,
        5
      ],
      [
        4,
        5
      ]
    ],
    "target": 1,
    "filePath": "119-6300-c/testcases/000/075/762/CWE126_Buffer_Overread__CWE129_large_31.c",
    "nodes-line": [
      "    data = 10;\n",
      "        int dataCopy = data;\n",
      "        int data = dataCopy;\n",
      "            int buffer[10] = { 0 };\n",
      "            if (data >= 0)\n",
      "                printIntLine(buffer[data]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = 10 ;",
      "int VAR2 = VAR1 ;",
      "int VAR1 = VAR2 ;",
      "int VAR3 [ 10 ] = { 0 } ;",
      "if ( VAR1 >= 0 )",
      "FUN1 ( VAR3 [ VAR1 ] ) ;"
    ],
    "pair_id": 3414,
    "xfg_id": 6067,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "27",
      "34",
      "36",
      "47"
    ],
    "keyLine": "47",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/231/576/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_33.cpp",
    "nodes-line": [
      "    twoIntsStruct * data;\n",
      "    twoIntsStruct * &dataRef = data;\n",
      "        twoIntsStruct * data = dataRef;\n",
      "            twoIntsStruct source[100];\n",
      "            memmove(data, source, 100*sizeof(twoIntsStruct));\n"
    ],
    "nodes-line-sym": [
      "VAR1 * VAR2 ;",
      "VAR1 * & VAR3 = VAR2 ;",
      "VAR1 * VAR2 = VAR3 ;",
      "twoIntsStruct VAR4 [ 100 ] ;",
      "memmove ( VAR2 , VAR4 , 100 * sizeof ( VAR1 ) ) ;"
    ],
    "pair_id": 10936,
    "xfg_id": 4042,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "28",
      "31",
      "34",
      "37",
      "39",
      "43",
      "45",
      "47",
      "49"
    ],
    "keyLine": "49",
    "edges-No": [
      [
        0,
        1
      ],
      [
        1,
        5
      ],
      [
        1,
        6
      ],
      [
        2,
        8
      ],
      [
        2,
        4
      ],
      [
        2,
        6
      ],
      [
        3,
        3
      ],
      [
        3,
        4
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        5,
        7
      ],
      [
        6,
        8
      ],
      [
        7,
        8
      ],
      [
        7,
        7
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/232/415/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_73b.cpp",
    "nodes-line": [
      "void badSink(list<int> dataList)\n",
      "    int data = dataList.back();\n",
      "        int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "        for (i = 0; i < 10; i++)\n",
      "            buffer[i] = 0;\n",
      "        if (data >= 0)\n",
      "            buffer[data] = 1;\n",
      "            for(i = 0; i < 10; i++)\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "void FUN1 ( VAR1 < int > VAR2 )",
      "int VAR3 = VAR2 . FUN2 ( ) ;",
      "int * VAR4 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "for ( VAR5 = 0 ; VAR5 < 10 ; VAR5 ++ )",
      "VAR4 [ VAR5 ] = 0 ;",
      "if ( VAR3 >= 0 )",
      "VAR4 [ VAR3 ] = 1 ;",
      "for ( VAR5 = 0 ; VAR5 < 10 ; VAR5 ++ )",
      "FUN3 ( VAR4 [ VAR5 ] ) ;"
    ],
    "pair_id": 2333,
    "xfg_id": 10193,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "53",
      "56",
      "57",
      "60",
      "61",
      "62"
    ],
    "keyLine": "60",
    "edges-No": [
      [
        0,
        3
      ],
      [
        1,
        4
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        2,
        5
      ],
      [
        4,
        4
      ],
      [
        4,
        5
      ],
      [
        5,
        2
      ],
      [
        5,
        5
      ]
    ],
    "target": 1,
    "filePath": "119-13400-c/testcases/000/000/444/basic-00083-med.c",
    "nodes-line": [
      "  char buf[10];\n",
      "  loop_counter = 0;\n",
      "  while(1)\n",
      "    buf[17] = 'A';\n",
      "    loop_counter++;\n",
      "    if (loop_counter > 17) break;\n"
    ],
    "nodes-line-sym": [
      "char VAR1 [ 10 ] ;",
      "VAR2 = 0 ;",
      "while ( 1 )",
      "VAR1 [ 17 ] = '' ;",
      "VAR2 ++ ;",
      "if ( VAR2 > 17 ) break ;"
    ],
    "pair_id": 10168,
    "xfg_id": 4054,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "26",
      "32",
      "36",
      "45",
      "47",
      "51"
    ],
    "keyLine": "47",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        4
      ],
      [
        1,
        2
      ],
      [
        1,
        3
      ],
      [
        2,
        5
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ],
      [
        4,
        5
      ]
    ],
    "target": 1,
    "filePath": "119-2600-c/testcases/000/232/259/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_11.c",
    "nodes-line": [
      "    data = -1;\n",
      "    if(globalReturnsTrue())\n",
      "            int * buffer = (int *)malloc(10 * sizeof(int));\n",
      "            if (data >= 0)\n",
      "                buffer[data] = 1;\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( FUN1 ( ) )",
      "int * VAR2 = ( int * ) malloc ( 10 * sizeof ( int ) ) ;",
      "if ( VAR1 >= 0 )",
      "VAR2 [ VAR1 ] = 1 ;",
      "FUN2 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 8325,
    "xfg_id": 10205,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "32",
      "33",
      "36",
      "40",
      "43"
    ],
    "keyLine": "43",
    "edges-No": [
      [
        0,
        4
      ],
      [
        1,
        1
      ],
      [
        1,
        2
      ],
      [
        2,
        4
      ],
      [
        3,
        4
      ]
    ],
    "target": 1,
    "filePath": "119-2200-c/testcases/000/232/730/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_17.c",
    "nodes-line": [
      "    data = NULL;\n",
      "    for(i = 0; i < 1; i++)\n",
      "        data = (wchar_t *)malloc(10*sizeof(wchar_t));\n",
      "        wchar_t source[10+1] = SRC_STRING;\n",
      "        wcsncpy(data, source, wcslen(source) + 1);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = NULL ;",
      "for ( VAR2 = 0 ; VAR2 < 1 ; VAR2 ++ )",
      "VAR1 = ( wchar_t * ) malloc ( 10 * sizeof ( wchar_t ) ) ;",
      "wchar_t VAR3 [ 10 + 1 ] = VAR4 ;",
      "wcsncpy ( VAR1 , VAR3 , wcslen ( VAR3 ) + 1 ) ;"
    ],
    "pair_id": 4120,
    "xfg_id": 12265,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "32",
      "36",
      "39",
      "41",
      "43",
      "45"
    ],
    "keyLine": "45",
    "edges-No": [
      [
        0,
        3
      ],
      [
        0,
        2
      ],
      [
        1,
        3
      ],
      [
        1,
        5
      ],
      [
        2,
        3
      ],
      [
        2,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        4
      ],
      [
        4,
        5
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/073/728/CWE124_Buffer_Underwrite__CWE839_listen_socket_62a.cpp",
    "nodes-line": [
      "    data = -1;\n",
      "        int buffer[10] = { 0 };\n",
      "        if (data < 10)\n",
      "            buffer[data] = 1;\n",
      "            for(i = 0; i < 10; i++)\n",
      "                printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "int VAR2 [ 10 ] = { 0 } ;",
      "if ( VAR1 < 10 )",
      "VAR2 [ VAR1 ] = 1 ;",
      "for ( VAR3 = 0 ; VAR3 < 10 ; VAR3 ++ )",
      "FUN1 ( VAR2 [ VAR3 ] ) ;"
    ],
    "pair_id": 810,
    "xfg_id": 8170,
    "flip": false
  },
  {
    "nodes-lineNo": [
      "35",
      "36",
      "39",
      "41",
      "45",
      "47",
      "49",
      "53",
      "55",
      "57",
      "59"
    ],
    "keyLine": "59",
    "edges-No": [
      [
        0,
        7
      ],
      [
        0,
        8
      ],
      [
        1,
        2
      ],
      [
        2,
        7
      ],
      [
        2,
        8
      ],
      [
        3,
        7
      ],
      [
        3,
        4
      ],
      [
        3,
        5
      ],
      [
        4,
        6
      ],
      [
        4,
        10
      ],
      [
        4,
        8
      ],
      [
        5,
        6
      ],
      [
        5,
        5
      ],
      [
        6,
        10
      ],
      [
        7,
        9
      ],
      [
        7,
        8
      ],
      [
        8,
        10
      ],
      [
        9,
        9
      ],
      [
        9,
        10
      ]
    ],
    "target": 1,
    "filePath": "119-cpp/testcases/000/067/763/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_04.cpp",
    "nodes-line": [
      "    data = -1;\n",
      "    if(STATIC_CONST_TRUE)\n",
      "        data = RAND32();\n",
      "    if(STATIC_CONST_TRUE)\n",
      "            int * buffer = new int[10];\n",
      "            for (i = 0; i < 10; i++)\n",
      "                buffer[i] = 0;\n",
      "            if (data >= 0)\n",
      "                buffer[data] = 1;\n",
      "                for(i = 0; i < 10; i++)\n",
      "                    printIntLine(buffer[i]);\n"
    ],
    "nodes-line-sym": [
      "VAR1 = - 1 ;",
      "if ( VAR2 )",
      "VAR1 = FUN1 ( ) ;",
      "if ( VAR2 )",
      "int * VAR3 = new int [ 10 ] ;",
      "for ( VAR4 = 0 ; VAR4 < 10 ; VAR4 ++ )",
      "VAR3 [ VAR4 ] = 0 ;",
      "if ( VAR1 >= 0 )",
      "VAR3 [ VAR1 ] = 1 ;",
      "for ( VAR4 = 0 ; VAR4 < 10 ; VAR4 ++ )",
      "FUN2 ( VAR3 [ VAR4 ] ) ;"
    ],
    "pair_id": 1939,
    "xfg_id": 12266,
    "flip": false
  }
]